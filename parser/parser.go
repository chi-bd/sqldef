// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:17

package parser

import __yyfmt__ "fmt"

//line parser/parser.y:19

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 396,
	-2, 145,
	-1, 397,
	59, 366,
	-2, 363,
	-1, 425,
	119, 785,
	-2, 236,
	-1, 445,
	119, 784,
	-2, 780,
	-1, 540,
	119, 785,
	-2, 236,
	-1, 562,
	266, 794,
	-2, 693,
	-1, 610,
	266, 794,
	-2, 436,
	-1, 642,
	5, 35,
	-2, 13,
	-1, 648,
	5, 35,
	-2, 15,
	-1, 783,
	266, 794,
	-2, 436,
	-1, 933,
	119, 787,
	-2, 783,
	-1, 943,
	266, 794,
	-2, 305,
	-1, 1020,
	266, 794,
	-2, 436,
	-1, 1079,
	58, 97,
	-2, 194,
	-1, 1082,
	58, 97,
	-2, 194,
	-1, 1133,
	5, 36,
	-2, 562,
	-1, 1209,
	5, 35,
	-2, 14,
	-1, 1262,
	58, 97,
	-2, 165,
	-1, 1394,
	86, 782,
	-2, 770,
	-1, 1483,
	55, 49,
	57, 49,
	-2, 51,
	-1, 1649,
	5, 35,
	-2, 741,
	-1, 1674,
	5, 35,
	-2, 58,
	-1, 1745,
	5, 36,
	-2, 742,
	-1, 1775,
	5, 35,
	-2, 744,
	-1, 1796,
	5, 36,
	-2, 745,
}

const yyPrivate = 57344

const yyLast = 8380

var yyAct = [...]int16{
	542, 523, 1578, 1754, 1703, 1596, 1366, 1667, 655, 745,
	1506, 1704, 30, 1700, 1640, 1579, 746, 39, 40, 552,
	1193, 1659, 1062, 1672, 995, 1519, 57, 833, 1518, 459,
	1493, 63, 63, 63, 1388, 125, 128, 1504, 1090, 1508,
	1391, 1375, 1571, 1048, 1374, 1225, 1051, 1032, 1385, 860,
	1371, 1222, 1203, 1198, 1129, 1278, 30, 848, 26, 386,
	872, 942, 56, 516, 1123, 1028, 636, 887, 976, 979,
	677, 204, 534, 806, 837, 222, 601, 637, 897, 550,
	1013, 188, 1182, 521, 389, 153, 932, 236, 522, 1367,
	398, 502, 58, 810, 123, 124, 773, 237, 43, 424,
	47, 392, 64, 59, 422, 133, 430, 148, 171, 1301,
	703, 702, 712, 713, 705, 706, 707, 708, 709, 710,
	711, 704, 190, 526, 448, 930, 1568, 43, 228, 9,
	1183, 186, 1475, 43, 704, 602, 33, 129, 714, 131,
	1029, 63, 396, 509, 49, 32, 683, 142, 384, 206,
	207, 208, 209, 510, 232, 233, 588, 1261, 399, 400,
	393, 1124, 50, 51, 44, 1798, 45, 244, 1735, 585,
	33, 1095, 31, 410, 1328, 1329, 1794, 645, 792, 1075,
	1065, 1064, 1000, 1001, 1692, 1668, 1455, 441, 382, 1094,
	1787, 1066, 150, 992, 420, 1361, 224, 471, 472, 1448,
	1126, 247, 1067, 1734, 1317, 1086, 43, 764, 1115, 43,
	1441, 43, 43, 397, 43, 1755, 1756, 1757, 1758, 1759,
	1760, 246, 43, 1691, 52, 1725, 43, 478, 245, 1678,
	168, 1520, 1677, 1521, 189, 1679, 463, 464, 465, 466,
	1606, 167, 1726, 1727, 491, 193, 1425, 160, 823, 159,
	822, 163, 164, 166, 1607, 1608, 1786, 161, 168, 434,
	450, 192, 43, 740, 205, 414, 444, 452, 1311, 698,
	454, 701, 457, 458, 989, 432, 197, 715, 716, 717,
	718, 719, 720, 721, 830, 699, 700, 697, 722, 723,
	724, 725, 703, 702, 712, 713, 705, 706, 707, 708,
	709, 710, 711, 704, 1299, 43, 1073, 629, 628, 43,
	445, 44, 45, 45, 195, 194, 1072, 200, 220, 1145,
	202, 217, 703, 702, 712, 713, 705, 706, 707, 708,
	709, 710, 711, 704, 1143, 470, 1730, 212, 213, 214,
	215, 216, 1619, 467, 1407, 1213, 130, 490, 36, 1622,
	857, 707, 708, 709, 710, 711, 704, 1623, 553, 1068,
	1069, 1071, 438, 1635, 1538, 1070, 1685, 1684, 703, 702,
	712, 713, 705, 706, 707, 708, 709, 710, 711, 704,
	135, 384, 511, 714, 399, 400, 1454, 126, 1456, 503,
	489, 242, 33, 1514, 878, 1620, 714, 645, 504, 1075,
	1065, 1064, 1212, 1535, 1047, 888, 135, 1572, 587, 694,
	1330, 1066, 651, 652, 435, 134, 437, 436, 37, 1251,
	1772, 499, 1067, 1272, 441, 645, 680, 1075, 1065, 1064,
	685, 1300, 684, 855, 165, 413, 412, 690, 407, 1066,
	221, 394, 453, 405, 399, 400, 508, 33, 205, 33,
	1067, 714, 703, 702, 712, 713, 705, 706, 707, 708,
	709, 710, 711, 704, 495, 1557, 501, 705, 706, 707,
	708, 709, 710, 711, 704, 793, 1618, 590, 1095, 1447,
	639, 834, 615, 1537, 617, 512, 162, 620, 621, 500,
	656, 1089, 642, 660, 648, 664, 434, 584, 675, 384,
	1076, 149, 1509, 444, 1615, 643, 603, 643, 1334, 586,
	1087, 1088, 432, 1690, 167, 503, 662, 1544, 591, 589,
	1336, 401, 1323, 600, 694, 616, 1073, 1729, 598, 675,
	419, 168, 48, 663, 127, 657, 1072, 504, 44, 668,
	1511, 475, 494, 136, 137, 146, 166, 27, 1616, 473,
	496, 167, 638, 841, 1073, 469, 138, 1331, 483, 444,
	43, 678, 679, 681, 1072, 714, 38, 43, 168, 136,
	137, 665, 1252, 1253, 1254, 166, 643, 682, 658, 1068,
	1069, 1071, 138, 666, 647, 1070, 654, 33, 443, 442,
	1597, 1599, 689, 1671, 656, 714, 395, 659, 403, 404,
	1670, 686, 790, 63, 1669, 35, 34, 1068, 1069, 1071,
	1636, 53, 46, 1070, 384, 497, 378, 741, 714, 6,
	7, 730, 731, 1459, 1791, 1748, 1638, 809, 1523, 801,
	1340, 1165, 1131, 1017, 639, 827, 1507, 744, 743, 613,
	141, 714, 656, 904, 728, 623, 818, 461, 460, 694,
	832, 1351, 693, 1680, 817, 1657, 839, 902, 903, 901,
	692, 691, 854, 41, 1522, 1014, 856, 692, 691, 643,
	1681, 32, 1598, 503, 1106, 788, 786, 693, 1105, 778,
	779, 605, 607, 1104, 693, 587, 873, 874, 432, 503,
	813, 813, 813, 1103, 1084, 1102, 33, 819, 1082, 821,
	826, 33, 624, 1016, 796, 691, 638, 1332, 1333, 1335,
	1337, 1338, 1101, 444, 1645, 43, 1353, 898, 692, 691,
	1076, 693, 1176, 1081, 1100, 714, 1098, 43, 1319, 1682,
	1049, 927, 927, 980, 391, 693, 714, 692, 691, 929,
	692, 691, 1080, 144, 384, 384, 880, 851, 1076, 673,
	676, 980, 643, 1162, 693, 1352, 139, 693, 938, 877,
	982, 981, 875, 1208, 871, 1556, 885, 879, 1616, 876,
	391, 643, 409, 592, 692, 691, 882, 766, 767, 768,
	769, 770, 771, 772, 931, 934, 881, 1137, 996, 1136,
	1279, 693, 604, 391, 402, 198, 1616, 44, 390, 45,
	610, 611, 612, 933, 808, 814, 816, 920, 692, 691,
	1280, 922, 1015, 1449, 925, 928, 1015, 923, 779, 692,
	691, 899, 391, 246, 408, 693, 1406, 1380, 1555, 813,
	813, 1453, 639, 813, 813, 813, 693, 1153, 1452, 983,
	804, 646, 996, 646, 402, 451, 42, 973, 974, 1021,
	1050, 1022, 692, 691, 1079, 900, 803, 991, 1036, 1321,
	1450, 451, 813, 813, 813, 813, 1046, 1451, 201, 693,
	687, 203, 456, 1281, 791, 143, 455, 33, 727, 729,
	1277, 145, 451, 1006, 503, 673, 1279, 813, 1004, 1398,
	692, 691, 692, 691, 825, 892, 894, 895, 1030, 824,
	645, 610, 893, 1438, 638, 597, 1280, 693, 1092, 693,
	476, 444, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 898, 759, 474, 761, 762, 763, 765, 765, 765,
	765, 765, 765, 765, 765, 1509, 782, 783, 784, 785,
	1052, 447, 694, 939, 940, 1116, 1117, 1118, 815, 975,
	402, 1527, 1370, 44, 227, 45, 445, 230, 45, 234,
	235, 1111, 241, 402, 44, 1481, 45, 44, 742, 1511,
	376, 44, 1553, 1511, 379, 1307, 990, 1308, 993, 994,
	1119, 33, 32, 1526, 1130, 703, 702, 712, 713, 705,
	706, 707, 708, 709, 710, 711, 704, 44, 610, 45,
	44, 1008, 45, 741, 33, 646, 1016, 33, 742, 31,
	416, 1078, 645, 1099, 820, 1015, 468, 415, 384, 849,
	694, 1781, 1780, 1142, 1096, 899, 924, 639, 503, 849,
	1779, 694, 834, 1146, 33, 543, 926, 541, 545, 546,
	547, 548, 802, 1172, 1768, 544, 549, 1206, 1161, 1724,
	694, 1343, 1197, 477, 622, 1209, 813, 481, 931, 583,
	643, 582, 402, 1205, 1166, 33, 1174, 1221, 643, 1247,
	1248, 1249, 1436, 694, 1697, 694, 1260, 933, 1747, 694,
	1262, 1079, 1079, 1262, 1079, 1079, 503, 503, 646, 813,
	1216, 1190, 1273, 1191, 1189, 1184, 1276, 246, 513, 638,
	813, 1187, 1188, 1181, 1186, 1192, 444, 748, 406, 1207,
	996, 503, 1172, 1693, 672, 1626, 703, 702, 712, 713,
	705, 706, 707, 708, 709, 710, 711, 704, 1490, 694,
	672, 1540, 384, 1575, 1289, 1486, 1255, 1258, 1217, 1218,
	1219, 1215, 1223, 1701, 1275, 123, 1656, 997, 672, 1539,
	849, 1466, 645, 1294, 672, 1421, 1196, 43, 1282, 1283,
	1284, 1285, 1286, 1268, 1269, 1179, 384, 1172, 1420, 1489,
	1159, 1178, 1303, 1324, 1487, 1566, 1020, 1647, 1287, 1288,
	1292, 1194, 1648, 935, 937, 1295, 1025, 1318, 1290, 1139,
	1140, 1194, 1141, 645, 1037, 1490, 656, 1144, 1304, 985,
	986, 987, 402, 988, 1347, 861, 1322, 1302, 1656, 1147,
	1148, 1342, 1310, 1149, 1150, 1312, 1151, 1152, 1488, 863,
	1486, 1009, 63, 1774, 384, 933, 1490, 998, 1417, 1416,
	672, 1411, 672, 1410, 672, 1344, 1656, 1114, 1263, 1264,
	1265, 1266, 1267, 402, 1007, 246, 1010, 1011, 1383, 672,
	1291, 1399, 1018, 1356, 1019, 1009, 694, 1373, 714, 1172,
	1171, 1157, 1348, 1262, 1368, 1355, 672, 1113, 849, 1031,
	1024, 503, 503, 936, 694, 1155, 1369, 1044, 849, 999,
	1397, 1495, 1498, 1499, 1500, 1496, 1077, 1497, 1501, 488,
	1020, 1660, 1661, 862, 834, 672, 886, 1023, 43, 43,
	672, 671, 1364, 632, 631, 626, 627, 1156, 640, 626,
	625, 55, 54, 1005, 1211, 653, 1172, 1408, 850, 829,
	805, 1154, 1112, 798, 795, 864, 865, 866, 867, 868,
	869, 870, 1423, 619, 618, 614, 1009, 487, 1743, 936,
	488, 384, 645, 1378, 1490, 1404, 1605, 1515, 1412, 1413,
	515, 1381, 488, 1354, 1009, 1138, 1426, 861, 849, 1701,
	672, 794, 1127, 630, 1463, 402, 594, 1460, 1083, 1467,
	1719, 863, 1418, 1419, 634, 633, 1133, 1134, 1135, 1717,
	29, 1303, 1513, 1688, 1465, 1660, 1661, 384, 1468, 714,
	1554, 194, 402, 1444, 1525, 1414, 646, 1445, 1446, 1271,
	1270, 1195, 643, 43, 646, 223, 1110, 1472, 1109, 1085,
	1473, 1027, 1531, 1158, 1533, 503, 1542, 1026, 1003, 1164,
	883, 1484, 1479, 853, 151, 831, 787, 688, 1167, 1168,
	641, 1169, 1170, 1512, 609, 1516, 608, 606, 813, 593,
	514, 479, 218, 421, 1529, 862, 1180, 417, 388, 43,
	43, 211, 1534, 1532, 210, 1476, 1478, 225, 226, 43,
	1510, 1546, 518, 828, 1293, 199, 695, 1543, 11, 492,
	1091, 1663, 1175, 635, 480, 840, 229, 864, 865, 866,
	867, 868, 869, 870, 132, 1592, 1666, 1499, 1500, 1590,
	982, 1580, 1541, 859, 1591, 1588, 1052, 1359, 1665, 1587,
	1589, 1561, 747, 1378, 645, 1586, 1075, 1065, 1064, 1041,
	1042, 758, 1769, 1733, 63, 938, 384, 1564, 1066, 1469,
	760, 387, 1528, 1576, 384, 462, 1574, 1741, 643, 1067,
	1199, 1614, 1593, 1582, 1583, 1581, 1585, 1558, 1584, 596,
	1383, 789, 1339, 1200, 1345, 1530, 1604, 377, 1349, 1601,
	1603, 1139, 1474, 243, 1613, 996, 873, 874, 1503, 811,
	1045, 43, 1038, 1039, 1612, 43, 43, 1570, 595, 983,
	43, 43, 43, 43, 43, 486, 484, 482, 1379, 1637,
	140, 1649, 1594, 977, 1629, 43, 1643, 1602, 843, 1510,
	844, 845, 846, 1409, 643, 1652, 984, 1654, 847, 1655,
	650, 1673, 1642, 842, 1644, 507, 1664, 1033, 1740, 1378,
	1559, 1325, 1674, 1653, 1378, 1378, 1378, 1378, 1378, 1457,
	1034, 1478, 1215, 1478, 43, 643, 1683, 1341, 834, 1378,
	1739, 1675, 1415, 1073, 1699, 1194, 884, 1403, 1402, 384,
	889, 890, 1422, 1072, 1357, 1093, 43, 1401, 982, 1580,
	1702, 1709, 1673, 1400, 1108, 43, 1788, 982, 1580, 1350,
	1707, 1327, 1326, 1686, 1687, 506, 505, 1696, 1705, 238,
	239, 240, 1714, 643, 1712, 1710, 1439, 1107, 411, 1694,
	1711, 836, 838, 1713, 1485, 661, 1068, 1069, 1071, 996,
	1378, 852, 1070, 1462, 8, 1464, 1, 747, 1224, 1378,
	941, 972, 13, 12, 1639, 231, 1570, 1128, 739, 538,
	1621, 1536, 1737, 1732, 524, 1753, 1742, 1382, 656, 1220,
	1363, 656, 656, 656, 1250, 1765, 1752, 983, 446, 1761,
	1762, 1763, 173, 1177, 1764, 418, 983, 1766, 1505, 14,
	1360, 1002, 1427, 1210, 1428, 649, 485, 1429, 1777, 1778,
	1430, 1431, 1433, 1435, 1437, 1773, 1775, 1771, 1274, 1750,
	858, 1751, 674, 1705, 157, 147, 667, 380, 28, 643,
	1785, 10, 1545, 1478, 1097, 158, 156, 1458, 155, 1789,
	154, 152, 449, 191, 196, 1792, 1790, 219, 62, 982,
	1580, 1795, 1797, 1793, 1705, 60, 61, 65, 1386, 643,
	183, 1306, 1502, 1510, 1524, 493, 186, 187, 1012, 1495,
	1498, 1499, 1500, 1496, 1562, 1497, 1501, 726, 1563, 1676,
	1393, 1570, 1708, 1202, 1738, 1698, 1160, 1076, 757, 978,
	525, 174, 891, 645, 537, 1075, 1065, 1064, 536, 535,
	1646, 696, 1377, 1480, 1379, 1494, 181, 1066, 169, 1379,
	1379, 1379, 1379, 1379, 1492, 170, 1478, 1491, 1067, 1662,
	1658, 1376, 1565, 1440, 1505, 1634, 1600, 1434, 983, 1040,
	1358, 1063, 835, 1043, 5, 1731, 1074, 1061, 1552, 645,
	4, 1075, 1065, 1064, 3, 1132, 1060, 1059, 1058, 1056,
	1624, 1625, 1057, 1066, 1054, 1055, 1053, 1035, 1560, 644,
	2, 0, 0, 0, 1067, 1259, 694, 0, 0, 0,
	0, 0, 0, 177, 0, 172, 182, 0, 0, 0,
	0, 0, 0, 179, 178, 1379, 0, 0, 0, 1163,
	1650, 1651, 0, 0, 1379, 0, 0, 0, 0, 0,
	0, 0, 1595, 0, 0, 0, 1173, 0, 0, 703,
	702, 712, 713, 705, 706, 707, 708, 709, 710, 711,
	704, 646, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	1627, 0, 1201, 1204, 0, 1630, 1631, 1632, 1633, 0,
	732, 733, 734, 735, 736, 737, 738, 0, 1214, 0,
	0, 0, 0, 0, 0, 0, 0, 1706, 1073, 646,
	0, 0, 0, 0, 0, 1068, 1069, 1071, 1072, 0,
	0, 1070, 1257, 0, 0, 0, 0, 0, 1720, 1721,
	1722, 0, 702, 712, 713, 705, 706, 707, 708, 709,
	710, 711, 704, 0, 1432, 694, 1372, 0, 0, 175,
	0, 0, 0, 0, 25, 176, 0, 0, 0, 0,
	0, 1068, 1069, 1071, 0, 0, 0, 1070, 0, 0,
	0, 0, 1689, 0, 0, 0, 0, 1695, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1309, 703, 702,
	712, 713, 705, 706, 707, 708, 709, 710, 711, 704,
	0, 0, 1706, 0, 0, 1776, 0, 20, 0, 15,
	1723, 1320, 712, 713, 705, 706, 707, 708, 709, 710,
	711, 704, 16, 0, 23, 0, 0, 0, 184, 0,
	185, 0, 0, 1706, 1736, 646, 0, 0, 0, 0,
	17, 18, 0, 1346, 1744, 1745, 1746, 0, 1749, 0,
	0, 1443, 180, 0, 0, 0, 1076, 0, 1296, 896,
	1362, 0, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 0, 0, 0,
	0, 1125, 703, 702, 712, 713, 705, 706, 707, 708,
	709, 710, 711, 704, 0, 0, 0, 1482, 1483, 1782,
	1783, 1784, 1076, 0, 1617, 703, 702, 712, 713, 705,
	706, 707, 708, 709, 710, 711, 704, 0, 0, 0,
	0, 0, 714, 0, 0, 0, 0, 0, 1796, 0,
	0, 0, 0, 0, 0, 645, 0, 1075, 1065, 1064,
	0, 0, 520, 0, 0, 0, 0, 519, 0, 1066,
	1477, 0, 0, 0, 563, 0, 564, 0, 0, 0,
	1067, 0, 0, 0, 554, 555, 0, 0, 0, 0,
	1442, 0, 0, 0, 402, 0, 0, 445, 543, 540,
	541, 545, 546, 547, 548, 0, 0, 0, 544, 549,
	439, 440, 0, 0, 0, 0, 517, 532, 0, 562,
	0, 1470, 1471, 1204, 714, 0, 0, 0, 0, 1573,
	0, 0, 0, 0, 1577, 0, 0, 0, 645, 0,
	1075, 1065, 1064, 529, 530, 0, 0, 19, 0, 579,
	0, 531, 1066, 0, 943, 528, 533, 0, 0, 21,
	22, 0, 24, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 714, 0, 0, 1073, 1120, 1121, 1122, 0, 945,
	0, 0, 1628, 0, 1072, 0, 0, 797, 426, 427,
	428, 0, 0, 714, 0, 0, 431, 429, 439, 440,
	0, 539, 0, 0, 0, 0, 0, 1767, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 1069, 1071,
	0, 0, 0, 1070, 1567, 0, 0, 954, 960, 958,
	0, 0, 955, 1405, 0, 953, 0, 0, 962, 0,
	0, 961, 947, 957, 959, 956, 951, 1073, 946, 0,
	964, 963, 965, 944, 967, 714, 0, 1072, 971, 968,
	970, 969, 565, 966, 0, 0, 0, 0, 774, 0,
	0, 1611, 948, 949, 0, 0, 0, 0, 714, 0,
	0, 0, 0, 581, 0, 566, 567, 0, 0, 0,
	0, 0, 950, 952, 0, 0, 0, 0, 0, 0,
	1068, 1069, 1071, 776, 0, 0, 1070, 0, 1641, 0,
	0, 0, 0, 0, 0, 0, 551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 0, 0, 568, 578,
	574, 575, 572, 573, 571, 570, 569, 580, 556, 557,
	558, 559, 561, 0, 0, 443, 442, 560, 1076, 0,
	0, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 0, 116, 117, 0, 118, 119, 120, 122, 121,
	0, 921, 777, 433, 438, 0, 0, 1297, 1298, 0,
	66, 775, 576, 0, 0, 0, 781, 780, 0, 0,
	0, 0, 0, 0, 0, 0, 1715, 0, 599, 1716,
	0, 445, 1718, 425, 426, 427, 428, 1313, 1314, 1315,
	1316, 0, 431, 429, 439, 440, 0, 0, 0, 1728,
	0, 0, 0, 0, 0, 0, 435, 0, 437, 436,
	0, 1076, 0, 0, 0, 0, 1641, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 362,
	351, 0, 310, 364, 280, 298, 372, 300, 301, 337,
	259, 320, 0, 295, 277, 0, 283, 252, 290, 253,
	281, 312, 0, 278, 0, 353, 323, 0, 1770, 747,
	370, 0, 328, 67, 0, 0, 0, 0, 315, 355,
	318, 346, 309, 338, 267, 327, 365, 296, 333, 366,
	0, 0, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 360, 292, 375, 0,
	336, 251, 330, 0, 257, 260, 371, 358, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 314, 319, 343,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 284, 0, 326, 0, 0, 0, 264,
	258, 0, 311, 0, 0, 0, 266, 0, 285, 344,
	0, 248, 349, 356, 308, 0, 774, 359, 305, 304,
	0, 0, 0, 0, 0, 0, 297, 0, 341, 373,
	363, 316, 354, 282, 291, 0, 289, 0, 0, 0,
	325, 339, 0, 0, 0, 0, 0, 361, 0, 433,
	438, 776, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 286, 347,
	350, 271, 335, 261, 293, 342, 294, 317, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1387, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 437, 436, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 443,
	442, 0, 0, 1395, 0, 1547, 0, 1548, 0, 1549,
	777, 1550, 1551, 0, 0, 0, 0, 0, 66, 775,
	0, 0, 0, 0, 781, 780, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 255, 275, 357, 0, 0, 0, 0, 1396,
	1394, 1390, 1389, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 1392, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 274, 268, 269, 321, 322,
	367, 368, 369, 345, 265, 0, 272, 273, 0, 352,
	0, 0, 0, 324, 0, 0, 0, 374, 0, 0,
	0, 0, 0, 0, 0, 299, 250, 303, 0, 0,
	0, 67, 0, 0, 0, 262, 263, 0, 0, 307,
	302, 329, 331, 340, 348, 0, 279, 313, 362, 351,
	0, 310, 364, 280, 298, 372, 300, 301, 337, 259,
	320, 0, 295, 277, 0, 283, 252, 290, 253, 281,
	312, 0, 278, 0, 353, 323, 0, 0, 0, 370,
	0, 328, 0, 0, 0, 0, 0, 315, 355, 318,
	346, 309, 338, 267, 327, 365, 296, 333, 366, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 360, 292, 375, 0, 336,
	251, 330, 0, 257, 260, 371, 358, 287, 288, 0,
	645, 0, 1075, 1065, 1064, 0, 314, 319, 343, 306,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 284, 0, 326, 1067, 0, 0, 264, 258,
	0, 311, 0, 0, 0, 266, 0, 285, 344, 0,
	248, 349, 356, 308, 0, 0, 359, 305, 304, 0,
	0, 0, 0, 0, 0, 297, 0, 341, 373, 363,
	316, 354, 282, 291, 0, 289, 0, 0, 0, 325,
	339, 0, 0, 0, 0, 0, 361, 0, 0, 1569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 249, 286, 347, 350,
	271, 335, 261, 293, 342, 294, 317, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 645, 0, 1075, 1065, 1064, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 1395, 0, 0, 0, 0, 0, 1067, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	0, 0, 1068, 1069, 1071, 254, 0, 0, 1070, 0,
	0, 255, 275, 357, 0, 0, 0, 0, 1396, 1394,
	0, 0, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 1392, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 274, 268, 269, 321, 322, 367,
	368, 369, 345, 265, 0, 272, 273, 0, 352, 0,
	0, 0, 324, 0, 0, 0, 374, 0, 0, 0,
	0, 0, 1073, 0, 299, 250, 303, 0, 0, 0,
	0, 0, 1072, 0, 262, 263, 0, 0, 307, 302,
	329, 331, 340, 348, 0, 279, 313, 362, 351, 0,
	310, 364, 280, 298, 372, 300, 301, 337, 259, 320,
	0, 295, 277, 0, 283, 252, 290, 253, 281, 312,
	0, 278, 0, 353, 323, 1068, 1069, 1071, 370, 0,
	328, 1070, 0, 1076, 0, 0, 315, 355, 318, 346,
	309, 338, 267, 327, 365, 296, 333, 366, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 360, 292, 375, 0, 336, 251,
	330, 0, 257, 260, 371, 358, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 314, 319, 343, 306, 0,
	0, 0, 0, 0, 1305, 0, 0, 0, 0, 0,
	0, 284, 0, 326, 0, 0, 0, 264, 258, 0,
	311, 0, 0, 0, 266, 0, 285, 344, 0, 248,
	349, 356, 308, 0, 0, 359, 305, 304, 0, 945,
	0, 0, 0, 0, 297, 0, 341, 373, 363, 316,
	354, 282, 291, 0, 289, 0, 0, 0, 325, 339,
	0, 0, 0, 0, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 0, 256, 249, 286, 347, 350, 271,
	335, 261, 293, 342, 294, 317, 276, 954, 960, 958,
	0, 0, 955, 0, 0, 953, 0, 0, 962, 0,
	0, 961, 947, 957, 959, 956, 951, 0, 946, 0,
	964, 963, 965, 944, 967, 0, 0, 0, 971, 968,
	970, 969, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 1395, 948, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	255, 275, 357, 0, 0, 0, 0, 1396, 1394, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	1392, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 274, 268, 269, 321, 322, 367, 368,
	369, 345, 265, 0, 272, 273, 0, 352, 0, 0,
	0, 324, 0, 0, 0, 374, 0, 0, 0, 0,
	0, 0, 0, 299, 250, 303, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 307, 302, 329,
	331, 340, 348, 0, 279, 313, 362, 351, 0, 310,
	364, 280, 298, 372, 300, 301, 337, 259, 320, 0,
	295, 277, 0, 283, 252, 290, 253, 281, 312, 0,
	278, 0, 353, 323, 0, 89, 0, 370, 32, 328,
	0, 0, 0, 0, 0, 315, 355, 318, 346, 309,
	338, 267, 327, 365, 296, 333, 366, 0, 0, 0,
	445, 1084, 45, 33, 0, 1082, 0, 0, 0, 0,
	0, 0, 332, 360, 292, 375, 0, 336, 251, 330,
	0, 257, 260, 371, 358, 287, 288, 0, 0, 0,
	1081, 0, 0, 0, 314, 319, 343, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1185, 1080,
	284, 0, 326, 0, 0, 0, 264, 258, 0, 311,
	74, 0, 0, 266, 0, 285, 344, 0, 248, 349,
	356, 308, 0, 0, 359, 305, 304, 0, 0, 0,
	0, 0, 0, 297, 0, 341, 373, 363, 316, 354,
	282, 291, 0, 289, 0, 90, 0, 325, 339, 0,
	0, 0, 0, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 249, 286, 347, 350, 271, 335,
	261, 293, 342, 294, 317, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 116, 117, 0, 118, 119, 120,
	122, 121, 91, 92, 93, 97, 95, 94, 96, 68,
	70, 0, 66, 69, 75, 71, 72, 73, 87, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	88, 98, 99, 100, 101, 102, 103, 104, 105, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 255,
	275, 357, 0, 0, 0, 0, 0, 385, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 274, 268, 269, 321, 322, 367, 368, 369,
	345, 265, 0, 272, 273, 0, 352, 0, 0, 0,
	324, 0, 0, 0, 374, 67, 0, 0, 0, 0,
	0, 0, 299, 250, 303, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 307, 302, 329, 331,
	340, 348, 0, 279, 313, 362, 351, 0, 310, 364,
	280, 298, 372, 300, 301, 337, 259, 320, 0, 295,
	277, 0, 283, 252, 290, 253, 281, 312, 0, 278,
	0, 353, 323, 0, 89, 0, 370, 0, 328, 0,
	0, 0, 0, 0, 315, 355, 318, 346, 309, 338,
	267, 327, 365, 296, 333, 366, 0, 0, 0, 33,
	0, 669, 33, 670, 0, 0, 0, 0, 0, 0,
	0, 332, 360, 292, 375, 0, 336, 251, 330, 0,
	257, 260, 371, 358, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 314, 319, 343, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 326, 0, 0, 0, 264, 258, 0, 311, 74,
	0, 0, 266, 0, 285, 344, 0, 248, 349, 356,
	308, 0, 0, 359, 305, 304, 0, 0, 0, 0,
	0, 0, 297, 0, 341, 373, 363, 316, 354, 282,
	291, 0, 289, 0, 90, 0, 325, 339, 0, 0,
	0, 0, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 249, 286, 347, 350, 271, 335, 261,
	293, 342, 294, 317, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 116, 117, 0, 118, 119, 120, 122,
	121, 91, 92, 93, 97, 95, 94, 96, 68, 70,
	0, 66, 69, 75, 71, 72, 73, 87, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 88,
	98, 99, 100, 101, 102, 103, 104, 105, 0, 0,
	0, 0, 254, 645, 0, 1075, 1065, 1064, 255, 275,
	357, 0, 0, 0, 0, 0, 385, 1066, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 274, 268, 269, 321, 322, 367, 368, 369, 345,
	265, 0, 272, 273, 0, 352, 0, 0, 0, 324,
	0, 0, 0, 374, 67, 0, 0, 0, 0, 0,
	0, 299, 250, 303, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 307, 302, 329, 331, 340,
	348, 0, 279, 313, 362, 351, 0, 310, 364, 280,
	298, 372, 300, 301, 337, 259, 320, 0, 295, 277,
	0, 283, 252, 290, 253, 281, 312, 0, 278, 0,
	353, 323, 1073, 0, 0, 370, 0, 328, 0, 0,
	0, 0, 1072, 315, 355, 318, 346, 309, 338, 267,
	327, 365, 296, 333, 366, 0, 381, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 0,
	332, 360, 292, 375, 0, 336, 251, 330, 0, 257,
	260, 371, 358, 287, 288, 1068, 1069, 1071, 0, 0,
	0, 1070, 314, 319, 343, 306, 0, 0, 0, 0,
	0, 1365, 0, 0, 0, 0, 0, 0, 284, 0,
	326, 0, 0, 0, 264, 258, 0, 311, 0, 0,
	0, 266, 0, 285, 344, 0, 248, 349, 356, 308,
	0, 0, 359, 305, 304, 0, 0, 0, 0, 0,
	0, 297, 0, 341, 373, 363, 316, 354, 282, 291,
	0, 289, 0, 0, 0, 325, 339, 0, 0, 0,
	0, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 249, 286, 347, 350, 271, 335, 261, 293,
	342, 294, 317, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 255, 275, 357,
	0, 0, 0, 0, 0, 385, 0, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	274, 268, 269, 321, 322, 367, 368, 369, 345, 265,
	0, 272, 273, 0, 352, 0, 0, 0, 324, 0,
	0, 0, 374, 0, 0, 0, 0, 0, 0, 0,
	299, 250, 303, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 0, 0, 307, 302, 329, 331, 340, 348,
	0, 279, 313, 362, 351, 0, 310, 364, 280, 298,
	372, 300, 301, 337, 259, 320, 0, 295, 277, 0,
	283, 252, 290, 253, 281, 312, 0, 278, 0, 353,
	323, 0, 0, 0, 370, 0, 328, 0, 0, 0,
	0, 0, 315, 355, 318, 346, 309, 338, 267, 327,
	365, 296, 333, 366, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	360, 292, 375, 0, 336, 251, 330, 0, 257, 260,
	371, 358, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 314, 319, 343, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 0, 284, 0, 326,
	0, 0, 0, 264, 258, 0, 311, 0, 0, 0,
	266, 0, 285, 344, 0, 248, 349, 356, 308, 0,
	0, 359, 305, 304, 0, 0, 0, 0, 0, 0,
	297, 0, 341, 373, 363, 316, 354, 282, 291, 0,
	289, 0, 0, 0, 325, 339, 0, 0, 0, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 249, 286, 347, 350, 271, 335, 261, 293, 342,
	294, 317, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 255, 275, 357, 0,
	0, 0, 0, 0, 385, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 274,
	268, 269, 321, 322, 367, 368, 369, 345, 265, 0,
	272, 273, 0, 352, 0, 0, 0, 324, 0, 0,
	0, 374, 0, 0, 0, 0, 0, 0, 0, 299,
	250, 303, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 307, 302, 329, 331, 340, 348, 0,
	279, 313, 362, 351, 0, 310, 364, 280, 298, 372,
	300, 301, 337, 259, 320, 0, 295, 277, 0, 283,
	252, 290, 253, 281, 312, 0, 278, 0, 353, 323,
	0, 0, 0, 370, 0, 328, 0, 0, 0, 0,
	0, 315, 355, 318, 346, 309, 338, 267, 327, 365,
	296, 333, 366, 0, 0, 0, 445, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 360,
	292, 375, 0, 336, 251, 330, 0, 257, 260, 371,
	358, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	314, 319, 343, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 284, 0, 326, 0,
	0, 0, 264, 258, 0, 311, 0, 0, 0, 266,
	0, 285, 344, 0, 248, 349, 356, 308, 0, 0,
	359, 305, 304, 0, 0, 0, 0, 0, 0, 297,
	0, 341, 373, 363, 316, 354, 282, 291, 0, 289,
	0, 0, 0, 325, 339, 0, 0, 0, 0, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	249, 286, 347, 350, 271, 335, 261, 293, 342, 294,
	317, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 255, 275, 357, 0, 0,
	0, 0, 0, 385, 0, 0, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 274, 268,
	269, 321, 322, 367, 368, 369, 345, 265, 0, 272,
	273, 0, 352, 0, 0, 0, 324, 0, 0, 0,
	374, 0, 0, 0, 0, 0, 0, 0, 299, 250,
	303, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 307, 302, 329, 331, 340, 348, 0, 279,
	313, 362, 351, 0, 310, 364, 280, 298, 372, 300,
	301, 337, 259, 320, 0, 295, 277, 0, 283, 252,
	290, 253, 281, 312, 0, 278, 0, 353, 323, 0,
	0, 0, 370, 0, 328, 0, 0, 0, 0, 0,
	315, 355, 318, 346, 309, 338, 267, 327, 365, 296,
	333, 366, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 360, 292,
	375, 0, 336, 251, 330, 0, 257, 260, 371, 358,
	287, 288, 498, 0, 0, 0, 0, 0, 0, 314,
	319, 343, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 326, 0, 0,
	0, 264, 258, 0, 311, 0, 0, 0, 266, 0,
	285, 344, 0, 248, 349, 356, 308, 0, 0, 359,
	305, 304, 0, 0, 0, 0, 0, 0, 297, 0,
	341, 373, 363, 316, 354, 282, 291, 0, 289, 0,
	0, 0, 325, 339, 0, 0, 0, 0, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 249,
	286, 347, 350, 271, 335, 261, 293, 342, 294, 317,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 255, 275, 357, 0, 0, 0,
	0, 0, 385, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 274, 268, 269,
	321, 322, 367, 368, 369, 345, 265, 0, 272, 273,
	0, 352, 0, 0, 0, 324, 0, 0, 0, 374,
	0, 0, 0, 0, 0, 0, 0, 299, 250, 303,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 307, 302, 329, 331, 340, 348, 0, 279, 313,
	362, 351, 0, 310, 364, 280, 298, 372, 300, 301,
	337, 259, 320, 0, 295, 277, 0, 283, 252, 290,
	253, 281, 312, 0, 278, 0, 353, 323, 0, 0,
	0, 370, 0, 328, 0, 0, 0, 0, 0, 315,
	355, 318, 346, 309, 338, 267, 327, 365, 296, 333,
	366, 0, 0, 0, 33, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 360, 292, 375,
	0, 336, 251, 330, 0, 257, 260, 371, 358, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 314, 319,
	343, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 284, 0, 326, 0, 0, 0,
	264, 258, 0, 311, 0, 0, 0, 266, 0, 285,
	344, 0, 248, 349, 356, 308, 0, 0, 359, 305,
	304, 0, 0, 0, 0, 0, 0, 297, 0, 341,
	373, 363, 316, 354, 282, 291, 0, 289, 0, 0,
	0, 325, 339, 0, 0, 0, 0, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 249, 286,
	347, 350, 271, 335, 261, 293, 342, 294, 317, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 255, 275, 357, 0, 0, 0, 0,
	0, 385, 0, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 274, 268, 269, 321,
	322, 367, 368, 369, 345, 265, 0, 272, 273, 0,
	352, 0, 0, 0, 324, 0, 0, 0, 374, 0,
	0, 0, 0, 0, 0, 0, 299, 250, 303, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	307, 302, 329, 331, 340, 348, 0, 279, 313, 362,
	351, 0, 310, 364, 280, 298, 372, 300, 301, 337,
	259, 320, 0, 295, 277, 0, 283, 252, 290, 253,
	281, 312, 0, 278, 0, 353, 323, 0, 0, 0,
	370, 0, 328, 0, 0, 0, 0, 0, 315, 355,
	318, 346, 309, 338, 267, 327, 365, 296, 333, 366,
	0, 0, 0, 44, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 360, 292, 375, 0,
	336, 251, 330, 0, 257, 260, 371, 358, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 314, 319, 343,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 284, 0, 326, 0, 0, 0, 264,
	258, 0, 311, 0, 0, 0, 266, 0, 285, 344,
	0, 248, 349, 356, 308, 0, 0, 359, 305, 304,
	0, 0, 0, 0, 0, 0, 297, 0, 341, 373,
	363, 316, 354, 282, 291, 0, 289, 0, 0, 0,
	325, 339, 0, 0, 0, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 286, 347,
	350, 271, 335, 261, 293, 342, 294, 317, 276, 520,
	0, 0, 0, 0, 519, 0, 0, 0, 0, 0,
	0, 563, 0, 564, 0, 0, 0, 0, 0, 0,
	0, 554, 555, 0, 0, 0, 0, 0, 0, 1609,
	0, 402, 0, 0, 445, 543, 540, 541, 545, 546,
	547, 548, 0, 0, 0, 544, 549, 439, 440, 1610,
	0, 0, 0, 517, 532, 0, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	529, 530, 255, 275, 357, 0, 579, 0, 531, 0,
	0, 527, 528, 533, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 274, 268, 269, 321, 322,
	367, 368, 369, 345, 265, 0, 272, 273, 0, 352,
	0, 0, 0, 324, 0, 0, 0, 374, 539, 0,
	0, 0, 0, 0, 0, 299, 250, 303, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 0, 0, 307,
	302, 329, 331, 340, 348, 520, 279, 313, 423, 0,
	519, 445, 0, 425, 426, 427, 428, 563, 0, 564,
	0, 0, 431, 429, 439, 440, 0, 554, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 0, 694,
	445, 543, 540, 541, 545, 546, 547, 548, 0, 565,
	0, 544, 549, 439, 440, 0, 0, 0, 0, 517,
	532, 0, 562, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 566, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 529, 530, 0, 0,
	0, 0, 579, 0, 531, 0, 0, 527, 528, 533,
	0, 0, 0, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 578, 574, 575, 572,
	573, 571, 570, 569, 580, 556, 557, 558, 559, 561,
	0, 0, 443, 442, 560, 0, 807, 0, 520, 0,
	0, 0, 0, 519, 539, 0, 0, 0, 0, 0,
	563, 0, 564, 0, 0, 0, 0, 0, 0, 0,
	554, 555, 0, 0, 0, 0, 0, 0, 0, 576,
	402, 0, 0, 445, 543, 540, 541, 545, 546, 547,
	548, 0, 0, 0, 544, 549, 439, 440, 0, 0,
	0, 0, 517, 532, 0, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 433,
	438, 0, 0, 0, 0, 565, 0, 0, 0, 529,
	530, 812, 0, 0, 0, 579, 0, 531, 0, 0,
	527, 528, 533, 0, 0, 0, 581, 0, 566, 567,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 437, 436, 0, 0, 0, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 443,
	442, 0, 0, 0, 0, 0, 0, 539, 0, 0,
	0, 568, 578, 574, 575, 572, 573, 571, 570, 569,
	580, 556, 557, 558, 559, 561, 0, 0, 443, 442,
	560, 0, 0, 0, 520, 0, 0, 0, 0, 519,
	0, 0, 0, 0, 0, 0, 563, 0, 564, 0,
	0, 0, 0, 0, 0, 0, 554, 555, 0, 0,
	0, 0, 0, 0, 0, 576, 402, 0, 0, 445,
	543, 540, 541, 545, 546, 547, 548, 0, 565, 0,
	544, 549, 439, 440, 0, 0, 0, 0, 517, 532,
	0, 562, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 566, 567, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 529, 530, 812, 0, 0,
	0, 579, 0, 531, 0, 0, 527, 528, 533, 0,
	0, 0, 551, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 578, 574, 575, 572, 573,
	571, 570, 569, 580, 556, 557, 558, 559, 561, 0,
	0, 443, 442, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 520, 0, 0, 0, 0, 519, 576, 0,
	0, 0, 0, 0, 563, 0, 564, 0, 0, 0,
	0, 0, 0, 0, 554, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 445, 543, 540,
	541, 545, 546, 547, 548, 0, 0, 0, 544, 549,
	439, 440, 0, 0, 565, 0, 517, 532, 0, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 566, 567, 0,
	0, 0, 0, 529, 530, 0, 0, 0, 0, 579,
	0, 531, 0, 0, 527, 528, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 578, 574, 575, 572, 573, 571, 570, 569, 580,
	556, 557, 558, 559, 561, 0, 0, 443, 442, 560,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 520,
	0, 0, 0, 0, 519, 0, 0, 0, 0, 0,
	0, 563, 0, 564, 576, 0, 0, 0, 0, 0,
	0, 554, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 445, 543, 540, 541, 545, 546,
	547, 548, 0, 0, 0, 544, 549, 439, 440, 0,
	0, 0, 565, 517, 532, 0, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 566, 567, 0, 0, 0,
	529, 530, 0, 0, 0, 0, 579, 0, 531, 0,
	0, 527, 528, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 551, 0, 0, 0,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 578,
	574, 575, 572, 573, 571, 570, 569, 580, 556, 557,
	558, 559, 561, 0, 0, 443, 442, 560, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 0,
	564, 0, 576, 0, 0, 0, 0, 0, 554, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 445, 543, 540, 541, 545, 546, 547, 548, 0,
	0, 0, 544, 549, 439, 440, 0, 0, 0, 565,
	0, 532, 0, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 566, 567, 0, 0, 0, 529, 530, 0,
	0, 0, 0, 579, 0, 531, 0, 0, 527, 528,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 551, 0, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 578, 574, 575, 572,
	573, 571, 570, 569, 580, 556, 557, 558, 559, 561,
	0, 0, 443, 442, 560, 539, 0, 0, 563, 0,
	564, 0, 0, 0, 0, 0, 0, 0, 554, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 445, 543, 540, 541, 545, 546, 547, 548, 576,
	0, 0, 544, 549, 439, 440, 0, 0, 0, 0,
	0, 532, 0, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 529, 530, 0,
	0, 0, 0, 579, 0, 531, 0, 0, 527, 528,
	533, 0, 0, 0, 0, 0, 0, 581, 0, 566,
	567, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 568, 578, 574, 575, 572, 573, 571, 570,
	569, 580, 556, 557, 558, 559, 561, 0, 33, 443,
	442, 560, 0, 0, 0, 563, 0, 564, 0, 0,
	0, 0, 0, 0, 0, 554, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 0, 445, 543,
	540, 541, 545, 546, 547, 548, 576, 0, 0, 544,
	549, 439, 440, 0, 0, 0, 565, 0, 532, 0,
	562, 0, 0, 0, 0, 74, 0, 800, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 566,
	567, 0, 0, 0, 529, 530, 0, 0, 0, 0,
	579, 0, 531, 0, 0, 527, 528, 533, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	551, 0, 0, 0, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 578, 574, 575, 572, 573, 571, 570,
	569, 580, 556, 557, 558, 559, 561, 0, 0, 443,
	442, 560, 539, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 0, 116,
	117, 0, 118, 119, 120, 122, 121, 91, 92, 93,
	97, 95, 94, 96, 68, 70, 576, 66, 69, 75,
	71, 72, 73, 87, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 88, 98, 99, 100, 101,
	102, 103, 104, 105, 0, 0, 0, 0, 799, 0,
	0, 0, 0, 565, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 566, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	578, 574, 575, 572, 573, 571, 570, 569, 580, 556,
	557, 558, 559, 561, 74, 0, 443, 442, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 0, 116, 117,
	0, 118, 119, 120, 122, 121, 91, 92, 93, 97,
	95, 94, 96, 68, 70, 0, 66, 69, 75, 71,
	72, 73, 87, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 88, 98, 99, 100, 101, 102,
	103, 104, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
}

var yyPact = [...]int16{
	497, -1000, -248, -1000, -1000, 1412, 1978, 413, -1000, -1000,
	-1000, 948, 476, 475, 216, 434, 818, 528, 905, 483,
	397, -1000, -220, -199, -1000, -105, 482, -1000, 1254, -1000,
	4133, 4133, 4133, -1000, 333, 818, 397, 143, 397, 1430,
	361, 678, 1557, 521, -1000, -1000, 397, 905, 665, -1000,
	-1000, -1000, -1000, 252, 157, 111, 1777, -144, -14, -1000,
	-1000, -1000, -1000, -1000, 1335, -1000, -1000, -1000, 1335, 39,
	1409, 1335, 1409, -1000, 1335, 1409, 25, 25, 25, 25,
	25, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1398, 1395,
	-1000, 1335, 1335, 1335, 1335, 1335, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1386, 96, 1386, 1349,
	1349, -1000, -1000, 1777, 1777, 1403, 905, 818, 1422, 905,
	-218, 905, 905, 1661, 905, -1000, -1000, -1000, 195, 1529,
	4133, 6344, 905, -1000, 1523, 489, 905, 4499, -1000, 1487,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1392, 744, 818,
	294, 83, 1309, 421, 384, 1049, 291, -1000, -1000, -1000,
	753, -1000, 818, -1000, 1669, -1000, -1000, 289, -1000, 288,
	656, 956, 905, 1391, 178, 1387, 6662, 878, -1000, -255,
	-1000, -16, -1000, -1000, 819, 25, 1335, -1000, 25, 813,
	25, 25, -1000, -1000, 532, 1494, 532, 532, 532, 532,
	955, 955, -146, -146, -1000, -1000, -1000, -1000, 860, 1386,
	-1000, -1000, -1000, 847, -1000, 905, 818, 1385, 1420, 905,
	1554, 426, -1000, -1000, 1553, 1552, 1283, -1000, -1000, 194,
	-1000, 387, -1000, 818, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1414, -1000, 404, 488,
	5606, 157, -1000, -1000, -1000, -1000, -1000, -1000, 390, -1000,
	1656, 1586, 304, 7, -203, 1039, -1000, -1000, 1384, -1000,
	-1000, 7345, -1000, 1002, 1000, -1000, 23, 818, -1000, -207,
	102, 94, -1000, -1000, 1309, -1000, 1383, 7345, 1545, -1000,
	1510, 842, -1000, 2552, -1000, -239, -1000, -1000, -1000, -239,
	-1000, -1000, -1000, 1309, -1000, 1381, 1380, -1000, 1378, -1000,
	-1000, 1309, 1309, 1309, 520, -1000, -1000, -1000, -1000, -1000,
	-1000, 1277, 532, 25, 532, 1276, 1275, 532, 532, -1000,
	-1000, 995, 586, -1000, -1000, -1000, -1000, 1252, -1000, 1248,
	-1000, 80, 79, -1000, 1306, -1000, 1246, 1319, 1419, 251,
	905, 1374, 1336, 397, 1336, 1581, 242, 905, 1661, 388,
	1661, 387, 818, 386, 818, -1000, -1000, 433, 4130, -1000,
	-1000, 1243, -1000, 259, 1335, 395, 395, -217, 285, 283,
	-203, 1309, 1371, -1000, 390, 591, -1000, 7345, 191, 1309,
	1309, -1000, -1000, 501, -1000, -1000, -1000, 7652, 7652, 7652,
	7652, 7652, 7652, 7652, -1000, -1000, -1000, -1000, -3, -1000,
	-239, -1000, 907, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	519, 518, -1000, 7178, 1309, 1309, 1309, 1309, 1309, 1309,
	1309, 1309, 7345, 1309, 1481, 1309, 1309, 1309, 1309, 1309,
	1309, 1309, 1309, 1309, 1309, 1309, 2670, 1309, 1309, 1309,
	1309, -1000, -1000, -1000, -1000, -203, 1370, -1000, -1000, -1000,
	656, -1000, 7345, 388, 816, 122, -1000, 1304, 1266, 2316,
	1265, -1000, 7789, -1000, 973, -1000, 798, -1000, 782, 1262,
	6834, 7010, 7010, 5975, -1000, -1000, 532, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 25, 953, 25, -27, -29,
	836, -1000, 831, 251, 818, 905, 1261, 1303, -1000, 228,
	1369, 388, -1000, 1613, 1676, -1000, 1336, 905, -1000, 420,
	1582, -1000, -1000, 1579, -1000, 1301, -1000, -1000, 1295, 1661,
	1367, 818, -1000, -1000, 287, 818, -1000, -1000, -1000, -1000,
	-1000, 1150, 390, 1531, -1000, -1000, -1000, 715, -1000, -1000,
	688, 225, 692, -1000, 818, -203, 1364, 7345, 390, 1238,
	237, 7345, 7345, 824, -1000, 559, 7652, 788, 563, 7652,
	7652, 7652, 7652, 7652, 7652, 7652, 7652, 7652, 7652, 7652,
	7652, 7652, 7652, 7652, 2352, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 967, -1000, 1336,
	975, 975, -236, -236, -236, -236, -236, -236, 77, -1000,
	-253, -1000, -1000, 5237, 5975, 973, 1216, 584, 7178, 7010,
	7010, 2218, 7345, 7010, 7010, 7010, 1561, 651, 584, 897,
	1577, 973, 973, 973, -1000, 973, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 37, -1000, -1000, -1000, -1000,
	-1000, -1000, 7010, 7010, 7010, 7010, -1000, 818, 1309, 591,
	1221, -167, 7345, 1362, 825, -1000, 1255, -239, -1000, -1000,
	-1000, -144, -1000, -1000, -1000, -1000, 973, 7010, 1198, 1216,
	-1000, 642, -1000, 514, 1198, 642, 1198, 1309, -1000, 532,
	-1000, 532, -1000, -1000, 1239, 1212, 1128, 1361, 1355, -225,
	819, 251, 1211, 1590, 1604, 1336, 1541, 1467, -1000, 973,
	1537, 818, -1000, -1000, -1000, -1000, -1000, 220, 648, 818,
	3237, 1232, -1000, 637, 1353, 149, 355, 1416, 1302, 133,
	-1000, 965, 640, 952, 638, 626, 609, 607, 597, 592,
	588, -1000, -1000, -1000, -1000, -1000, 1668, -1000, -1000, -1000,
	1644, 1352, 1350, 390, 591, 1209, 1150, -1000, -128, 559,
	628, -1000, -1000, 874, -1000, -1000, 221, -1000, -1000, -1000,
	-1000, 788, 7652, 7652, 7652, 9, 221, 2104, 2009, 1930,
	-236, 244, 244, 22, 22, 22, 22, 22, 362, 362,
	-1000, -143, -1000, 1335, 973, -1000, -239, 947, -1000, -1000,
	923, 1309, 513, -1000, -1000, -1000, 7345, -1000, 973, 1198,
	1198, 732, 1298, 7819, 1335, -1000, 1335, 1349, -1000, -1000,
	119, 1335, 104, -1000, -1000, -1000, -1000, 1349, -1000, -1000,
	-1000, -1000, -1000, 1335, 1335, -1000, -1000, 1335, 1335, -1000,
	1335, 1335, 814, 1264, 1250, 1198, 7010, -1000, 669, -1000,
	7345, 973, -1000, 512, 905, -1000, -1000, -1000, -1000, -1000,
	1198, 973, 1297, 1198, 1198, 1202, -1000, 7345, 237, 1418,
	-1000, -1000, 664, -1000, 1113, 1107, -1000, -1000, 1198, 7010,
	-246, -1000, -1000, -1000, 945, -1000, -1000, 3761, -246, -246,
	7010, -1000, -1000, -1000, -1000, -225, 251, 390, 1623, 1345,
	1098, 1623, 1511, 7345, 7345, 1613, -1000, 1336, -1000, -1000,
	1561, -1000, -1000, 695, -1000, 1336, 1259, 217, 141, 7345,
	-1000, 3237, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1613, -1000, -1000, -1000, 818, 2970, 818, 818,
	818, 381, 7512, 7345, -1000, -1000, -1000, 905, 1018, 3764,
	637, 637, 3764, 637, 637, 390, 390, 1344, 1343, 276,
	-1000, 818, -1000, -174, 1302, 818, -1000, 817, -1000, -1000,
	736, 810, 736, 736, 736, 736, 736, 395, 395, 818,
	390, 1192, 237, 1150, 1416, -1000, -1000, -1000, -1000, -1000,
	9, 221, 2081, -1000, 7652, 7652, 76, -1000, 52, -1000,
	-239, 5975, 584, -1000, -1000, -1000, 3378, 916, 7345, -1000,
	209, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3378, 7652, 7652, 7652, 7652, -136, 1279,
	643, -1000, 7345, 776, -1000, 5237, -1000, -1000, -1000, -1000,
	-1000, 383, 818, 591, -1000, 1652, -175, 352, -1000, -1000,
	-1000, -1000, -1000, 1309, -1000, -1000, 511, -1000, -1000, 973,
	1623, 993, 1177, 1150, 7345, 388, -225, 1150, -1000, 1650,
	555, 698, 1296, -1000, 661, 1590, 973, 1452, -1000, -1000,
	-148, 7345, 4397, 3237, 584, -1000, 1590, 413, 941, 738,
	1294, 8038, -1000, 2654, 832, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	818, 1642, 1636, 1627, 1626, 2229, 191, 743, 140, 1574,
	-1000, -1000, 3764, -1000, -1000, -1000, -1000, -1000, 1175, 1173,
	390, 390, 1339, 1309, 1171, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 656, 656, 1110,
	1097, 1150, -1000, 1416, -1000, -1000, 7652, 221, 221, -31,
	-1000, 923, -1000, -1000, 973, 1335, 973, -1000, -1000, 591,
	-1000, -1000, 973, 1987, 1848, 1015, 884, 1309, -125, -1000,
	584, 7345, -1000, 905, -1000, 237, 395, 395, -1000, -1000,
	-1000, 136, 797, 804, 775, 768, 30, -1000, 1603, 466,
	4868, -1000, 1150, 1623, 1150, 1416, 584, 1093, 1623, 1416,
	-1000, 1479, 7345, 7345, 7345, -1000, 1511, -1000, 7010, -1000,
	-1000, -243, 584, -1000, -1000, 3237, 1873, -1000, 1511, 938,
	905, 1163, -1000, 1138, 1765, -1000, -1000, -1000, 1535, 894,
	479, 818, 206, -1000, -1000, 1290, 3023, -58, -1000, -1000,
	-1000, 578, 509, 922, -1000, 1491, -1000, -1000, 2970, 1518,
	-1000, -1000, -1000, -1000, -1000, 3237, 3237, 3237, 648, 219,
	-1000, 286, 1091, 1073, 390, 818, -1000, 1302, -1000, -1000,
	378, 1150, 1416, -1000, 221, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7652, -1000, 7652, -1000, 7652, -1000, 7652, 7652,
	973, 911, 584, 1334, -1000, -1000, -1000, 765, -1000, 702,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 105, -1000, 1594,
	973, -1000, 1416, 1150, -1000, -1000, -1000, 1150, -1000, 1476,
	584, 584, -1000, -1000, 1164, 7345, -251, 3104, -1000, -1000,
	250, 905, -1000, 250, 1078, 738, 905, -1000, -1000, 897,
	738, 738, 738, 738, 738, -1000, 1461, 1455, -1000, 1451,
	1445, 1441, 905, -1000, 1071, 894, 538, 1309, -1000, 908,
	-1000, -1000, -1000, 4133, 1568, 3392, 1290, -58, 1289, -1000,
	-50, -38, 6515, 5975, 532, -1000, -1000, -1000, -1000, -1000,
	818, 419, 1827, 391, 138, 210, 151, -1000, 160, 1150,
	1150, 1057, 973, -1000, 905, 1416, -1000, 351, 351, 351,
	351, 267, -1000, -1000, 818, -1000, -1000, -1000, 507, 7345,
	-1000, -1000, -1000, 1416, -1000, 1623, 738, 584, 629, -1000,
	-1000, 1146, 1309, -1000, 1623, 738, 1169, -1000, 1179, -1000,
	569, 1765, 1331, 1417, 1237, -1000, -1000, -1000, -1000, 1454,
	-1000, 1442, -1000, -1000, -1000, -1000, -158, 474, 470, 463,
	818, -1000, 1336, -1000, 1289, -58, -62, -1000, -1000, -1000,
	-1000, 584, 567, -1000, -1000, -1000, 3237, 585, 645, 3237,
	-1000, -1000, 167, -1000, 1416, 1416, -1000, -1000, 1327, -1000,
	-1000, -1000, -1000, -1000, 973, 172, -162, 1055, 5975, 1017,
	-1000, 584, -1000, 1621, 1287, -1000, 1305, 897, 1309, -1000,
	1006, 818, 1613, 1169, -1000, 1613, 897, 7345, -1000, -1000,
	7345, 1323, -1000, 7345, -1000, -1000, -1000, -1000, 1314, 1309,
	1309, 1309, 992, -1000, -1000, -1000, -1000, -66, -53, -1000,
	7345, 392, 132, 1498, -1000, -1000, -1000, -1000, 818, -1000,
	1472, -139, -179, -1000, -1000, -1000, 973, 7345, 1616, 1592,
	-1000, 1499, 1089, 1281, -1000, -1000, 6691, 973, 1021, 506,
	992, 1590, -1000, 1590, -1000, 584, 584, 388, 584, -151,
	388, 388, 388, 912, 818, -1000, -1000, -1000, 584, -1000,
	3237, 2312, 986, -1000, 1471, -1000, -1000, -1000, -1000, 7345,
	7345, 273, -1000, 1309, -1000, -1000, 1187, 818, 818, -1000,
	-1000, -1000, 972, 964, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 962, 962, 962, 538, -1000, 171, -1000, -1000, -153,
	584, 1282, 1647, -1000, 1309, -1000, 1336, 505, -1000, -1000,
	-1000, -151, -1000, -1000, -1000, -158, -1000, -170, 897, 1281,
	973, 818, -1000, -1000, -182, 1151, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1900, 9, 22, 1899, 1897, 1896, 1895, 1894, 1892,
	1889, 1888, 1887, 1886, 1884, 1880, 1877, 1876, 1874, 74,
	1873, 1872, 1871, 68, 1870, 1869, 1865, 1863, 64, 193,
	73, 93, 948, 1862, 37, 44, 41, 1861, 21, 1860,
	1859, 50, 1857, 30, 1854, 1845, 827, 1843, 1842, 5,
	20, 63, 88, 1841, 1840, 83, 1462, 1839, 1838, 72,
	1834, 1832, 78, 16, 4, 19, 11, 1830, 123, 1,
	1829, 69, 1828, 1826, 1825, 1824, 27, 1823, 52, 60,
	47, 53, 1822, 8, 65, 42, 23, 13, 2, 48,
	28, 1820, 15, 34, 25, 1819, 58, 1817, 100, 43,
	57, 59, 0, 40, 80, 1808, 1805, 1804, 79, 86,
	39, 10, 1802, 1801, 1798, 61, 96, 26, 103, 102,
	1797, 92, 1796, 1795, 1788, 1787, 1784, 245, 795, 106,
	71, 29, 1783, 1782, 81, 335, 321, 75, 343, 1368,
	62, 1781, 1780, 1778, 1776, 85, 1775, 70, 101, 24,
	434, 1774, 1771, 1768, 1767, 1766, 1765, 1764, 91, 1762,
	66, 77, 38, 350, 49, 1760, 1758, 1746, 1745, 76,
	1743, 1740, 1739, 67, 1735, 1733, 90, 84, 108, 104,
	99, 1732, 1728, 55, 105, 97, 1724, 87, 46, 6,
	89, 1720, 51, 1719, 1717, 1715, 7, 3, 1714, 1711,
	1710, 1709, 1708, 1707, 54, 1705, 82, 1704, 14, 1703,
	1702, 45, 1698, 1696, 1694, 1691, 1685, 358, 437, 1684,
	157, 107, 1682, 207,
}

var yyR1 = [...]uint8{
	0, 213, 214, 214, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	216, 216, 2, 2, 3, 4, 4, 5, 5, 6,
	6, 22, 22, 7, 8, 8, 8, 219, 219, 41,
	41, 85, 85, 9, 9, 9, 9, 10, 10, 193,
	193, 192, 194, 194, 11, 11, 11, 11, 11, 186,
	186, 186, 186, 186, 12, 12, 189, 189, 189, 13,
	13, 13, 90, 90, 94, 94, 94, 95, 95, 95,
	95, 205, 205, 114, 114, 215, 215, 220, 220, 220,
	220, 220, 220, 220, 184, 184, 184, 184, 185, 185,
	185, 185, 187, 187, 188, 188, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 191, 191, 100, 100,
	167, 167, 167, 168, 168, 168, 168, 168, 168, 170,
	170, 171, 171, 106, 106, 172, 172, 18, 152, 153,
	153, 153, 153, 153, 153, 153, 153, 139, 139, 139,
	117, 117, 117, 117, 117, 117, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 178, 178, 178, 178, 178,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 180,
	181, 182, 174, 174, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 129, 129,
	129, 129, 129, 129, 173, 173, 169, 169, 169, 169,
	121, 121, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 120, 120, 120, 120, 120, 125,
	125, 122, 122, 122, 122, 122, 122, 122, 122, 118,
	118, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 126, 126, 124, 124, 124, 124, 124,
	124, 124, 124, 138, 138, 127, 127, 136, 136, 137,
	137, 137, 128, 128, 128, 135, 135, 135, 132, 132,
	133, 133, 134, 134, 134, 130, 130, 130, 131, 131,
	131, 141, 163, 163, 163, 165, 165, 166, 166, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	151, 151, 183, 183, 162, 162, 162, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 150, 150, 160, 160,
	161, 161, 158, 158, 158, 159, 145, 145, 145, 145,
	145, 146, 146, 147, 147, 147, 147, 142, 142, 143,
	143, 144, 144, 176, 176, 176, 209, 209, 209, 209,
	209, 209, 210, 210, 177, 177, 148, 148, 149, 149,
	156, 156, 156, 156, 221, 221, 154, 154, 154, 155,
	155, 155, 222, 19, 20, 20, 21, 21, 21, 25,
	25, 25, 23, 23, 24, 24, 30, 30, 29, 29,
	31, 31, 31, 31, 105, 105, 105, 104, 104, 206,
	206, 206, 206, 206, 33, 33, 34, 34, 35, 35,
	36, 36, 36, 196, 196, 195, 195, 197, 197, 197,
	197, 197, 197, 48, 48, 83, 83, 83, 86, 86,
	37, 37, 37, 37, 38, 38, 39, 39, 40, 40,
	112, 112, 111, 111, 111, 110, 110, 42, 42, 42,
	44, 43, 43, 43, 43, 45, 45, 47, 47, 46,
	46, 49, 49, 49, 49, 50, 50, 84, 84, 32,
	32, 32, 32, 32, 32, 32, 97, 97, 52, 52,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	61, 61, 61, 61, 61, 61, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 28, 28, 62,
	62, 62, 68, 63, 63, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 59, 59, 59, 59, 59, 59, 59, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	223, 223, 60, 60, 60, 60, 26, 26, 26, 26,
	26, 113, 113, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 116, 116, 116, 116, 116,
	116, 116, 116, 72, 72, 27, 27, 70, 70, 71,
	99, 99, 73, 73, 69, 69, 69, 198, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 74, 74,
	75, 75, 207, 207, 208, 76, 76, 77, 77, 78,
	79, 79, 79, 80, 80, 80, 80, 81, 81, 81,
	54, 54, 54, 54, 54, 54, 82, 82, 82, 82,
	87, 87, 64, 64, 66, 66, 65, 67, 88, 88,
	92, 89, 89, 93, 93, 93, 93, 93, 16, 17,
	91, 91, 91, 107, 107, 107, 98, 98, 96, 96,
	102, 103, 103, 103, 108, 108, 109, 109, 199, 199,
	199, 200, 200, 200, 201, 201, 202, 203, 203, 204,
	212, 212, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 217, 218,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 11, 13, 13, 14, 14, 6, 7,
	1, 1, 4, 6, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 8, 8, 7, 6, 1, 1, 1,
	3, 0, 4, 3, 4, 5, 4, 2, 6, 1,
	3, 2, 0, 1, 2, 2, 2, 3, 5, 0,
	2, 2, 2, 2, 3, 5, 1, 2, 3, 7,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 0, 3, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 3, 1, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 4, 0, 3,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 4, 4, 0,
	1, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 6, 6, 8, 8,
	5, 8, 7, 4, 0, 2, 4, 6, 2, 4,
	2, 1, 1, 1, 2, 1, 1, 1, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 2, 2, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 4, 5, 4, 4, 4, 1, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 0, 2, 5, 2, 3, 3,
	2, 3, 2, 2, 3, 4, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 5, 5, 8,
	8, 13, 11, 1, 1, 2, 2, 10, 8, 9,
	7, 7, 5, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 4, 8, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	2, 1, 4, 5, 5, 5, 5, 6, 4, 4,
	4, 6, 6, 6, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 9, 7, 5, 4, 4, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 0, 2, 1, 3, 5, 3, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 2, 1, 3, 1, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 5, 3, 1, 3,
	1, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	2, 0, 2, 2, 0, 1, 4, 1, 3, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -213, -1, -14, -15, -18, 122, 123, -214, 377,
	-152, 56, -209, -210, -172, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -153, -139,
	-102, 61, 34, 59, 130, 130, 132, 202, 132, -102,
	-102, 135, -46, -108, 59, 61, 129, -98, 135, 364,
	361, 362, 329, 129, 58, 57, -140, -117, -121, -118,
	-123, -122, -124, -102, -119, -120, 238, 341, 235, 239,
	236, 241, 242, 243, 116, 240, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 244, 256, 31,
	151, 228, 229, 230, 233, 232, 234, 231, 257, 258,
	259, 260, 261, 262, 263, 264, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 220, 221, 223, 224,
	225, 227, 226, -140, -140, -102, 54, 201, -102, -98,
	203, -98, 54, -184, 54, 19, 182, 183, 195, 78,
	23, 119, -98, -46, 78, -46, 293, -156, -221, 344,
	35, -139, -141, -145, -142, -143, -144, -157, -146, 138,
	136, 146, 375, 140, 141, -150, 142, 130, 147, 71,
	78, -178, 138, -181, 54, 272, 278, 136, 147, 146,
	375, 69, 139, 23, 351, 353, 29, 30, -134, 378,
	266, -132, 275, -127, 56, -127, -126, 237, -128, 56,
	-127, -128, -127, -128, -130, 239, -130, -130, -130, -130,
	56, 56, -127, -127, -127, -127, -127, -136, 56, -125,
	222, -136, -137, 56, -137, 54, 55, -46, -102, 54,
	-46, -205, 372, 373, -46, -46, -187, -185, 8, 9,
	10, -46, 196, 24, -117, -109, -108, -101, 127, 183,
	352, 77, 23, 25, 272, 278, 182, 80, 116, 16,
	81, 189, 361, 362, 115, 330, 122, 50, 322, 323,
	320, 187, 332, 333, 321, 279, 194, 20, 29, 372,
	10, 26, 149, 22, 109, 124, 184, 84, 85, 152,
	24, 150, 73, 190, 192, 19, 53, 142, 11, 351,
	13, 14, 366, 353, 135, 134, 96, 365, 130, 48,
	8, 118, 27, 373, 93, 44, 147, 193, 46, 94,
	17, 324, 325, 32, 339, 156, 111, 51, 38, 367,
	78, 368, 71, 54, 293, 188, 76, 15, 49, 157,
	369, 144, 191, 95, 125, 329, 47, 185, 370, 128,
	186, 6, 335, 31, 148, 45, 129, 280, 83, 133,
	72, 163, 5, 146, 9, 52, 55, 326, 327, 328,
	36, 82, 12, 145, 343, 74, -46, 24, 127, -46,
	-154, 57, -103, 69, -102, 286, -101, 34, 56, -177,
	54, 78, -148, -102, 147, -150, 59, 130, -176, 361,
	362, -217, 56, -150, -150, 59, 59, 147, 71, 19,
	-102, 9, 147, 147, -177, 61, -46, 56, -174, 352,
	16, 56, -179, 56, -180, 61, 62, 63, 64, 71,
	-129, 70, -52, 267, -59, 320, 323, 322, 268, 72,
	73, -102, 338, 337, -108, 59, -182, 63, 379, -133,
	276, 63, -130, -127, -130, 63, 59, -130, -130, -131,
	116, 115, 31, -131, -131, -131, -131, -138, 61, -138,
	-135, 343, 344, -135, 63, -136, 63, -46, -102, 56,
	54, -46, 23, 132, 23, -167, 23, 54, 57, 196,
	-184, -102, 55, -106, 138, -145, 146, 127, 86, -103,
	-221, -161, -158, -102, 147, 10, 9, 19, 142, 136,
	146, 375, -176, 59, 56, -32, -51, 78, -56, 29,
	24, -55, -52, -69, -198, -67, -68, 116, 117, 105,
	106, 113, 79, 118, -59, -57, -58, -60, -201, 173,
	61, 62, -102, 60, 70, 63, 64, 65, 66, 71,
	-108, 298, -65, -217, 46, 47, 330, 331, 332, 333,
	339, 334, 81, 36, 38, 244, 267, 268, 320, 328,
	327, 326, 324, 325, 322, 323, 374, 135, 321, 111,
	329, 265, 59, 59, -176, 146, -148, -102, 363, -178,
	375, -129, -217, 56, -32, 23, 29, 63, -179, 56,
	-180, -169, 374, -169, -217, -127, 56, -127, 56, 56,
	-217, -217, -217, 119, 58, -131, -130, -131, 58, 58,
	-131, -131, 59, 59, 116, 58, 57, 58, 228, 228,
	57, 58, 57, 56, 55, 54, -160, -161, -59, -102,
	-46, 56, -2, -3, -4, 6, -217, -98, -2, -168,
	19, 170, 171, -46, -185, -83, -102, 147, -187, -184,
	-102, -216, 130, 147, -102, 138, -145, -155, -103, 61,
	63, 58, 57, -127, -159, 270, -127, -147, 166, 167,
	31, 168, -147, 363, 147, 147, -176, -217, 56, -161,
	-218, 77, 76, 93, 58, -32, -53, 96, 78, 94,
	95, 80, 102, 101, 112, 105, 106, 107, 108, 109,
	110, 111, 103, 104, 374, 86, 87, 88, 89, 90,
	91, 92, 97, 98, 99, 100, -97, -217, -68, -217,
	120, 121, -56, -56, -56, -56, -56, -56, -56, -202,
	266, -169, 61, 119, 119, -2, -63, -32, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -72, -32, -217,
	39, -217, -217, -217, -223, -217, -223, -223, -223, -223,
	-223, -223, -223, -116, 116, 239, 151, 230, -119, -118,
	245, 244, -217, -217, -217, -217, -176, 56, -177, -32,
	-83, 58, 56, 353, 57, 58, -179, 61, 58, 269,
	118, -117, -218, 58, 58, 58, -30, 22, -29, -63,
	-31, -32, 107, -108, -29, -32, -29, -103, -131, -130,
	61, -130, 277, 277, 63, 63, -160, -102, -46, 58,
	56, 56, -83, -76, 15, -21, 5, -19, -222, -2,
	-46, 133, 21, 6, 8, 9, 10, 19, -100, 57,
	23, -187, -215, 56, -102, 146, -102, -163, -165, 343,
	-164, 55, 143, 69, 175, 176, 177, 178, 179, 180,
	181, -158, -79, 25, 26, -177, 54, 71, 169, -177,
	54, -148, -176, 56, -32, -161, 58, -173, 168, -32,
	-32, -61, 71, 78, 72, 73, -56, -62, -65, -68,
	67, 96, 94, 95, 80, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-121, 229, -116, -119, 59, -55, 61, -102, -55, -102,
	378, -103, -109, -101, -103, -218, 57, -218, -2, -29,
	-29, -32, -115, 116, 235, 151, 230, 224, 254, 255,
	274, 228, 275, 217, 209, 214, 227, 225, 211, 226,
	210, 223, 220, 233, 232, 234, 245, 236, 241, 243,
	242, 240, -32, -31, -31, -29, -23, 22, -70, -71,
	82, -69, -102, -108, 19, -218, -218, -218, -218, 237,
	-29, -30, -29, -29, -29, -149, -102, -217, -218, 58,
	349, 350, -32, 56, 63, 58, -134, -218, -29, 57,
	-218, -218, -105, -104, 23, -102, 61, 119, -218, -218,
	-217, -131, -131, 58, 58, 58, 56, 56, -84, 365,
	-160, 58, -80, 17, 16, -5, -3, -217, 21, 22,
	-25, 42, 43, -20, -218, 23, -149, 184, -99, 82,
	-102, -188, -190, -6, -8, -7, -10, -9, -11, -12,
	-13, -16, -3, -22, 10, 9, 20, 31, 188, 189,
	194, 190, 145, 135, -17, 8, 329, 54, -220, -102,
	105, 86, 61, -139, 57, 56, 56, 361, 362, 136,
	-162, 54, -164, 343, 56, 345, 59, -151, 86, 61,
	86, 86, 86, 86, 86, 86, 86, 9, 10, 56,
	56, -161, -218, 58, -163, 336, 71, 72, 73, -62,
	-56, -56, -56, -28, 152, 77, 343, -218, -203, -204,
	61, 119, -32, -218, -218, -218, 57, 55, 57, -127,
	-127, -127, -137, 215, -127, 215, -137, -127, -127, -127,
	-127, -127, -127, 23, 57, 11, 57, 11, -218, -29,
	-73, -71, 84, -32, -218, 119, -108, -218, -218, -218,
	-218, 58, 57, -32, -173, 54, 58, -175, 58, 58,
	-218, -31, -206, 376, -104, 107, -109, -206, -206, -30,
	-84, -160, -161, -50, 12, 56, 58, -50, -81, 19,
	32, -32, -77, -78, -32, -76, -2, -23, 68, -2,
	-170, 55, 185, 204, -32, -190, -76, -19, -19, -19,
	-193, -102, -192, -19, -212, -211, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, -102, -102, -102,
	-186, 38, 191, 192, 193, -51, -56, -32, -51, -46,
	58, -220, -102, -220, -220, -220, -220, -220, -161, -161,
	56, 56, 147, -102, -166, -164, -102, 63, -183, 54,
	74, 63, -183, -183, -183, -183, -183, -147, -147, -149,
	-161, 58, -173, -163, -162, -28, 77, -56, -56, 228,
	379, 57, -169, -103, -115, 116, -113, 59, 61, -32,
	-130, 59, -115, -56, -56, -56, -56, 340, -76, 85,
	-32, 83, -103, 139, -102, -218, 10, 9, 349, 350,
	58, 205, 355, 356, 156, 357, 168, 358, 359, -217,
	119, -218, -50, 58, 58, -163, -32, -83, -84, -163,
	9, 96, 57, 18, 57, -79, -80, -218, -24, 45,
	-171, 343, -32, -191, -190, 204, -189, -190, -80, -96,
	11, -41, -46, -34, -35, -36, -37, -48, -68, -217,
	-46, 57, -194, -117, 186, -89, -114, 206, -93, 288,
	287, -103, 298, -91, 286, 239, 285, -183, 57, -102,
	11, 11, 11, 11, -190, 204, 83, 204, -100, 19,
	58, 58, -161, -161, 56, -217, 58, 57, -177, -177,
	58, 58, -163, -162, -56, 277, -204, -218, -218, -218,
	-218, -218, 57, -218, 19, -218, 57, -218, 19, -217,
	-27, 335, -32, -46, -173, -147, -147, 343, 63, 16,
	63, 63, 63, 63, 356, 156, 358, 16, -218, 157,
	-76, 107, -163, -50, -163, -162, 58, -50, -162, 40,
	-32, -32, -78, -81, -29, 375, -190, 377, -190, -81,
	-47, 27, -46, -46, -41, -219, 57, 11, 55, 31,
	57, -42, -44, -43, -45, 44, 48, 50, 45, 46,
	47, 51, -112, 23, -34, -217, -111, 157, -110, 23,
	-108, 61, -192, -102, 187, 57, -89, 206, -90, -94,
	289, 291, 86, 119, -107, -102, 61, 29, 31, -211,
	27, -189, -188, -189, -99, 184, -199, 197, 78, 58,
	58, -161, -102, -164, 139, -163, -162, -56, -56, -56,
	-56, -56, -218, 61, 56, 63, 63, 360, -108, 16,
	-218, -162, -163, -163, 41, -33, 11, -32, 377, 85,
	-190, -85, 157, -46, -85, 55, -34, -46, -88, -92,
	-69, -35, -36, -36, -35, -36, 44, 44, 44, 49,
	44, 49, 44, -43, -108, -218, -49, 52, 134, 53,
	-217, -110, 19, -93, -90, 57, 290, 292, 293, 54,
	74, -32, -103, -131, -102, 85, 377, 377, 85, 204,
	185, -200, 198, 197, -163, -163, 58, -218, -46, -162,
	-218, -218, -218, -218, -26, 96, 343, -149, 119, -207,
	-208, -32, -162, -50, -34, 85, -54, 31, 36, -2,
	-217, -217, -50, -34, -50, -50, 57, 86, -39, -38,
	54, 55, -40, 54, -38, 44, 44, -196, 343, 130,
	130, 130, -86, -102, -2, -94, -95, 294, 291, 297,
	86, 85, 84, -189, 200, 199, -162, -162, 56, -218,
	341, 51, 346, 58, -103, -218, -76, 57, -74, 13,
	-87, 54, -88, -64, -66, -65, -217, -2, -82, -102,
	-86, -76, -50, -76, -92, -32, -32, 56, -32, 56,
	-217, -217, -217, -218, 57, 291, 295, 296, -32, 135,
	204, 377, -149, 41, 342, 347, -218, -208, -75, 14,
	16, 28, -87, 57, -218, -218, -218, 57, 119, -218,
	-80, -80, -83, -195, -197, 366, 367, 368, 369, 370,
	371, -83, -83, -83, -111, -102, -189, 85, 58, 41,
	-32, -63, 147, -66, 36, -2, -217, -102, -102, 58,
	58, 57, -218, -218, -218, -49, 85, 343, 9, -64,
	-2, 119, -197, -196, 346, -88, -218, -102, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 778, 1, 3,
	6, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	776, 397, 398, 399, 402, 0, 0, 779, 0, 150,
	194, 194, 194, 780, 0, 0, 776, 0, 776, 0,
	0, 0, 0, 509, 784, 785, 776, 0, 0, 403,
	400, 401, 146, 0, 410, 0, 157, 322, 318, 161,
	162, 163, 164, 165, 305, 241, 269, 270, 305, 293,
	312, 305, 312, 276, 305, 312, 325, 325, 325, 325,
	325, 284, 285, 286, 287, 288, 289, 290, 0, 0,
	261, 305, 305, 305, 305, 305, 267, 268, 295, 296,
	297, 298, 299, 300, 301, 302, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 307, 259, 307, 309,
	309, 257, 258, 158, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 148, 412, 0,
	415, 151, 152, 153, 154, 155, 156, 0, 404, 406,
	0, 393, 0, 0, 0, 0, 0, 366, 367, 167,
	0, 169, 0, 171, 0, 173, 174, 0, 176, 178,
	404, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	324, 320, 319, 240, 0, 325, 305, 294, 325, 0,
	325, 325, 277, 278, 328, 0, 328, 328, 328, 328,
	0, 0, 315, 315, 264, 265, 266, 252, 0, 307,
	260, 254, 255, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 130, 0, 112, 108, 109,
	110, 0, 107, 0, 21, 510, 786, 787, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 0, 777, 143, 0,
	0, 0, 416, 418, 781, 782, 783, 414, 0, 376,
	0, 0, 0, 407, 357, 0, 362, -2, 0, 394,
	395, 794, 951, 0, 0, 360, 393, 406, 168, 0,
	0, 0, 175, 177, 0, 181, 182, 794, 0, 212,
	0, 0, 195, 0, 198, -2, 201, 202, 203, 236,
	205, 206, 207, 0, 209, 305, 305, 232, 0, 528,
	529, 0, 0, 0, 0, -2, 210, 211, 323, 160,
	321, 0, 328, 325, 328, 0, 0, 328, 328, 279,
	329, 0, 0, 280, 281, 282, 283, 0, 303, 0,
	262, 0, 0, 263, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 776, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 28, 144, 0, 0, 417,
	413, 0, 370, 305, 305, 0, 0, 0, 0, 0,
	393, 0, 0, 361, 0, 0, 519, 794, 524, 526,
	0, 565, 566, 567, 568, 569, 570, 794, 794, 794,
	794, 794, 794, 794, 596, 597, 598, 599, 0, 601,
	-2, 709, 704, 711, 712, 713, 714, 715, 716, 717,
	0, 0, 757, 794, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 640, 640,
	640, 640, 640, 640, 640, 640, 0, 0, 0, 0,
	0, 795, 358, 359, 364, 393, 0, 407, 193, 170,
	404, 172, 794, 0, 0, 0, 213, 0, 0, 0,
	0, 200, 0, 204, 0, 228, 0, 230, 0, 0,
	-2, 794, 794, 0, 306, 271, 328, 273, 313, 314,
	274, 275, 330, 326, 327, 325, 0, 325, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 368, 369, 305,
	0, 0, -2, 725, 0, 422, 0, 0, -2, 0,
	0, 131, 132, 128, 113, 111, 475, 476, 0, 0,
	95, 0, 30, 31, 407, 406, 29, 411, 419, 420,
	421, 332, 0, 730, 374, 375, 373, 404, 383, 384,
	0, 0, 404, 405, 406, 393, 0, 794, 0, 0,
	234, 794, 794, 0, 952, 522, 794, 0, 0, 794,
	794, 794, 794, 794, 794, 794, 794, 794, 794, 794,
	794, 794, 794, 794, 0, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 525, 0, 539, 0,
	0, 0, 587, 588, 589, 590, 591, 592, 593, 600,
	0, 708, 710, 0, 0, 35, 0, 563, 794, 794,
	794, 794, 794, 794, 794, 794, 432, 0, 694, 0,
	0, 0, 0, 0, 631, 0, 632, 633, 634, 635,
	636, 637, 638, 639, 685, 0, 687, 688, 689, 690,
	691, 692, 794, -2, 794, 794, 365, 0, 0, 0,
	0, 0, 794, 190, 0, 196, 0, 236, 199, 237,
	238, 322, 208, 229, 231, 233, 0, 794, 0, 0,
	438, 444, 440, 0, 0, 444, 0, 0, 272, 328,
	304, 328, 316, 317, 0, 0, 0, 0, 0, 517,
	951, 0, 0, 733, 0, 0, 426, 429, 424, 35,
	0, 0, 134, 135, 136, 137, 138, 0, 700, 0,
	0, 0, 22, 97, 0, 0, 407, 354, 333, 0,
	335, 0, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 372, 731, 732, 377, 0, 385, 386, 378,
	0, 0, 0, 0, 0, 0, 332, 392, 0, 520,
	521, 523, 540, 0, 542, 544, 530, 531, 559, 560,
	561, 0, 794, 794, 794, 557, 535, 0, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	585, 0, 595, 305, 0, 583, 236, 0, 584, 594,
	0, 705, 0, -2, 707, 562, 794, 756, 35, 0,
	0, 0, 0, -2, 305, 656, 305, 309, 659, 660,
	661, 305, 664, 666, 667, 668, 669, 309, 671, 672,
	673, 674, 675, 305, 305, 678, 679, 305, 305, 682,
	305, 305, 0, 0, 0, 0, 794, 433, 702, 697,
	794, 0, 704, 0, 0, 628, 629, 630, 641, 686,
	0, 0, 437, 0, 0, 0, 408, 794, 234, 183,
	186, 187, 0, 214, 0, 0, 239, 602, 0, 794,
	449, 608, 441, 445, 0, 447, 448, 0, 449, 449,
	-2, 291, 292, 308, 311, 517, 0, 0, 515, 0,
	0, 515, 737, 794, 794, 725, 37, 0, 427, 428,
	432, 430, 431, 423, 36, 0, 139, 0, 0, 794,
	477, 18, 114, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 725, 422, 422, 422, 0, 422, 0, 0,
	0, 69, 794, 794, 768, 41, 42, 0, 0, -2,
	97, 97, -2, 97, 97, 0, 0, 0, 0, 0,
	331, 0, 336, 0, 0, 0, 339, 0, 351, 341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 332, 354, 235, 541, 543, 545, 532,
	557, 536, 0, 533, 794, 794, 0, 527, 0, 797,
	236, 0, 564, -2, 609, 610, 0, 0, 794, 653,
	325, 657, 658, 662, 663, 665, 670, 676, 677, 680,
	681, 683, 684, 0, 794, 794, 794, 794, 0, 725,
	0, 698, 794, 0, 626, 0, 627, 642, 643, 644,
	645, 0, 0, 0, 179, 0, 0, 0, 192, 197,
	603, 439, 604, 0, 446, 442, 0, 605, 606, 0,
	515, 0, 0, 332, 794, 0, 517, 332, 32, 0,
	0, 734, 726, 727, 730, 733, 35, 434, 425, -2,
	141, 794, 129, 0, 701, 115, 733, 778, 0, 0,
	57, 62, 59, 0, 0, 800, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 64, 65, 66,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 128,
	96, 98, -2, 99, 100, 101, 102, 103, 0, 0,
	0, 0, 0, 355, 0, 337, 342, 340, 343, 352,
	353, 344, 345, 346, 347, 348, 349, 404, 404, 0,
	0, 332, 391, 354, 390, 534, 794, 558, 537, 0,
	796, 0, 799, 706, 0, 305, 0, 651, 652, 0,
	654, 655, 0, 0, 0, 0, 0, 0, 695, 625,
	703, 794, 705, 0, 409, 234, 0, 0, 188, 189,
	191, 0, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 607, 332, 515, 332, 354, 516, 0, 515, 354,
	738, 0, 794, 794, 794, 729, 737, 38, 794, 435,
	16, 0, 140, 17, 126, 0, 0, 76, 737, 0,
	0, 0, 49, 0, 456, 458, 459, 460, 490, 0,
	492, 0, 0, 61, 63, 53, 0, 0, 761, 93,
	94, 0, 0, 0, -2, 0, 772, 769, 0, 67,
	70, 71, 72, 73, 74, 0, 0, 0, 700, 0,
	23, 788, 0, 0, 0, 0, 334, 0, 379, 380,
	0, 332, 354, 388, 538, 586, 798, 611, 614, 612,
	613, 615, 794, 617, 794, 619, 794, 621, 794, 794,
	0, 0, 699, 0, 180, 184, 185, 0, 216, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 450, 0,
	0, 443, 354, 332, 10, 8, 518, 332, 12, 0,
	735, 736, 728, 33, 454, 794, 0, 0, 77, 125,
	51, 0, 508, -2, 0, 0, 0, 47, 48, 0,
	0, 0, 0, 0, 0, 497, 0, 0, 500, 0,
	0, 0, 0, 491, 0, 0, 511, 0, 493, 0,
	495, 496, 60, 0, 0, 0, 54, 0, 56, 82,
	0, 0, 794, 0, 328, 773, 774, 775, 771, 801,
	0, 0, 0, 0, 0, 0, 791, 789, 0, 332,
	332, 0, 0, 338, 0, 354, 389, 0, 0, 0,
	0, 646, 624, 696, 0, 215, 217, 226, 0, 794,
	452, 7, 11, 354, 739, 515, 0, 142, 0, 19,
	78, 0, 0, 507, 515, 0, 515, 50, 515, 758,
	0, 457, 486, 488, 0, 483, 498, 499, 501, 0,
	503, 0, 505, 506, 461, 462, 463, 0, 0, 0,
	0, 494, 0, 762, 55, 0, 0, 85, 86, 763,
	764, 765, 0, 767, 68, 75, 0, 0, 80, 0,
	129, 25, 0, 790, 354, 354, 24, 356, 0, 387,
	616, 618, 620, 622, 0, 0, 0, 0, 0, 0,
	722, 724, 9, 718, 455, 127, 750, 0, 0, -2,
	0, 0, 725, 515, 46, 725, 0, 794, 480, 487,
	794, 0, 481, 794, 482, 502, 504, 473, 0, 0,
	0, 0, 0, 478, -2, 83, 84, 0, 0, 90,
	794, 0, 0, 0, 792, 793, 26, 27, 0, 623,
	0, 0, 0, 382, 227, 451, 0, 794, 720, 0,
	39, 0, 750, 740, 752, 754, 794, 35, 0, 746,
	0, 733, 45, 733, 759, 760, 484, 0, 489, 0,
	0, 0, 0, 492, 0, 87, 88, 89, 766, 79,
	0, 0, 0, 647, 0, 650, 453, 723, 34, 794,
	794, 0, 40, 0, 755, -2, 0, 0, 0, 52,
	44, 43, 0, 0, 465, 467, 468, 469, 470, 471,
	472, 0, 0, 0, 511, 479, 0, 20, 381, 648,
	721, 719, 0, 753, 0, -2, 0, 748, 747, 485,
	464, 0, 512, 513, 514, 463, 81, 0, 0, 743,
	35, 0, 466, 474, 0, 751, -2, 749, 649,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:643
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:708
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:726
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:744
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:753
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:768
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:776
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 34:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:783
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:789
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:793
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:799
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:810
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:822
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.str = InsertStr
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:838
		{
			yyVAL.str = ReplaceStr
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:850
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:854
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:863
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:864
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:877
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:881
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:905
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:932
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:947
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:976
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:986
		{
			yyVAL.str = ""
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:990
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1008
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1015
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1029
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1033
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1057
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1068
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1120
		{
			yyVAL.str = SessionStr
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = GlobalStr
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1129
		{
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1130
		{
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1134
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1135
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1136
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1137
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1138
		{
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1139
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1140
		{
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1152
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1156
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1191
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1213
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.empty = struct{}{}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.empty = struct{}{}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1245
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1262
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1266
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.bytes = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1306
		{
			yyVAL.bytes = nil
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1325
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1342
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1350
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1354
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1370
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1387
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1393
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1406
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1411
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1416
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1427
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1432
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1437
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1442
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1447
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1452
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1457
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1462
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1467
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1476
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1486
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1491
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1496
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1503
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1510
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1518
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1523
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1528
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1533
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1539
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1545
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1551
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1557
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1563
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1573
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1577
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1581
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1585
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1595
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1599
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1603
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1607
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1611
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1615
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1619
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1623
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1629
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1635
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1647
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1651
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1656
		{
			yyVAL.sequence = &Sequence{}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1660
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1665
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1670
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1675
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1680
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1685
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1690
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1695
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1700
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1705
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1710
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1715
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1720
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1731
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1752
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1756
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1761
		{
			yyVAL.bytes = nil
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1770
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1866
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2006
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2010
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2050
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.optVal = nil
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2069
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2073
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2081
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2085
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2099
		{
			yyVAL.optVal = nil
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2103
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2107
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2116
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2120
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2129
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2133
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2138
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2155
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2164
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2168
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2173
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2181
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2187
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2192
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2196
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2216
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2220
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2226
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2230
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2235
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2239
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2255
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2259
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2263
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2267
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2283
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.indexPartition = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2297
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2301
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2307
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2349
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2360
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2370
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2376
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2381
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2395
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2400
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2407
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2414
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2421
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2430
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 382:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2441
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2452
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2456
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2460
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 387:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 388:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 389:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2491
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
			}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2501
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2512
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2548
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2552
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2556
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2570
		{
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2571
		{
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2575
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2579
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2602
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2612
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2616
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2621
		{
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2622
		{
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2640
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2644
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2653
		{
			setAllowComments(yylex, true)
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2657
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.bytes2 = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2673
		{
			yyVAL.str = UnionStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2677
		{
			yyVAL.str = UnionAllStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.str = UnionDistinctStr
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2686
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2694
		{
			yyVAL.str = SQLCacheStr
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2703
		{
			yyVAL.str = DistinctStr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2708
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2712
		{
			yyVAL.str = StraightJoinHint
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.selectExprs = nil
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2727
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2731
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.overExpr = nil
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2778
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2782
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2786
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2827
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.strs = []string{}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2860
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2864
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2868
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2888
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2903
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2928
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2932
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2946
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2950
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2955
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2960
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.str = JoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.str = JoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.str = JoinStr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.str = StraightJoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.str = LeftJoinStr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.str = LeftJoinStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.str = RightJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.str = RightJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.str = NaturalJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3023
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3037
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.indexHints = nil
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.expr = nil
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3078
		{
			yyVAL.columns = nil
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3100
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3104
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3112
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.str = ""
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3138
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3142
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3146
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3170
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3174
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.str = IsNullStr
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3184
		{
			yyVAL.str = IsNotNullStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3188
		{
			yyVAL.str = IsTrueStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.str = IsNotTrueStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.str = IsFalseStr
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.str = IsNotFalseStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3206
		{
			yyVAL.str = EqualStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3210
		{
			yyVAL.str = LessThanStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3214
		{
			yyVAL.str = GreaterThanStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3218
		{
			yyVAL.str = LessEqualStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3222
		{
			yyVAL.str = GreaterEqualStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3226
		{
			yyVAL.str = NotEqualStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3230
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3234
		{
			yyVAL.str = PosixRegexStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3238
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3242
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3246
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3291
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3303
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3307
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3311
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3315
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3323
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3327
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3331
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3343
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3371
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3375
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3379
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3387
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3395
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3417
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3425
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3505
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3509
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3513
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 616:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 618:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 620:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 622:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 623:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 624:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3549
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.str = ""
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.str = BooleanModeStr
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.str = QueryExpansionStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3678
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3734
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3849
		{
			yyVAL.expr = nil
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3858
		{
			yyVAL.str = string("")
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.expr = nil
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3912
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3927
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3952
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3956
		{
			yyVAL.expr = &NullVal{}
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.exprs = nil
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3965
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.expr = nil
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3984
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.orderBy = nil
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4020
		{
			yyVAL.str = AscScr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4024
		{
			yyVAL.str = AscScr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.str = DescScr
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.limit = nil
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.str = ""
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4054
		{
			yyVAL.str = ForUpdateStr
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.str = ShareModeStr
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4075
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4079
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 745:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4092
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4116
		{
			yyVAL.updateExprs = nil
		}
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4136
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4140
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4152
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4166
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4178
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4182
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4196
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 766:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.bytes = []byte("charset")
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4239
		{
			yyVAL.expr = &Default{}
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.empty = struct{}{}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4246
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4249
		{
			yyVAL.str = ""
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.str = IgnoreStr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4262
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4272
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4284
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4290
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4298
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4322
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4336
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4347
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4523
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4532
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
