// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const POSIX_REGEX = 57435
const POSIX_REGEX_CI = 57436
const POSIX_NOT_REGEX = 57437
const POSIX_NOT_REGEX_CI = 57438
const SHIFT_LEFT = 57439
const SHIFT_RIGHT = 57440
const DIV = 57441
const MOD = 57442
const UNARY = 57443
const COLLATE = 57444
const BINARY = 57445
const UNDERSCORE_BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const MATERIALIZED = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const PRIMARY = 57464
const COLUMN = 57465
const CONSTRAINT = 57466
const REFERENCES = 57467
const SPATIAL = 57468
const FULLTEXT = 57469
const FOREIGN = 57470
const KEY_BLOCK_SIZE = 57471
const POLICY = 57472
const WHILE = 57473
const UNIQUE = 57474
const KEY = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const TYPE = 57491
const STATUS = 57492
const VARIABLES = 57493
const RESTRICT = 57494
const CASCADE = 57495
const NO = 57496
const ACTION = 57497
const PERMISSIVE = 57498
const RESTRICTIVE = 57499
const PUBLIC = 57500
const CURRENT_USER = 57501
const SESSION_USER = 57502
const PAD_INDEX = 57503
const FILLFACTOR = 57504
const IGNORE_DUP_KEY = 57505
const STATISTICS_NORECOMPUTE = 57506
const STATISTICS_INCREMENTAL = 57507
const ALLOW_ROW_LOCKS = 57508
const ALLOW_PAGE_LOCKS = 57509
const BEFORE = 57510
const AFTER = 57511
const EACH = 57512
const ROW = 57513
const SCROLL = 57514
const CURSOR = 57515
const OPEN = 57516
const CLOSE = 57517
const FETCH = 57518
const PRIOR = 57519
const FIRST = 57520
const LAST = 57521
const DEALLOCATE = 57522
const INSTEAD = 57523
const OF = 57524
const DEFERRABLE = 57525
const INITIALLY = 57526
const IMMEDIATE = 57527
const DEFERRED = 57528
const CONCURRENTLY = 57529
const SQL = 57530
const SECURITY = 57531
const BEGIN = 57532
const START = 57533
const TRANSACTION = 57534
const COMMIT = 57535
const ROLLBACK = 57536
const BIT = 57537
const TINYINT = 57538
const SMALLINT = 57539
const SMALLSERIAL = 57540
const MEDIUMINT = 57541
const INT = 57542
const INTEGER = 57543
const SERIAL = 57544
const BIGINT = 57545
const BIGSERIAL = 57546
const INTNUM = 57547
const REAL = 57548
const DOUBLE = 57549
const PRECISION = 57550
const FLOAT_TYPE = 57551
const DECIMAL = 57552
const NUMERIC = 57553
const SMALLMONEY = 57554
const MONEY = 57555
const TIME = 57556
const TIMESTAMP = 57557
const DATETIME = 57558
const YEAR = 57559
const DATETIMEOFFSET = 57560
const DATETIME2 = 57561
const SMALLDATETIME = 57562
const CHAR = 57563
const VARCHAR = 57564
const VARYING = 57565
const BOOL = 57566
const CHARACTER = 57567
const VARBINARY = 57568
const NCHAR = 57569
const NVARCHAR = 57570
const NTEXT = 57571
const UUID = 57572
const TEXT = 57573
const TINYTEXT = 57574
const MEDIUMTEXT = 57575
const LONGTEXT = 57576
const CITEXT = 57577
const BLOB = 57578
const TINYBLOB = 57579
const MEDIUMBLOB = 57580
const LONGBLOB = 57581
const JSON = 57582
const JSONB = 57583
const ENUM = 57584
const GEOMETRY = 57585
const POINT = 57586
const LINESTRING = 57587
const POLYGON = 57588
const GEOMETRYCOLLECTION = 57589
const MULTIPOINT = 57590
const MULTILINESTRING = 57591
const MULTIPOLYGON = 57592
const VARIADIC = 57593
const ARRAY = 57594
const NOW = 57595
const GETDATE = 57596
const BPCHAR = 57597
const TEXT_PATTERN_OPS = 57598
const NULLX = 57599
const AUTO_INCREMENT = 57600
const APPROXNUM = 57601
const SIGNED = 57602
const UNSIGNED = 57603
const ZEROFILL = 57604
const ZONE = 57605
const AUTOINCREMENT = 57606
const DATABASES = 57607
const TABLES = 57608
const VSCHEMA_TABLES = 57609
const EXTENDED = 57610
const FULL = 57611
const PROCESSLIST = 57612
const NAMES = 57613
const CHARSET = 57614
const GLOBAL = 57615
const SESSION = 57616
const ISOLATION = 57617
const LEVEL = 57618
const READ = 57619
const WRITE = 57620
const ONLY = 57621
const REPEATABLE = 57622
const COMMITTED = 57623
const UNCOMMITTED = 57624
const SERIALIZABLE = 57625
const NEW = 57626
const CONCAT_NULL_YIELDS_NULL = 57627
const CURSOR_CLOSE_ON_COMMIT = 57628
const QUOTED_IDENTIFIER = 57629
const ARITHABORT = 57630
const FMTONLY = 57631
const NOCOUNT = 57632
const NOEXEC = 57633
const NUMERIC_ROUNDABORT = 57634
const ANSI_DEFAULTS = 57635
const ANSI_NULL_DFLT_OFF = 57636
const ANSI_NULL_DFLT_ON = 57637
const ANSI_NULLS = 57638
const ANSI_PADDING = 57639
const ANSI_WARNINGS = 57640
const FORCEPLAN = 57641
const SHOWPLAN_ALL = 57642
const SHOWPLAN_TEXT = 57643
const SHOWPLAN_XML = 57644
const IMPLICIT_TRANSACTIONS = 57645
const REMOTE_PROC_TRANSACTIONS = 57646
const XACT_ABORT = 57647
const CURRENT_TIMESTAMP = 57648
const DATABASE = 57649
const CURRENT_DATE = 57650
const CURRENT_TIME = 57651
const LOCALTIME = 57652
const LOCALTIMESTAMP = 57653
const UTC_DATE = 57654
const UTC_TIME = 57655
const UTC_TIMESTAMP = 57656
const REPLACE = 57657
const CONVERT = 57658
const CAST = 57659
const SUBSTR = 57660
const SUBSTRING = 57661
const GROUP_CONCAT = 57662
const SEPARATOR = 57663
const INHERIT = 57664
const LEAD = 57665
const LAG = 57666
const MATCH = 57667
const AGAINST = 57668
const BOOLEAN = 57669
const LANGUAGE = 57670
const WITH = 57671
const WITHOUT = 57672
const PARSER = 57673
const QUERY = 57674
const EXPANSION = 57675
const UNUSED = 57676
const VIRTUAL = 57677
const STORED = 57678
const GENERATED = 57679
const ALWAYS = 57680
const IDENTITY = 57681
const SEQUENCE = 57682
const INCREMENT = 57683
const MINVALUE = 57684
const CACHE = 57685
const CYCLE = 57686
const OWNED = 57687
const NONE = 57688
const CLUSTERED = 57689
const NONCLUSTERED = 57690
const REPLICATION = 57691
const COLUMNSTORE = 57692
const INCLUDE = 57693
const HOLDLOCK = 57694
const NOLOCK = 57695
const NOWAIT = 57696
const PAGLOCK = 57697
const ROWLOCK = 57698
const TABLELOCK = 57699
const DEFINER = 57700
const INVOKER = 57701
const TYPECAST = 57702
const CHECK = 57703
const OVER = 57704

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	133, 400,
	-2, 149,
	-1, 399,
	61, 370,
	-2, 367,
	-1, 427,
	122, 796,
	-2, 240,
	-1, 447,
	122, 795,
	-2, 790,
	-1, 544,
	122, 796,
	-2, 240,
	-1, 566,
	269, 805,
	-2, 703,
	-1, 614,
	269, 805,
	-2, 440,
	-1, 646,
	5, 35,
	-2, 13,
	-1, 652,
	5, 35,
	-2, 15,
	-1, 790,
	269, 805,
	-2, 440,
	-1, 950,
	122, 798,
	-2, 794,
	-1, 960,
	269, 805,
	-2, 309,
	-1, 1035,
	269, 805,
	-2, 440,
	-1, 1095,
	60, 98,
	-2, 198,
	-1, 1098,
	60, 98,
	-2, 198,
	-1, 1154,
	5, 36,
	-2, 571,
	-1, 1229,
	5, 35,
	-2, 14,
	-1, 1244,
	190, 62,
	-2, 494,
	-1, 1285,
	60, 98,
	-2, 169,
	-1, 1419,
	89, 792,
	-2, 780,
	-1, 1509,
	57, 49,
	59, 49,
	-2, 51,
	-1, 1675,
	5, 35,
	-2, 751,
	-1, 1700,
	5, 35,
	-2, 58,
	-1, 1773,
	5, 36,
	-2, 752,
	-1, 1804,
	5, 35,
	-2, 754,
	-1, 1828,
	5, 36,
	-2, 755,
}

const yyPrivate = 57344

const yyLast = 9090

var yyAct = [...]int16{
	546, 527, 1604, 1782, 752, 1730, 1067, 1622, 1693, 1731,
	556, 753, 30, 1078, 1727, 1047, 1531, 39, 40, 1010,
	554, 1666, 1213, 1545, 1387, 1685, 1591, 1698, 1605, 1413,
	1544, 63, 63, 63, 1533, 125, 128, 1597, 1063, 43,
	1519, 1398, 659, 867, 840, 57, 1066, 1416, 1410, 1248,
	1245, 1218, 461, 1395, 1223, 1407, 30, 1399, 1150, 26,
	855, 1529, 391, 894, 879, 1043, 56, 934, 43, 959,
	518, 388, 1142, 681, 43, 640, 993, 949, 525, 1106,
	1284, 1028, 1404, 1301, 605, 813, 641, 188, 538, 222,
	844, 817, 153, 504, 236, 996, 58, 204, 123, 124,
	526, 42, 1202, 907, 424, 64, 59, 780, 133, 237,
	426, 400, 171, 394, 432, 1325, 148, 450, 190, 47,
	771, 711, 712, 713, 714, 715, 708, 947, 228, 719,
	143, 9, 694, 1203, 708, 1500, 145, 719, 186, 719,
	33, 63, 606, 232, 233, 1044, 49, 43, 385, 687,
	43, 589, 43, 43, 1102, 43, 129, 592, 131, 398,
	395, 511, 246, 43, 401, 402, 142, 43, 799, 32,
	1830, 512, 1763, 412, 1826, 206, 207, 208, 209, 1783,
	1784, 1785, 1786, 1787, 1788, 1480, 244, 443, 50, 51,
	422, 44, 1719, 45, 33, 383, 31, 1349, 1350, 1015,
	1016, 1111, 1473, 43, 1110, 150, 1694, 446, 1818, 227,
	224, 1382, 230, 247, 234, 235, 1145, 241, 1762, 245,
	649, 1339, 1091, 1081, 1080, 377, 1131, 480, 1718, 380,
	189, 399, 473, 474, 1082, 709, 710, 711, 712, 713,
	714, 715, 708, 416, 493, 719, 43, 1083, 168, 1466,
	43, 52, 440, 1753, 1754, 44, 1546, 45, 1547, 465,
	466, 467, 468, 1633, 1634, 418, 167, 649, 1752, 1091,
	1081, 1080, 160, 1632, 159, 436, 163, 164, 166, 1450,
	830, 1082, 161, 168, 829, 1704, 452, 434, 1703, 747,
	192, 1705, 1333, 454, 1083, 205, 456, 1004, 459, 460,
	197, 1322, 1504, 633, 437, 632, 439, 438, 479, 220,
	1166, 217, 483, 1164, 702, 469, 705, 530, 837, 1758,
	194, 1645, 720, 721, 722, 723, 724, 725, 726, 472,
	703, 704, 701, 727, 728, 729, 730, 707, 706, 716,
	717, 709, 710, 711, 712, 713, 714, 715, 708, 1391,
	492, 719, 1089, 130, 649, 1432, 1091, 1081, 1080, 1233,
	1648, 36, 1088, 1649, 1661, 491, 401, 402, 1082, 707,
	706, 716, 717, 709, 710, 711, 712, 713, 714, 715,
	708, 1083, 385, 719, 242, 1479, 1564, 1481, 718, 1646,
	649, 505, 1091, 1081, 1080, 447, 718, 45, 718, 1089,
	513, 1712, 1711, 126, 1082, 1084, 1085, 1087, 33, 1088,
	591, 1086, 1274, 1539, 1409, 1232, 1561, 1083, 885, 1062,
	895, 1237, 135, 655, 656, 1801, 443, 1598, 557, 501,
	221, 37, 33, 666, 841, 868, 1817, 496, 1324, 1295,
	167, 166, 864, 689, 165, 498, 446, 688, 135, 870,
	667, 415, 1084, 1085, 1087, 33, 718, 168, 1086, 134,
	1103, 1104, 401, 402, 414, 407, 800, 409, 1237, 396,
	862, 669, 497, 205, 1351, 166, 510, 503, 1570, 698,
	1344, 1105, 643, 1472, 506, 594, 1089, 33, 1825, 646,
	146, 652, 660, 1583, 1111, 664, 1088, 668, 647, 502,
	647, 385, 446, 43, 718, 1563, 1756, 619, 514, 621,
	43, 162, 624, 625, 436, 149, 607, 505, 1007, 1717,
	588, 661, 1089, 590, 869, 593, 434, 471, 595, 421,
	602, 477, 1088, 679, 48, 679, 604, 167, 27, 1084,
	1085, 1087, 848, 475, 506, 1086, 1092, 684, 672, 1623,
	1625, 127, 485, 620, 168, 38, 871, 872, 873, 874,
	875, 876, 877, 1697, 41, 644, 1275, 1276, 1277, 1696,
	642, 647, 657, 1355, 1695, 1084, 1085, 1087, 1408, 1484,
	35, 1086, 686, 1534, 34, 1357, 53, 662, 136, 137,
	46, 403, 670, 1092, 1235, 499, 379, 1822, 660, 1776,
	658, 138, 663, 693, 1664, 651, 397, 63, 405, 406,
	718, 1662, 6, 7, 136, 137, 737, 738, 385, 44,
	1549, 1536, 1352, 1361, 690, 1152, 816, 138, 1148, 748,
	1032, 751, 1624, 750, 617, 820, 820, 820, 643, 834,
	797, 1235, 718, 141, 463, 462, 660, 627, 1372, 697,
	880, 881, 808, 914, 1706, 846, 1683, 795, 446, 1341,
	43, 696, 695, 695, 647, 824, 861, 912, 913, 911,
	863, 698, 43, 825, 445, 444, 1548, 505, 697, 697,
	1092, 1122, 1121, 682, 683, 685, 785, 786, 839, 591,
	696, 695, 1120, 505, 773, 774, 775, 776, 777, 778,
	779, 793, 696, 695, 434, 628, 1119, 697, 803, 1118,
	1117, 1116, 908, 833, 696, 695, 1092, 1114, 1532, 697,
	1709, 1431, 835, 997, 866, 1183, 642, 826, 1642, 828,
	1064, 697, 32, 997, 847, 393, 939, 938, 944, 944,
	887, 809, 144, 139, 882, 1302, 946, 884, 647, 886,
	25, 385, 385, 1228, 1579, 1100, 940, 33, 858, 1098,
	955, 883, 1582, 392, 1759, 393, 1303, 939, 998, 647,
	878, 246, 1353, 1354, 1356, 1358, 1359, 820, 820, 892,
	1374, 820, 820, 820, 411, 1097, 393, 940, 393, 696,
	695, 1581, 1029, 458, 1474, 1011, 1343, 457, 948, 951,
	1478, 889, 888, 20, 1096, 15, 697, 1132, 1133, 1134,
	820, 820, 820, 820, 1477, 930, 942, 945, 16, 1030,
	23, 1373, 950, 1030, 933, 786, 932, 1151, 33, 1174,
	1031, 1196, 1158, 1476, 1157, 820, 17, 18, 410, 643,
	733, 696, 695, 1475, 198, 596, 696, 695, 1304, 1011,
	696, 695, 990, 991, 696, 695, 1051, 1065, 697, 446,
	811, 1095, 1300, 697, 608, 453, 453, 697, 1061, 941,
	798, 697, 614, 615, 616, 810, 1006, 1463, 1553, 1036,
	453, 1037, 404, 696, 695, 952, 954, 822, 1019, 696,
	695, 505, 1534, 910, 404, 1302, 1021, 44, 1423, 45,
	697, 1000, 1001, 1002, 749, 1003, 697, 1394, 33, 1108,
	1552, 832, 1115, 650, 1045, 650, 1303, 201, 698, 831,
	203, 601, 908, 899, 901, 902, 649, 642, 44, 1013,
	1536, 900, 33, 547, 943, 545, 549, 550, 551, 552,
	478, 1094, 691, 548, 553, 476, 1022, 449, 1025, 1026,
	732, 734, 735, 736, 1033, 32, 1034, 44, 447, 45,
	45, 827, 707, 706, 716, 717, 709, 710, 711, 712,
	713, 714, 715, 708, 470, 614, 719, 1127, 404, 1059,
	33, 44, 31, 45, 1507, 649, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 44, 766, 45, 768, 769,
	770, 772, 772, 772, 772, 772, 772, 772, 772, 417,
	789, 790, 791, 792, 820, 1138, 44, 404, 45, 909,
	1186, 33, 749, 19, 1128, 44, 1112, 1536, 748, 935,
	1030, 936, 33, 385, 1031, 21, 22, 404, 24, 937,
	33, 626, 643, 505, 587, 820, 856, 698, 841, 1811,
	1810, 856, 1809, 246, 1163, 586, 820, 1226, 1192, 1797,
	1751, 698, 446, 515, 1167, 1229, 647, 1775, 698, 1217,
	1146, 1147, 614, 1236, 647, 1192, 1720, 1194, 408, 650,
	948, 676, 1652, 1244, 698, 1270, 1271, 1272, 1154, 1155,
	1156, 1182, 1724, 698, 1364, 1225, 1285, 1095, 1095, 1285,
	1095, 1095, 505, 505, 950, 1214, 1210, 1601, 1296, 1512,
	1206, 1204, 1299, 1283, 43, 1238, 1201, 1211, 1516, 698,
	1513, 1209, 1515, 1239, 1216, 1179, 1011, 505, 1199, 1212,
	642, 1185, 1227, 815, 821, 823, 1207, 1208, 1187, 1188,
	1198, 1189, 1190, 676, 1566, 1312, 676, 1565, 1516, 385,
	856, 1491, 1516, 385, 1298, 649, 1200, 676, 1446, 1278,
	1281, 1192, 1445, 650, 1040, 123, 1514, 649, 1512, 246,
	1240, 1241, 1242, 1039, 1246, 1592, 1282, 1286, 1287, 1288,
	1289, 1290, 1673, 1038, 755, 1442, 1441, 1674, 1291, 1292,
	676, 1436, 1315, 1345, 868, 1020, 1323, 1310, 1311, 1803,
	1327, 836, 1305, 1306, 1307, 1308, 1309, 404, 870, 1231,
	1317, 1192, 1318, 1313, 676, 1435, 660, 676, 1365, 404,
	950, 676, 1314, 1682, 1012, 1340, 1330, 1328, 812, 909,
	1024, 698, 805, 1363, 802, 718, 1326, 1192, 1191, 1386,
	1388, 1377, 1389, 1728, 1334, 1236, 1682, 385, 676, 1129,
	856, 1046, 841, 1035, 857, 1392, 953, 698, 1368, 1332,
	856, 1014, 43, 43, 676, 893, 676, 675, 636, 635,
	623, 1052, 630, 631, 1424, 956, 957, 630, 629, 55,
	54, 992, 1369, 869, 1390, 1429, 1285, 1592, 490, 1376,
	1178, 517, 1176, 622, 505, 505, 1024, 404, 618, 1682,
	1393, 1461, 698, 1093, 1397, 1771, 490, 598, 1005, 489,
	1008, 1009, 490, 953, 649, 871, 872, 873, 874, 875,
	876, 877, 1516, 1631, 1396, 1541, 1346, 1405, 1375, 1024,
	1159, 1422, 856, 1023, 676, 1024, 1130, 801, 1177, 634,
	1175, 1746, 1362, 1433, 638, 637, 707, 706, 716, 717,
	709, 710, 711, 712, 713, 714, 715, 708, 1744, 1378,
	719, 1715, 385, 1686, 1687, 43, 404, 1580, 194, 520,
	1439, 1294, 1293, 1443, 1444, 1215, 223, 1035, 1126, 1125,
	1437, 1438, 1101, 1042, 1451, 1041, 1018, 1488, 890, 860,
	838, 794, 1492, 692, 1503, 645, 1448, 1236, 613, 612,
	820, 610, 597, 516, 481, 1485, 1538, 699, 63, 1327,
	1469, 218, 385, 423, 43, 43, 419, 647, 390, 1551,
	211, 1470, 1471, 210, 43, 1535, 199, 1468, 11, 1498,
	1497, 494, 1501, 225, 226, 1099, 1728, 1388, 1107, 1388,
	505, 1568, 1689, 1195, 1505, 754, 1490, 29, 1510, 639,
	1493, 482, 229, 1540, 765, 1557, 1537, 1559, 1528, 132,
	1542, 1452, 1380, 1453, 1454, 1692, 1691, 1455, 1456, 1458,
	1460, 1462, 1560, 1555, 1616, 1614, 1508, 1509, 1558, 1617,
	1615, 650, 1613, 1109, 796, 1618, 1569, 1525, 1526, 650,
	1612, 151, 1798, 1483, 1521, 1524, 1525, 1526, 1522, 1761,
	1523, 1527, 818, 1584, 1686, 1687, 1056, 1057, 1236, 1596,
	1590, 1494, 1180, 389, 767, 1219, 939, 1606, 1521, 1524,
	1525, 1526, 1522, 1554, 1523, 1527, 1567, 1572, 43, 1769,
	1220, 464, 43, 43, 600, 955, 940, 43, 43, 43,
	43, 43, 385, 1556, 647, 880, 881, 1600, 378, 1620,
	385, 43, 243, 1409, 1060, 1535, 1053, 1640, 1607, 1054,
	1402, 1610, 599, 488, 1503, 1236, 1503, 1587, 1619, 1627,
	486, 1629, 1316, 1602, 1630, 1608, 1609, 484, 1611, 891,
	140, 1011, 994, 896, 897, 1628, 1434, 999, 854, 654,
	1599, 43, 509, 1048, 1768, 1603, 1585, 1638, 1578, 1482,
	1663, 1389, 1675, 1639, 1049, 850, 841, 851, 852, 853,
	1767, 647, 1214, 43, 1669, 1726, 1428, 1427, 1586, 718,
	849, 1426, 43, 1678, 1425, 1680, 1124, 1699, 238, 239,
	240, 1681, 1360, 1700, 1348, 1347, 1690, 508, 507, 1819,
	1371, 1123, 647, 754, 413, 843, 958, 989, 845, 1596,
	1389, 1655, 1388, 1654, 1670, 1701, 1366, 1511, 665, 859,
	1370, 8, 1621, 1679, 1, 385, 1247, 13, 12, 1668,
	1710, 1403, 1665, 231, 939, 1606, 1729, 1736, 1699, 1149,
	746, 1734, 542, 939, 1606, 1732, 1647, 1017, 1562, 528,
	647, 1781, 1406, 1243, 940, 1384, 1273, 448, 173, 1197,
	420, 1653, 1739, 940, 1740, 1737, 1656, 1657, 1658, 1659,
	1723, 1741, 1721, 14, 1381, 1230, 1011, 1503, 653, 487,
	1297, 1402, 865, 1738, 678, 1440, 157, 147, 671, 381,
	1713, 1714, 28, 10, 1113, 1760, 158, 156, 155, 154,
	152, 451, 191, 196, 1770, 660, 1765, 219, 660, 660,
	660, 62, 1793, 60, 1778, 1757, 61, 1447, 193, 65,
	1411, 1550, 495, 1027, 1236, 1388, 1596, 1792, 1464, 731,
	1702, 1535, 1418, 1735, 1222, 1766, 1806, 1807, 1725, 1804,
	1800, 1802, 1732, 1795, 1181, 1779, 764, 1780, 647, 995,
	1789, 1790, 1791, 1716, 529, 1808, 898, 541, 1722, 540,
	1815, 1389, 1503, 539, 1672, 700, 1487, 1401, 1489, 1820,
	1821, 1506, 1520, 1518, 1732, 1823, 1517, 1688, 1684, 647,
	939, 1606, 1827, 1829, 1824, 1400, 1465, 195, 1660, 1402,
	200, 1750, 1530, 202, 1402, 1402, 1402, 1402, 1402, 1055,
	940, 1153, 1379, 1079, 842, 1058, 5, 1090, 1402, 1077,
	212, 213, 214, 215, 216, 649, 1764, 1091, 1081, 1080,
	4, 3, 1076, 1075, 1074, 1072, 1772, 1773, 1774, 1082,
	1777, 1073, 1070, 1071, 1069, 1050, 648, 1459, 2, 0,
	0, 0, 1083, 0, 0, 1184, 183, 0, 0, 1571,
	0, 0, 186, 187, 0, 0, 0, 0, 1499, 0,
	1193, 739, 740, 741, 742, 743, 744, 745, 0, 0,
	1402, 0, 0, 0, 0, 0, 0, 174, 698, 1402,
	0, 0, 1812, 1813, 1814, 0, 0, 0, 0, 0,
	0, 1588, 181, 0, 169, 1589, 1221, 1224, 0, 0,
	1403, 0, 170, 0, 0, 1403, 1403, 1403, 1403, 1403,
	0, 0, 1234, 0, 1828, 455, 0, 0, 0, 1530,
	0, 1626, 707, 706, 716, 717, 709, 710, 711, 712,
	713, 714, 715, 708, 0, 0, 719, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	177, 0, 172, 182, 0, 0, 0, 0, 1650, 1651,
	179, 178, 0, 1457, 698, 0, 0, 0, 0, 0,
	0, 1403, 0, 0, 0, 0, 1676, 1677, 0, 0,
	1403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1085, 1087, 0, 0, 0, 1086, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 1237, 650, 707, 706,
	716, 717, 709, 710, 711, 712, 713, 714, 715, 708,
	903, 1342, 719, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 716, 717,
	709, 710, 711, 712, 713, 714, 715, 708, 0, 523,
	719, 0, 1367, 1733, 0, 650, 0, 0, 649, 0,
	1091, 1081, 1080, 0, 0, 0, 522, 0, 0, 1383,
	0, 521, 1082, 0, 1747, 1748, 1749, 0, 567, 0,
	568, 0, 0, 0, 0, 1083, 175, 0, 558, 559,
	0, 0, 176, 0, 0, 0, 0, 0, 404, 0,
	0, 447, 547, 544, 545, 549, 550, 551, 552, 0,
	0, 0, 548, 553, 441, 442, 524, 0, 0, 0,
	0, 519, 536, 0, 566, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	1644, 0, 0, 0, 0, 0, 609, 611, 533, 534,
	1733, 0, 0, 1805, 583, 0, 535, 0, 0, 960,
	532, 537, 0, 0, 0, 184, 0, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 1794,
	0, 1467, 1733, 0, 650, 718, 0, 0, 0, 180,
	1089, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	1088, 0, 0, 649, 0, 1091, 1081, 1080, 0, 0,
	0, 1495, 1496, 1224, 677, 680, 543, 1082, 0, 0,
	0, 0, 0, 0, 1135, 1136, 1137, 0, 0, 0,
	1083, 0, 1139, 1140, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 1085, 1087, 0, 0, 0, 1086,
	0, 0, 971, 977, 975, 0, 0, 972, 0, 0,
	970, 0, 0, 979, 0, 0, 978, 964, 974, 976,
	973, 968, 0, 963, 0, 981, 980, 982, 961, 984,
	739, 718, 0, 988, 985, 987, 986, 569, 983, 0,
	0, 0, 649, 0, 1091, 1081, 1080, 965, 966, 0,
	0, 649, 0, 1091, 1081, 1080, 1082, 0, 585, 718,
	570, 571, 0, 0, 0, 1082, 0, 967, 969, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 649,
	0, 1091, 1081, 1080, 0, 1089, 0, 0, 1593, 0,
	0, 555, 0, 1082, 0, 1088, 0, 0, 0, 0,
	0, 0, 677, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 572, 582, 578, 579, 576, 577, 575,
	574, 573, 584, 560, 561, 562, 563, 565, 0, 0,
	445, 444, 564, 1641, 1092, 0, 1637, 0, 1084, 1085,
	1087, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	698, 0, 0, 0, 1237, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 804, 428,
	429, 430, 0, 1667, 1089, 0, 0, 433, 431, 441,
	442, 0, 1642, 1089, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 707, 706, 716, 717, 709, 710,
	711, 712, 713, 714, 715, 708, 0, 0, 719, 0,
	0, 1089, 0, 1320, 1321, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 1084, 1085, 1087,
	0, 0, 0, 1086, 0, 0, 1084, 1085, 1087, 0,
	0, 0, 1086, 1237, 0, 1335, 1336, 1337, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1085, 1087, 0, 0, 0,
	1086, 1742, 1319, 0, 1743, 0, 0, 1745, 0, 1092,
	1237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1755, 0, 707, 706, 716, 717,
	709, 710, 711, 712, 713, 714, 715, 708, 0, 0,
	719, 0, 1667, 0, 0, 0, 0, 0, 0, 0,
	0, 754, 0, 0, 0, 0, 0, 1643, 707, 706,
	716, 717, 709, 710, 711, 712, 713, 714, 715, 708,
	0, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1799, 754, 706, 716, 717,
	709, 710, 711, 712, 713, 714, 715, 708, 1092, 1144,
	719, 0, 0, 0, 0, 435, 440, 1092, 0, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 707, 706, 716, 717, 709, 710, 711,
	712, 713, 714, 715, 708, 1092, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 1594, 0, 0, 1160,
	1161, 0, 1162, 0, 0, 1642, 0, 1165, 437, 0,
	439, 438, 0, 0, 0, 0, 0, 0, 0, 1168,
	1169, 0, 0, 1170, 1171, 0, 1172, 1173, 0, 0,
	0, 0, 0, 1235, 707, 706, 716, 717, 709, 710,
	711, 712, 713, 714, 715, 708, 0, 718, 719, 0,
	0, 0, 363, 352, 0, 311, 365, 281, 299, 373,
	301, 302, 338, 259, 321, 0, 296, 278, 0, 0,
	0, 284, 252, 291, 253, 282, 313, 0, 279, 0,
	354, 324, 0, 0, 0, 371, 0, 329, 0, 0,
	0, 0, 0, 316, 356, 319, 347, 310, 339, 268,
	328, 366, 297, 334, 367, 0, 0, 1573, 33, 1574,
	0, 1575, 0, 1576, 1577, 649, 0, 1091, 1081, 1080,
	333, 361, 293, 265, 376, 0, 337, 251, 331, 1082,
	257, 260, 372, 359, 288, 289, 0, 0, 0, 0,
	0, 0, 1083, 315, 320, 344, 307, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 327, 0, 0, 0, 264, 258, 0, 312, 781,
	0, 0, 267, 0, 286, 345, 0, 248, 350, 357,
	309, 718, 0, 360, 306, 305, 0, 0, 0, 0,
	0, 0, 298, 387, 342, 374, 364, 317, 355, 283,
	292, 0, 290, 0, 783, 0, 326, 340, 0, 718,
	0, 0, 0, 362, 0, 0, 0, 781, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 249, 287, 348, 351, 272, 336, 261,
	294, 343, 295, 318, 277, 0, 718, 1089, 0, 0,
	0, 0, 783, 0, 0, 0, 1412, 1088, 0, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 116, 117, 0, 118, 119, 120, 122,
	121, 0, 931, 784, 0, 0, 0, 0, 0, 1420,
	0, 66, 782, 0, 0, 0, 0, 788, 787, 0,
	1084, 1085, 1087, 0, 0, 0, 1086, 718, 0, 0,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	0, 0, 254, 0, 0, 0, 0, 0, 255, 276,
	358, 784, 0, 0, 0, 1421, 1419, 1415, 1414, 66,
	782, 0, 0, 335, 0, 788, 787, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1160, 0,
	271, 275, 269, 270, 322, 323, 368, 369, 370, 346,
	266, 0, 273, 274, 0, 353, 0, 0, 0, 325,
	0, 0, 0, 375, 67, 0, 0, 0, 0, 0,
	0, 300, 250, 304, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 308, 303, 330, 332, 341,
	349, 0, 280, 314, 363, 352, 0, 311, 365, 281,
	299, 373, 301, 302, 338, 259, 321, 0, 296, 278,
	0, 1092, 67, 284, 252, 291, 253, 282, 313, 0,
	279, 0, 354, 324, 0, 0, 0, 371, 0, 329,
	0, 0, 0, 0, 0, 316, 356, 319, 347, 310,
	339, 268, 328, 366, 297, 334, 367, 0, 0, 0,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 333, 361, 293, 265, 376, 0, 337, 251,
	331, 0, 257, 260, 372, 359, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 315, 320, 344, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 0, 327, 0, 0, 0, 264, 258, 0,
	312, 0, 0, 0, 267, 0, 286, 345, 0, 248,
	350, 357, 309, 0, 0, 360, 306, 305, 1329, 0,
	0, 0, 0, 0, 298, 387, 342, 374, 364, 317,
	355, 283, 292, 0, 290, 0, 0, 0, 326, 340,
	0, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 249, 287, 348, 351, 272,
	336, 261, 294, 343, 295, 318, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1543, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
	0, 971, 977, 975, 0, 0, 972, 0, 0, 970,
	0, 1420, 979, 0, 0, 978, 964, 974, 976, 973,
	968, 0, 963, 0, 981, 980, 982, 961, 984, 0,
	0, 0, 988, 985, 987, 986, 0, 983, 0, 0,
	0, 0, 0, 0, 254, 0, 965, 966, 0, 0,
	255, 276, 358, 0, 0, 0, 0, 1421, 1419, 0,
	0, 0, 0, 0, 0, 335, 967, 969, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 275, 269, 270, 322, 323, 368, 369,
	370, 346, 266, 0, 273, 274, 0, 353, 0, 0,
	0, 325, 0, 0, 0, 375, 0, 0, 0, 0,
	0, 0, 0, 300, 250, 304, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 308, 303, 330,
	332, 341, 349, 0, 280, 314, 363, 352, 0, 311,
	365, 281, 299, 373, 301, 302, 338, 259, 321, 0,
	296, 278, 0, 0, 0, 284, 252, 291, 253, 282,
	313, 0, 279, 0, 354, 324, 0, 0, 0, 371,
	0, 329, 0, 0, 0, 0, 0, 316, 356, 319,
	347, 310, 339, 268, 328, 366, 297, 334, 367, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 0, 649,
	0, 1091, 1081, 1080, 333, 361, 293, 265, 376, 0,
	337, 251, 331, 1082, 257, 260, 372, 359, 288, 289,
	0, 0, 0, 0, 0, 0, 1083, 315, 320, 344,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 327, 0, 0, 0, 264,
	258, 0, 312, 0, 0, 0, 267, 0, 286, 345,
	0, 248, 350, 357, 309, 0, 0, 360, 306, 305,
	0, 0, 0, 0, 0, 0, 298, 387, 342, 374,
	364, 317, 355, 283, 292, 0, 290, 0, 0, 0,
	326, 340, 0, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 287, 348,
	351, 272, 336, 261, 294, 343, 295, 318, 277, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1085, 1087, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 255, 276, 358, 0, 0, 0, 0, 1421,
	1419, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 275, 269, 270, 322, 323,
	368, 369, 370, 346, 266, 0, 273, 274, 0, 353,
	0, 0, 0, 325, 0, 0, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 300, 250, 304, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 0, 0, 308,
	303, 330, 332, 341, 349, 0, 280, 314, 363, 352,
	0, 311, 365, 281, 299, 373, 301, 302, 338, 259,
	321, 0, 296, 278, 0, 1092, 0, 284, 252, 291,
	253, 282, 313, 0, 279, 0, 354, 324, 0, 89,
	0, 371, 32, 329, 0, 0, 0, 0, 0, 316,
	356, 319, 347, 310, 339, 268, 328, 366, 297, 334,
	367, 0, 0, 0, 447, 1100, 45, 33, 0, 1098,
	0, 0, 0, 0, 0, 0, 333, 361, 293, 265,
	376, 0, 337, 251, 331, 0, 257, 260, 372, 359,
	288, 289, 0, 0, 0, 1097, 0, 0, 0, 315,
	320, 344, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1205, 1096, 285, 0, 327, 0, 0,
	0, 264, 258, 0, 312, 74, 0, 0, 267, 0,
	286, 345, 0, 248, 350, 357, 309, 0, 0, 360,
	306, 305, 0, 0, 0, 0, 0, 0, 298, 387,
	342, 374, 364, 317, 355, 283, 292, 0, 290, 0,
	90, 0, 326, 340, 0, 0, 0, 0, 0, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 249,
	287, 348, 351, 272, 336, 261, 294, 343, 295, 318,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 0, 116,
	117, 0, 118, 119, 120, 122, 121, 91, 92, 93,
	97, 95, 94, 96, 68, 70, 0, 66, 69, 75,
	71, 72, 73, 87, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 88, 98, 99, 100, 101,
	102, 103, 104, 105, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 255, 276, 358, 0, 0, 0,
	0, 0, 386, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 275, 269, 270,
	322, 323, 368, 369, 370, 346, 266, 0, 273, 274,
	0, 353, 0, 0, 0, 325, 0, 0, 0, 375,
	67, 0, 0, 0, 0, 0, 0, 300, 250, 304,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 308, 303, 330, 332, 341, 349, 0, 280, 314,
	363, 352, 0, 311, 365, 281, 299, 373, 301, 302,
	338, 259, 321, 0, 296, 278, 0, 0, 0, 284,
	252, 291, 253, 282, 313, 0, 279, 0, 354, 324,
	0, 89, 0, 371, 0, 329, 0, 0, 0, 0,
	0, 316, 356, 319, 347, 310, 339, 268, 328, 366,
	297, 334, 367, 0, 0, 0, 33, 0, 673, 33,
	674, 0, 0, 0, 0, 0, 0, 0, 333, 361,
	293, 265, 376, 0, 337, 251, 331, 0, 257, 260,
	372, 359, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 315, 320, 344, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 327,
	0, 0, 0, 264, 258, 0, 312, 74, 0, 0,
	267, 0, 286, 345, 0, 248, 350, 357, 309, 0,
	0, 360, 306, 305, 0, 0, 0, 0, 0, 0,
	298, 387, 342, 374, 364, 317, 355, 283, 292, 0,
	290, 0, 90, 0, 326, 340, 0, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 249, 287, 348, 351, 272, 336, 261, 294, 343,
	295, 318, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	0, 116, 117, 0, 118, 119, 120, 122, 121, 91,
	92, 93, 97, 95, 94, 96, 68, 70, 0, 66,
	69, 75, 71, 72, 73, 87, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 88, 98, 99,
	100, 101, 102, 103, 104, 105, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 255, 276, 358, 0,
	0, 0, 0, 0, 386, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 275,
	269, 270, 322, 323, 368, 369, 370, 346, 266, 0,
	273, 274, 0, 353, 0, 0, 0, 325, 0, 0,
	0, 375, 67, 0, 0, 0, 0, 0, 0, 300,
	250, 304, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 308, 303, 330, 332, 341, 349, 0,
	280, 314, 363, 352, 0, 311, 365, 281, 299, 373,
	301, 302, 338, 259, 321, 0, 296, 278, 0, 0,
	0, 284, 252, 291, 253, 282, 313, 0, 279, 0,
	354, 324, 0, 0, 0, 371, 0, 329, 0, 0,
	0, 0, 0, 316, 356, 319, 347, 310, 339, 268,
	328, 366, 297, 334, 367, 0, 382, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 384, 0,
	333, 361, 293, 265, 376, 0, 337, 251, 331, 0,
	257, 260, 372, 359, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 315, 320, 344, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 327, 0, 0, 0, 264, 258, 0, 312, 0,
	0, 0, 267, 0, 286, 345, 0, 248, 350, 357,
	309, 0, 0, 360, 306, 305, 0, 0, 0, 0,
	0, 0, 298, 387, 342, 374, 364, 317, 355, 283,
	292, 0, 290, 0, 0, 0, 326, 340, 0, 0,
	0, 0, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 249, 287, 348, 351, 272, 336, 261,
	294, 343, 295, 318, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 255, 276,
	358, 0, 0, 0, 0, 0, 386, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 275, 269, 270, 322, 323, 368, 369, 370, 346,
	266, 0, 273, 274, 0, 353, 0, 0, 0, 325,
	0, 0, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 300, 250, 304, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 308, 303, 330, 332, 341,
	349, 0, 280, 314, 363, 352, 0, 311, 365, 281,
	299, 373, 301, 302, 338, 259, 321, 0, 296, 278,
	0, 0, 0, 284, 252, 291, 253, 282, 313, 0,
	279, 0, 354, 324, 0, 0, 0, 371, 0, 329,
	0, 0, 0, 0, 0, 316, 356, 319, 347, 310,
	339, 268, 328, 366, 297, 334, 367, 0, 0, 0,
	33, 0, 0, 0, 0, 0, 0, 649, 0, 1091,
	1081, 1080, 333, 361, 293, 265, 376, 0, 337, 251,
	331, 1082, 257, 260, 372, 359, 288, 289, 0, 0,
	0, 0, 0, 0, 1083, 315, 320, 344, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 285, 0, 327, 0, 0, 0, 264, 258, 0,
	312, 0, 0, 0, 267, 0, 286, 345, 0, 248,
	350, 357, 309, 0, 0, 360, 306, 305, 0, 0,
	0, 0, 0, 0, 298, 387, 342, 374, 364, 317,
	355, 283, 292, 0, 290, 0, 0, 0, 326, 340,
	0, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 249, 287, 348, 351, 272,
	336, 261, 294, 343, 295, 318, 277, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1084, 1085, 1087, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	255, 276, 358, 0, 0, 0, 0, 0, 386, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 275, 269, 270, 322, 323, 368, 369,
	370, 346, 266, 0, 273, 274, 0, 353, 0, 0,
	0, 325, 0, 0, 0, 375, 0, 0, 0, 0,
	0, 0, 0, 300, 250, 304, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 308, 303, 330,
	332, 341, 349, 0, 280, 314, 363, 352, 0, 311,
	365, 281, 299, 373, 301, 302, 338, 259, 321, 0,
	296, 278, 0, 1092, 0, 284, 252, 291, 253, 282,
	313, 0, 279, 0, 354, 324, 0, 0, 0, 371,
	0, 329, 0, 0, 0, 0, 0, 316, 356, 319,
	347, 310, 339, 268, 328, 366, 297, 334, 367, 0,
	0, 0, 447, 0, 45, 0, 0, 0, 0, 649,
	0, 1091, 1081, 1080, 333, 361, 293, 265, 376, 0,
	337, 251, 331, 1082, 257, 260, 372, 359, 288, 289,
	0, 0, 0, 0, 0, 0, 1083, 315, 320, 344,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 327, 0, 0, 0, 264,
	258, 0, 312, 0, 0, 0, 267, 0, 286, 345,
	0, 248, 350, 357, 309, 0, 0, 360, 306, 305,
	0, 0, 0, 0, 0, 0, 298, 387, 342, 374,
	364, 317, 355, 283, 292, 0, 290, 0, 0, 0,
	326, 340, 0, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 287, 348,
	351, 272, 336, 261, 294, 343, 295, 318, 277, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1085, 1087, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1385, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 255, 276, 358, 0, 0, 0, 0, 0,
	386, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 275, 269, 270, 322, 323,
	368, 369, 370, 346, 266, 0, 273, 274, 0, 353,
	0, 0, 0, 325, 0, 0, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 300, 250, 304, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 0, 0, 308,
	303, 330, 332, 341, 349, 0, 280, 314, 363, 352,
	0, 311, 365, 281, 299, 373, 301, 302, 338, 259,
	321, 0, 296, 278, 0, 1092, 0, 284, 252, 291,
	253, 282, 313, 0, 279, 0, 354, 324, 0, 0,
	0, 371, 0, 329, 0, 0, 0, 0, 0, 316,
	356, 319, 347, 310, 339, 268, 328, 366, 297, 334,
	367, 0, 0, 0, 33, 0, 0, 0, 0, 0,
	0, 649, 0, 1091, 1081, 1080, 333, 361, 293, 265,
	376, 0, 337, 251, 331, 1082, 257, 260, 372, 359,
	288, 289, 500, 0, 0, 0, 0, 0, 1083, 315,
	320, 344, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 0, 327, 0, 0,
	0, 264, 258, 0, 312, 0, 0, 0, 267, 0,
	286, 345, 0, 248, 350, 357, 309, 0, 0, 360,
	306, 305, 0, 0, 0, 0, 0, 0, 298, 387,
	342, 374, 364, 317, 355, 283, 292, 0, 290, 0,
	0, 0, 326, 340, 0, 0, 0, 0, 0, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 249,
	287, 348, 351, 272, 336, 261, 294, 343, 295, 318,
	277, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 1085, 1087, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 255, 276, 358, 0, 0, 0,
	0, 0, 386, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 275, 269, 270,
	322, 323, 368, 369, 370, 346, 266, 0, 273, 274,
	0, 353, 0, 0, 0, 325, 0, 0, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 300, 250, 304,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 308, 303, 330, 332, 341, 349, 0, 280, 314,
	363, 352, 0, 311, 365, 281, 299, 373, 301, 302,
	338, 259, 321, 0, 296, 278, 0, 1092, 0, 284,
	252, 291, 253, 282, 313, 0, 279, 0, 354, 324,
	0, 0, 0, 371, 0, 329, 0, 0, 0, 0,
	0, 316, 356, 319, 347, 310, 339, 268, 328, 366,
	297, 334, 367, 0, 0, 0, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 361,
	293, 265, 376, 0, 337, 251, 331, 0, 257, 260,
	372, 359, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 315, 320, 344, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 327,
	0, 0, 0, 264, 258, 0, 312, 0, 0, 0,
	267, 0, 286, 345, 0, 248, 350, 357, 309, 0,
	0, 360, 306, 305, 0, 0, 0, 0, 0, 0,
	298, 387, 342, 374, 364, 317, 355, 283, 292, 0,
	290, 0, 0, 0, 326, 340, 0, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 249, 287, 348, 351, 272, 336, 261, 294, 343,
	295, 318, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 255, 276, 358, 0,
	0, 0, 0, 0, 386, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 275,
	269, 270, 322, 323, 368, 369, 370, 346, 266, 0,
	273, 274, 0, 353, 0, 0, 0, 325, 0, 0,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 300,
	250, 304, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 308, 303, 330, 332, 341, 349, 0,
	280, 314, 363, 352, 0, 311, 365, 281, 299, 373,
	301, 302, 338, 259, 321, 0, 296, 278, 0, 0,
	0, 284, 252, 291, 253, 282, 313, 0, 279, 0,
	354, 324, 0, 0, 0, 371, 0, 329, 0, 0,
	0, 0, 0, 316, 356, 319, 347, 310, 339, 268,
	328, 366, 297, 334, 367, 0, 0, 0, 44, 0,
	45, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 361, 293, 265, 376, 0, 337, 251, 331, 0,
	257, 260, 372, 359, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 315, 320, 344, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 327, 0, 0, 0, 264, 258, 0, 312, 0,
	0, 0, 267, 0, 286, 345, 0, 248, 350, 357,
	309, 0, 0, 360, 306, 305, 0, 0, 0, 0,
	0, 0, 298, 0, 342, 374, 364, 317, 355, 283,
	292, 0, 290, 0, 0, 0, 326, 340, 0, 0,
	0, 0, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 249, 287, 348, 351, 272, 336, 261,
	294, 343, 295, 318, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 649, 0, 1091, 1081, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 603, 0, 0, 447, 0, 427, 428,
	429, 430, 1083, 0, 0, 0, 0, 433, 431, 441,
	442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 425,
	0, 0, 447, 0, 427, 428, 429, 430, 0, 0,
	0, 0, 254, 433, 431, 441, 442, 0, 255, 276,
	358, 0, 0, 0, 0, 0, 1708, 1707, 0, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 275, 269, 270, 322, 323, 368, 369, 370, 346,
	266, 0, 273, 274, 0, 353, 0, 1089, 0, 325,
	0, 0, 0, 375, 0, 0, 0, 1088, 0, 0,
	0, 300, 250, 304, 523, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 308, 303, 330, 332, 341,
	349, 522, 280, 314, 0, 0, 521, 0, 0, 0,
	0, 0, 0, 567, 0, 568, 0, 0, 0, 0,
	1084, 1085, 1087, 558, 559, 0, 1086, 0, 0, 0,
	0, 1635, 0, 404, 0, 0, 447, 547, 544, 545,
	549, 550, 551, 552, 0, 0, 0, 548, 553, 441,
	442, 524, 1636, 0, 0, 0, 519, 536, 0, 566,
	0, 0, 0, 0, 0, 435, 440, 0, 0, 0,
	0, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 533, 534, 0, 0, 0, 0, 583,
	814, 535, 522, 0, 531, 532, 537, 521, 0, 0,
	0, 435, 440, 0, 567, 0, 568, 0, 0, 0,
	0, 0, 0, 581, 558, 559, 0, 0, 437, 0,
	439, 438, 0, 0, 404, 0, 0, 447, 547, 544,
	545, 549, 550, 551, 552, 445, 444, 0, 548, 553,
	441, 442, 524, 0, 0, 0, 0, 519, 536, 0,
	566, 543, 0, 0, 437, 0, 439, 438, 0, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 445, 444, 0, 533, 534, 819, 0, 0, 0,
	583, 0, 535, 0, 0, 531, 532, 537, 649, 0,
	1091, 1081, 1080, 0, 0, 0, 649, 0, 1091, 1081,
	1080, 0, 1082, 0, 581, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 569, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 585, 0, 570, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1816, 0, 0, 0, 0, 0, 555, 0, 1796, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 582,
	578, 579, 576, 577, 575, 574, 573, 584, 560, 561,
	562, 563, 565, 569, 0, 445, 444, 564, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	1088, 0, 0, 0, 585, 0, 570, 571, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 0, 0,
	0, 0, 0, 1084, 1085, 1087, 0, 0, 0, 1086,
	0, 1084, 1085, 1087, 0, 0, 0, 1086, 0, 572,
	582, 578, 579, 576, 577, 575, 574, 573, 584, 560,
	561, 562, 563, 565, 0, 523, 445, 444, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 0, 0, 0, 0, 521, 0, 0,
	0, 0, 0, 0, 567, 0, 568, 0, 0, 0,
	0, 0, 0, 580, 558, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 698, 447, 547, 544,
	545, 549, 550, 551, 552, 0, 0, 0, 548, 553,
	441, 442, 524, 0, 0, 0, 0, 519, 536, 0,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 523, 0, 0, 0,
	0, 0, 0, 0, 533, 534, 0, 0, 0, 0,
	583, 0, 535, 522, 1092, 531, 532, 537, 521, 0,
	0, 0, 1092, 0, 0, 567, 0, 568, 0, 0,
	0, 0, 0, 0, 581, 558, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 0, 0, 447, 547,
	544, 545, 549, 550, 551, 552, 0, 0, 0, 548,
	553, 441, 442, 524, 0, 0, 0, 0, 519, 536,
	0, 566, 543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 534, 819, 0, 0,
	0, 583, 0, 535, 0, 0, 531, 532, 537, 649,
	0, 1091, 1081, 1080, 0, 0, 0, 649, 0, 1091,
	1081, 1080, 0, 1082, 0, 581, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 569, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 585, 0, 570, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1671, 0, 0, 0, 0, 0, 555, 0, 1595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	582, 578, 579, 576, 577, 575, 574, 573, 584, 560,
	561, 562, 563, 565, 569, 0, 445, 444, 564, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 1088, 0, 0, 0, 585, 0, 570, 571, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 0,
	0, 0, 0, 0, 1084, 1085, 1087, 0, 0, 0,
	1086, 0, 1084, 1085, 1087, 0, 0, 0, 1086, 0,
	572, 582, 578, 579, 576, 577, 575, 574, 573, 584,
	560, 561, 562, 563, 565, 0, 0, 445, 444, 564,
	0, 649, 0, 0, 523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 0, 0, 0, 0, 521, 0, 0, 0,
	0, 0, 0, 567, 580, 568, 0, 0, 0, 0,
	0, 0, 0, 558, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 0, 0, 447, 547, 544, 545,
	549, 550, 551, 552, 0, 0, 0, 548, 553, 441,
	442, 524, 0, 0, 0, 0, 519, 536, 0, 566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 533, 534, 1092, 0, 0, 0, 583,
	0, 535, 522, 1092, 531, 532, 537, 521, 0, 0,
	0, 0, 0, 0, 567, 0, 568, 0, 0, 0,
	0, 0, 0, 581, 558, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 447, 547, 544,
	545, 549, 550, 551, 552, 0, 0, 0, 548, 553,
	441, 442, 524, 0, 0, 0, 0, 519, 536, 0,
	566, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 534, 0, 0, 0, 0,
	583, 0, 535, 0, 0, 531, 532, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 585, 0, 570, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 582,
	578, 579, 576, 577, 575, 574, 573, 584, 560, 561,
	562, 563, 565, 569, 0, 445, 444, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 570, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	582, 578, 579, 576, 577, 575, 574, 573, 584, 560,
	561, 562, 563, 565, 0, 523, 445, 444, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 567, 0, 568, 0, 0, 0,
	0, 0, 0, 580, 558, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 447, 547, 544,
	545, 549, 550, 551, 552, 0, 0, 0, 548, 553,
	441, 442, 524, 0, 0, 0, 0, 0, 536, 0,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 534, 0, 0, 0, 0,
	583, 0, 535, 0, 0, 531, 532, 537, 0, 0,
	0, 0, 904, 905, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 567,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 558,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 404,
	0, 0, 447, 547, 544, 545, 549, 550, 551, 552,
	0, 0, 543, 548, 553, 441, 442, 0, 0, 0,
	0, 0, 0, 536, 0, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	534, 0, 0, 0, 0, 583, 0, 535, 0, 0,
	531, 532, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 570, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	582, 578, 579, 576, 577, 575, 574, 573, 584, 560,
	561, 562, 563, 565, 0, 0, 445, 444, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 570, 571, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 582, 578, 579, 576, 577,
	575, 574, 573, 584, 560, 561, 562, 563, 565, 0,
	0, 445, 444, 564, 0, 567, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 558, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 0, 0, 447, 547,
	544, 545, 549, 550, 551, 552, 0, 0, 580, 548,
	553, 441, 442, 0, 0, 0, 0, 0, 0, 536,
	0, 566, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 534, 0, 0, 0,
	0, 583, 0, 535, 0, 0, 531, 532, 537, 0,
	0, 0, 0, 0, 0, 0, 567, 0, 568, 0,
	0, 0, 0, 0, 0, 581, 558, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 447,
	547, 544, 545, 549, 550, 551, 552, 0, 0, 0,
	548, 553, 441, 442, 0, 0, 0, 0, 0, 0,
	536, 0, 566, 543, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 534, 0, 0,
	0, 0, 583, 0, 535, 0, 0, 531, 532, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 543, 585, 0, 570, 571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	572, 582, 578, 579, 576, 577, 575, 574, 573, 584,
	560, 561, 562, 563, 565, 569, 0, 445, 444, 564,
	0, 0, 0, 0, 74, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 0, 570, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 572, 582, 578, 579, 576, 577, 575, 574, 573,
	584, 560, 561, 562, 563, 565, 0, 0, 445, 444,
	564, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 0, 116, 117,
	0, 118, 119, 120, 122, 121, 91, 92, 93, 97,
	95, 94, 96, 68, 70, 580, 66, 69, 75, 71,
	72, 73, 87, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 88, 98, 99, 100, 101, 102,
	103, 104, 105, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
}

var yyPact = [...]int16{
	487, -1000, -249, -1000, -1000, 1370, 671, 401, -1000, -1000,
	-1000, 919, 451, 447, 226, 420, 960, 426, 934, 458,
	396, -1000, -221, -176, -1000, -81, 454, -1000, 1220, -1000,
	4258, 4258, 4258, -1000, 347, 960, 396, 147, 396, 1403,
	403, 662, 1555, 521, -1000, -1000, 396, 934, 661, -1000,
	-1000, -1000, -1000, 194, 168, 133, 1861, -151, 12, -1000,
	-1000, -1000, -1000, -1000, 1310, -1000, -1000, -1000, 1310, 60,
	1368, 1310, 1368, -1000, 1310, 1368, 53, 53, 53, 53,
	53, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1365, 1362,
	-1000, 1310, 1310, 1310, 1310, 1310, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1353, 84, 1353, 1318,
	1318, -1000, -1000, 1861, 1861, 1377, 934, 960, 1396, 934,
	-232, 934, 934, 1620, 934, -1000, -1000, -1000, 185, 1526,
	4258, 6487, 934, -1000, 1522, 466, 934, 4627, -1000, 1477,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1360, 707, 960,
	319, 98, 1239, 307, 404, 1017, 317, -1000, -1000, -1000,
	765, -1000, 960, -1000, 1635, -1000, -1000, 314, -1000, 301,
	654, 946, 934, 1358, 174, 1355, 6691, 882, -1000, -265,
	-1000, 7, -1000, -1000, 801, 53, 1310, -1000, 53, 732,
	53, 53, -1000, -1000, 526, 1498, 526, 526, 526, 526,
	911, 911, -114, -114, -1000, -1000, -1000, -1000, 880, 1353,
	-1000, -1000, -1000, 875, -1000, 934, 960, 1346, 1395, 934,
	1552, 417, -1000, -1000, 1545, 1538, 1253, -1000, -1000, 166,
	-1000, 429, -1000, 960, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1374, -1000, 296,
	465, 5743, 168, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	394, -1000, 1628, 1573, 331, 22, -200, 1002, -1000, -1000,
	1345, -1000, -1000, 7776, -1000, 994, 983, -1000, 2, 960,
	-1000, -209, 107, -19, -1000, -1000, 1239, -1000, 1344, 7776,
	1537, -1000, 1503, 856, -1000, 6655, -1000, -235, -1000, -1000,
	-1000, -235, -1000, -1000, -1000, 1239, -1000, 1343, 1341, -1000,
	1340, -1000, -1000, 1239, 1239, 1239, 512, -1000, -1000, -1000,
	-1000, -1000, -1000, 1238, 526, 53, 526, 1233, 1210, 526,
	526, -1000, -1000, 980, 586, -1000, -1000, -1000, -1000, 1218,
	-1000, 1213, -1000, 74, 72, -1000, 1280, -1000, 1209, 1287,
	1393, 334, 934, 1337, 1308, 396, 1308, 1570, 250, 934,
	1620, 371, 1620, 429, 960, 300, 960, -1000, -1000, 330,
	4255, -1000, -1000, 1207, -1000, 262, 1310, 514, 514, -217,
	297, 293, -200, 1239, 1335, -1000, 394, 611, -1000, 7776,
	233, 1239, 1239, 1239, 1239, -1000, -1000, 493, -1000, -1000,
	-1000, 8517, 8517, 8517, 8517, 8517, 8517, 8517, -1000, -1000,
	-1000, -1000, 20, -1000, -235, -1000, 959, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 511, 509, -1000, 7685, 1239, 1239,
	1239, 1239, 1239, 1239, 1239, 1239, 7776, 1239, 1473, 1239,
	1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
	2818, 1239, 1239, 1239, 1239, -1000, -1000, -1000, -1000, -200,
	1333, -1000, -1000, -1000, 654, -1000, 7776, 371, 810, 110,
	-1000, 1278, 1174, 2405, 1172, -1000, 8745, -1000, 1024, -1000,
	815, -1000, 800, 1168, 6926, 7347, 7347, 6115, -1000, -1000,
	526, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 53,
	898, 53, 4, 0, 854, -1000, 846, 334, 960, 934,
	1141, 1275, -1000, 260, 1332, 371, -1000, 1591, 1640, -1000,
	1308, 934, -1000, 406, 1599, -1000, -1000, 1569, -1000, 1273,
	-1000, -1000, 1229, 1620, 1331, 960, -1000, -1000, 321, 960,
	-1000, -1000, -1000, -1000, -1000, 378, 394, 1518, -1000, -1000,
	-1000, 705, -1000, -1000, 674, 246, 684, -1000, 960, -200,
	1330, 7776, 394, 1205, 249, 7776, 7776, 850, -1000, 553,
	8211, 824, 570, 8517, 8517, 8517, 8517, 8517, 8517, 8517,
	8517, 8517, 8517, 8517, 8517, 8517, 8517, 8517, 2770, 968,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 978, -1000, 1308, 897, 1024, 871, 871, 21,
	21, 21, 21, 21, 21, 79, -1000, -254, -1000, -1000,
	5371, 6115, 1024, 1197, 582, 7685, 7347, 7347, 2090, 7776,
	7347, 7347, 7347, 1558, 648, 582, 897, 1568, 1024, 1024,
	1024, -1000, 1024, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 57, -1000, -1000, -1000, -1000, -1000, -1000, 7347,
	7347, 7347, 7347, -1000, 960, 1239, 611, 1201, -153, 7776,
	1328, 823, -1000, 1135, -235, -1000, -1000, -1000, -151, -1000,
	-1000, -1000, -1000, 1024, 7347, 1171, 1197, -1000, 767, -1000,
	508, 1171, 767, 1171, 1239, -1000, 526, -1000, 526, -1000,
	-1000, 1123, 1113, 1104, 1327, 1325, -223, 801, 334, 1191,
	1576, 1588, 1308, 1535, 1462, -1000, 1024, 1529, 960, -1000,
	-1000, -1000, -1000, -1000, 232, 645, 960, 3573, 1247, -1000,
	696, 1324, 96, 342, 1382, 1137, 146, -1000, 965, 628,
	849, 622, 621, 620, 617, 603, 593, 592, -1000, -1000,
	-1000, -1000, -1000, 1632, -1000, -1000, -1000, 1616, 1321, 1320,
	394, 611, 1189, 378, -1000, -113, 553, 583, -1000, -1000,
	734, -1000, -1000, 2650, 8517, 8517, 8517, -1000, -1000, -1000,
	-1000, 824, 8517, 8517, 8517, 2524, 2650, 2589, 1982, 2552,
	21, 11, 11, 19, 19, 19, 19, 19, 127, 127,
	-1000, -130, -1000, 1310, -1000, -1000, -1000, 1024, 1024, -1000,
	506, -1000, -1000, -235, 841, -1000, -1000, 764, 1239, 503,
	-1000, -1000, -1000, 7776, -1000, 1024, 1171, 1171, 775, 1271,
	8608, 1310, -1000, 1310, 1318, -1000, -1000, 95, 1310, 92,
	-1000, -1000, -1000, -1000, 1318, -1000, -1000, -1000, -1000, -1000,
	1310, 1310, -1000, -1000, 1310, 1310, -1000, 1310, 1310, 804,
	1281, 1279, 1171, 7347, -1000, 638, -1000, 7776, 1024, 934,
	-1000, -1000, -1000, -1000, -1000, 1171, 1024, 1270, 1171, 1171,
	1178, -1000, 7776, 249, 1387, -1000, -1000, 771, -1000, 1080,
	1068, -1000, -1000, 1171, 7347, -246, -1000, -1000, -1000, 971,
	-1000, -1000, 3883, -246, -246, 7347, -1000, -1000, -1000, -1000,
	-223, 334, 394, 1600, 1317, 1064, 1600, 1496, 7776, 7776,
	1591, -1000, 1308, -1000, -1000, 1558, -1000, -1000, 683, -1000,
	1308, 1152, 227, 152, 7776, -1000, 2373, -1000, 3573, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1591, -1000,
	-1000, -1000, 960, 3047, 960, 960, 960, 372, 8106, 7776,
	-1000, -1000, -1000, 934, 1053, 3886, 696, 696, 3886, 696,
	696, 394, 394, 1314, 1313, 289, -1000, 960, -1000, -147,
	1137, 960, -1000, 797, -1000, -1000, 689, 783, 689, 689,
	689, 689, 689, 514, 514, 960, 394, 1162, 249, 378,
	1382, -1000, -1000, -1000, -1000, 2650, 2650, 2650, -1000, 2524,
	2650, 2492, -1000, 8517, 8517, 70, -1000, -1000, 5371, 56,
	-1000, -235, 6115, 582, -1000, -1000, -1000, 3159, 968, 7776,
	-1000, 231, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3159, 8517, 8517, 8517, 8517, -122,
	1237, 571, -1000, 7776, 710, -1000, -1000, -1000, -1000, -1000,
	-1000, 338, 960, 611, -1000, 1625, -155, 414, -1000, -1000,
	-1000, -1000, -1000, 1239, -1000, -1000, 501, -1000, -1000, 1024,
	1600, 1034, 1158, 378, 7776, 371, -223, 378, -1000, 1631,
	549, 762, 1269, -1000, 623, 1576, 1024, 1415, -1000, -1000,
	-135, 7776, 5433, 5805, 582, 5805, -1000, 3573, 261, 1576,
	401, 896, 836, 1268, 389, -1000, 2767, 839, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 960, 1613, 1610, 1606, 1605, 5061, 233,
	635, 148, 1567, -1000, -1000, 3886, -1000, -1000, -1000, -1000,
	-1000, 1155, 1131, 394, 394, 1312, 1239, 1126, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	654, 654, 1102, 1098, 378, -1000, 1382, -1000, -1000, 8517,
	2650, 2650, -1, -1000, -1000, 764, -1000, -1000, 1024, 1310,
	1024, 611, -1000, -1000, 1024, 1954, 1858, 1242, 858, 1239,
	-89, -1000, 582, 7776, 934, -1000, 249, 514, 514, -1000,
	-1000, -1000, 137, 778, 768, 749, 735, 26, -1000, 1583,
	419, 4999, -1000, 378, 1600, 378, 1382, 582, 1091, 1600,
	1382, -1000, 1469, 7776, 7776, 7776, -1000, 1496, -1000, 7347,
	-1000, -1000, -243, 582, -1000, 3573, -1000, 2829, -1000, -1000,
	214, -1000, 1496, 955, 934, 1109, -1000, 1089, 1472, -1000,
	-1000, -1000, 1528, 920, 558, 960, 223, 4258, -1000, -1000,
	1266, 3139, -36, -1000, -1000, -1000, 587, 498, 847, -1000,
	1490, -1000, -1000, 3047, 1514, -1000, -1000, -1000, -1000, -1000,
	5805, 3573, 5805, 645, 229, -1000, 305, 1087, 1084, 394,
	960, -1000, 1137, -1000, -1000, 336, 378, 1382, -1000, 2650,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8517, -1000, 8517,
	-1000, 8517, -1000, 8517, 8517, 1024, 691, 582, 1309, -1000,
	-1000, -1000, 726, -1000, 697, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 130, -1000, 1580, 1024, -1000, 1382, 378, -1000,
	-1000, -1000, 378, -1000, 1467, 582, 582, -1000, -1000, 1276,
	7776, 2336, 7471, -1000, -1000, -1000, 267, 934, -1000, 267,
	1050, 836, 934, -1000, -1000, 897, 836, 836, 836, 836,
	836, -1000, 1444, 1436, -1000, 1429, 1428, 1439, 934, 1059,
	920, 495, 1239, -1000, 964, -1000, -1000, -1000, 1528, 1566,
	-1000, 3511, 1266, -36, 1264, -1000, -20, -32, 6835, 6115,
	526, -1000, -1000, -1000, -1000, -1000, 960, 2345, 2247, 2102,
	114, 201, 159, -1000, 163, 378, 378, 1022, 1024, -1000,
	934, 1382, -1000, 2390, 2390, 2390, 2390, 265, -1000, -1000,
	960, -1000, -1000, -1000, 482, 7776, -1000, -1000, -1000, 1382,
	-1000, 1600, 836, 582, 7463, -1000, -1000, 1149, 1239, -1000,
	1600, 836, 1093, -1000, 1164, -1000, 567, 1472, 1307, 1386,
	1448, -1000, -1000, -1000, -1000, 1420, -1000, 1419, -1000, -1000,
	-1000, -1000, -140, 441, 436, 430, 960, -1000, 1308, -1000,
	1264, -36, -9, -1000, -1000, -1000, -1000, 582, 565, -1000,
	-1000, -1000, 5805, 6689, 633, 5805, -1000, -1000, 199, -1000,
	1382, 1382, -1000, -1000, 1303, -1000, -1000, -1000, -1000, -1000,
	1024, 175, -157, 1016, 6115, 1033, -1000, 582, -1000, 1602,
	1263, -1000, 1380, 897, 1239, -1000, 979, 960, 1591, 1093,
	-1000, 1600, 897, 7776, -1000, -1000, 7776, 1300, -1000, 7776,
	-1000, -1000, -1000, -1000, 1283, 1239, 1239, 1239, 1001, -1000,
	-1000, -1000, -1000, -26, -45, -1000, 7776, 368, 3573, 112,
	384, -1000, -1000, -1000, -1000, 960, -1000, 1456, -127, -178,
	-1000, -1000, -1000, 1024, 7776, 1596, 1578, -1000, 1499, 1187,
	1246, -1000, -1000, 7256, 1024, 1008, 477, 1001, 1576, -1000,
	1591, -1000, 582, 582, 371, 582, -190, 371, 371, 371,
	867, 960, -1000, -1000, -1000, 582, -1000, 1849, 5805, 7050,
	999, -1000, 1449, -1000, -1000, -1000, -1000, 7776, 7776, 275,
	-1000, 1239, -1000, -1000, 1161, 960, 960, -1000, -1000, 1576,
	992, 990, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 987,
	987, 987, 495, -1000, 7042, 348, -1000, -1000, -138, 582,
	1254, 1630, -1000, 1239, -1000, 1308, 475, -1000, -1000, -1000,
	-1000, -190, -1000, -1000, -1000, -140, 350, -1000, -175, 897,
	1246, 1024, 960, -1000, -1000, -1000, -180, 1240, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1878, 4, 13, 1876, 1875, 1874, 1873, 1872, 1871,
	1865, 1864, 1863, 1862, 1861, 1860, 1849, 1847, 1846, 90,
	1845, 1844, 1843, 76, 1842, 1839, 1828, 1826, 72, 518,
	85, 91, 887, 26, 61, 41, 57, 1825, 25, 1818,
	1817, 53, 1816, 40, 1813, 1812, 82, 1811, 1807, 7,
	22, 70, 100, 1805, 1804, 78, 1369, 1803, 1799, 88,
	1797, 1796, 103, 11, 5, 10, 9, 1794, 317, 1,
	1789, 95, 1786, 1784, 1778, 1775, 44, 1774, 54, 64,
	15, 51, 1773, 42, 65, 37, 27, 14, 2, 48,
	30, 1772, 28, 29, 23, 1770, 59, 1769, 119, 38,
	60, 71, 0, 47, 81, 1763, 1762, 1761, 20, 77,
	34, 16, 55, 67, 1760, 69, 107, 45, 106, 105,
	1759, 96, 1756, 1753, 1751, 1747, 1743, 1758, 844, 114,
	97, 52, 1742, 1741, 87, 329, 311, 89, 315, 1435,
	66, 1740, 1739, 1738, 1737, 92, 1736, 73, 113, 19,
	444, 1734, 1733, 1732, 1729, 1728, 1727, 1726, 93, 1724,
	75, 86, 79, 442, 43, 1722, 1720, 1719, 1718, 84,
	1715, 1714, 1713, 63, 1700, 1699, 111, 62, 112, 104,
	110, 1698, 1697, 83, 108, 109, 1696, 94, 46, 24,
	6, 1695, 50, 1693, 1692, 1691, 8, 3, 1689, 1688,
	1686, 1682, 1680, 1679, 58, 1673, 102, 1672, 21, 1668,
	1667, 49, 1666, 1664, 1661, 1659, 1658, 428, 132, 1657,
	80, 116, 1648, 120,
}

var yyR1 = [...]uint8{
	0, 213, 214, 214, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	216, 216, 2, 2, 3, 4, 4, 5, 5, 6,
	6, 22, 22, 7, 8, 8, 8, 219, 219, 41,
	41, 85, 85, 9, 9, 9, 9, 10, 10, 193,
	193, 192, 194, 194, 11, 11, 11, 11, 11, 186,
	186, 186, 186, 186, 12, 12, 189, 189, 189, 13,
	13, 13, 13, 90, 90, 94, 94, 94, 95, 95,
	95, 95, 205, 205, 114, 114, 215, 215, 220, 220,
	220, 220, 220, 220, 220, 184, 184, 184, 184, 185,
	185, 185, 185, 187, 187, 188, 188, 188, 188, 188,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	191, 191, 100, 100, 167, 167, 167, 168, 168, 168,
	168, 168, 168, 170, 170, 171, 171, 106, 106, 172,
	172, 18, 152, 153, 153, 153, 153, 153, 153, 153,
	153, 139, 139, 139, 117, 117, 117, 117, 117, 117,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 178,
	178, 178, 178, 178, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 180, 181, 182, 174, 174, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 129, 129, 129, 129, 129, 129, 173, 173,
	169, 169, 169, 169, 121, 121, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 120, 120, 125, 125, 122, 122, 122, 122, 122,
	122, 122, 122, 118, 118, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 126, 126, 124,
	124, 124, 124, 124, 124, 124, 124, 138, 138, 127,
	127, 136, 136, 137, 137, 137, 128, 128, 128, 135,
	135, 135, 132, 132, 133, 133, 134, 134, 134, 130,
	130, 130, 131, 131, 131, 141, 163, 163, 163, 165,
	165, 166, 166, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 151, 151, 183, 183, 162, 162,
	162, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	150, 150, 160, 160, 161, 161, 158, 158, 158, 159,
	145, 145, 145, 145, 145, 146, 146, 147, 147, 147,
	147, 142, 142, 143, 143, 144, 144, 176, 176, 176,
	209, 209, 209, 209, 209, 209, 210, 210, 177, 177,
	148, 148, 149, 149, 156, 156, 156, 156, 221, 221,
	154, 154, 154, 155, 155, 155, 222, 19, 20, 20,
	21, 21, 21, 25, 25, 25, 23, 23, 24, 24,
	30, 30, 29, 29, 31, 31, 31, 31, 105, 105,
	105, 104, 104, 206, 206, 206, 206, 206, 33, 33,
	34, 34, 35, 35, 36, 36, 36, 196, 196, 195,
	195, 197, 197, 197, 197, 197, 197, 48, 48, 83,
	83, 83, 86, 86, 37, 37, 37, 37, 38, 38,
	39, 39, 40, 40, 112, 112, 111, 111, 111, 110,
	110, 42, 42, 42, 44, 43, 43, 43, 43, 45,
	45, 47, 47, 46, 46, 49, 49, 49, 49, 50,
	50, 84, 84, 32, 32, 32, 32, 32, 32, 32,
	97, 97, 52, 52, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 61,
	61, 61, 61, 61, 61, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 28, 28, 62, 62,
	62, 68, 63, 63, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 59, 59, 59, 59, 59, 59, 59, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	223, 223, 60, 60, 60, 60, 26, 26, 26, 26,
	26, 113, 113, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 116, 116, 116, 116, 116,
	116, 116, 116, 72, 72, 27, 27, 70, 70, 71,
	99, 99, 73, 73, 69, 69, 69, 198, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 74, 74,
	75, 75, 207, 207, 208, 76, 76, 77, 77, 78,
	79, 79, 79, 80, 80, 80, 80, 81, 81, 81,
	54, 54, 54, 54, 54, 54, 82, 82, 82, 82,
	87, 87, 64, 64, 66, 66, 65, 67, 88, 88,
	92, 89, 89, 93, 93, 93, 93, 93, 16, 17,
	91, 91, 91, 107, 107, 107, 98, 98, 96, 96,
	102, 103, 103, 103, 103, 108, 108, 109, 109, 199,
	199, 199, 200, 200, 200, 201, 201, 202, 203, 203,
	204, 212, 212, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 217, 218,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 11, 13, 13, 14, 14, 6, 7,
	1, 1, 4, 6, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 9, 8, 7, 6, 1, 1, 1,
	3, 0, 4, 3, 4, 5, 4, 2, 6, 1,
	3, 3, 0, 1, 2, 2, 2, 3, 5, 0,
	2, 2, 2, 2, 3, 5, 1, 2, 3, 7,
	10, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 1, 0, 3, 0, 2, 2, 0, 2, 2,
	2, 2, 2, 0, 2, 0, 3, 0, 1, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 4, 2, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	6, 6, 8, 8, 5, 8, 7, 4, 0, 2,
	4, 6, 2, 4, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 0, 2,
	5, 2, 3, 3, 2, 3, 2, 2, 3, 4,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 1,
	2, 5, 5, 8, 8, 13, 11, 1, 1, 2,
	2, 10, 8, 9, 7, 7, 5, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 4, 4, 4, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 4, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	2, 1, 4, 5, 5, 5, 5, 6, 4, 4,
	4, 6, 6, 6, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 9, 7, 5, 4, 4, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 0, 2, 1, 3, 5, 3, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 2, 1, 3, 1, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 5, 3, 1, 3,
	1, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 2, 0, 2, 2, 0, 1, 4, 1, 3,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -213, -1, -14, -15, -18, 125, 126, -214, 380,
	-152, 58, -209, -210, -172, 134, 147, 165, 166, 352,
	132, 364, 365, 149, 367, 79, -96, 137, -153, -139,
	-102, 63, 36, 61, 133, 133, 135, 205, 135, -102,
	-102, 138, -46, -108, 61, 63, 132, -98, 138, 367,
	364, 365, 332, 132, 60, 59, -140, -117, -121, -118,
	-123, -122, -124, -102, -119, -120, 241, 344, 238, 242,
	239, 244, 245, 246, 119, 243, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 247, 259, 33,
	154, 231, 232, 233, 236, 235, 237, 234, 260, 261,
	262, 263, 264, 265, 266, 267, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 226, 227,
	228, 230, 229, -140, -140, -102, 56, 204, -102, -98,
	206, -98, 56, -184, 56, 19, 185, 186, 198, 81,
	25, 122, -98, -46, 81, -46, 296, -156, -221, 347,
	37, -139, -141, -145, -142, -143, -144, -157, -146, 141,
	139, 149, 378, 143, 144, -150, 145, 133, 150, 73,
	81, -178, 141, -181, 56, 275, 281, 139, 150, 149,
	378, 71, 142, 25, 354, 356, 31, 32, -134, 381,
	269, -132, 278, -127, 58, -127, -126, 240, -128, 58,
	-127, -128, -127, -128, -130, 242, -130, -130, -130, -130,
	58, 58, -127, -127, -127, -127, -127, -136, 58, -125,
	225, -136, -137, 58, -137, 56, 57, -46, -102, 56,
	-46, -205, 375, 376, -46, -46, -187, -185, 8, 9,
	10, -46, 199, 26, -117, -109, -108, -101, 130, 186,
	355, 80, 25, 27, 275, 281, 185, 83, 119, 16,
	84, 192, 364, 365, 118, 76, 333, 125, 52, 325,
	326, 323, 190, 335, 336, 324, 282, 197, 20, 31,
	375, 10, 28, 152, 24, 112, 127, 187, 87, 88,
	155, 26, 153, 75, 193, 195, 19, 55, 145, 11,
	354, 13, 14, 369, 356, 138, 137, 99, 368, 133,
	50, 8, 121, 29, 376, 96, 46, 150, 196, 48,
	97, 17, 327, 328, 34, 342, 159, 114, 53, 40,
	370, 81, 371, 73, 56, 296, 191, 79, 15, 51,
	160, 372, 147, 194, 98, 128, 332, 49, 188, 373,
	131, 189, 6, 338, 33, 151, 47, 132, 283, 86,
	136, 74, 166, 5, 149, 9, 54, 57, 329, 330,
	331, 38, 85, 12, 148, 346, 77, -46, 26, 130,
	-46, -154, 59, -103, 71, -102, 289, 146, -101, 36,
	58, -177, 56, 81, -148, -102, 150, -150, 61, 133,
	-176, 364, 365, -217, 58, -150, -150, 61, 61, 150,
	73, 19, -102, 9, 150, 150, -177, 63, -46, 58,
	-174, 355, 16, 58, -179, 58, -180, 63, 64, 65,
	66, 73, -129, 72, -52, 270, -59, 323, 326, 325,
	271, 74, 75, -102, 341, 340, -108, 61, -182, 65,
	382, -133, 279, 65, -130, -127, -130, 65, 61, -130,
	-130, -131, 119, 118, 33, -131, -131, -131, -131, -138,
	63, -138, -135, 346, 347, -135, 65, -136, 65, -46,
	-102, 58, 56, -46, 25, 135, 25, -167, 25, 56,
	59, 199, -184, -102, 57, -106, 141, -145, 149, 130,
	89, -103, -221, -161, -158, -102, 150, 10, 9, 19,
	145, 139, 149, 378, -176, 61, 58, -32, -51, 81,
	-56, 31, 26, 9, 76, -55, -52, -69, -198, -67,
	-68, 119, 120, 108, 109, 116, 82, 121, -59, -57,
	-58, -60, -201, 176, 63, 64, -102, 62, 72, 65,
	66, 67, 68, 73, -108, 301, -65, -217, 48, 49,
	333, 334, 335, 336, 342, 337, 84, 38, 40, 247,
	270, 271, 323, 331, 330, 329, 327, 328, 325, 326,
	377, 138, 324, 114, 332, 268, 61, 61, -176, 149,
	-148, -102, 366, -178, 378, -129, -217, 58, -32, 25,
	31, 65, -179, 58, -180, -169, 377, -169, -217, -127,
	58, -127, 58, 58, -217, -217, -217, 122, 60, -131,
	-130, -131, 60, 60, -131, -131, 61, 61, 119, 60,
	59, 60, 231, 231, 59, 60, 59, 58, 57, 56,
	-160, -161, -59, -102, -46, 58, -2, -3, -4, 6,
	-217, -98, -2, -168, 19, 173, 174, -46, -185, -83,
	-102, 150, -187, -184, -102, -216, 133, 150, -102, 141,
	-145, -155, -103, 63, 65, 60, 59, -127, -159, 273,
	-127, -147, 169, 170, 33, 171, -147, 366, 150, 150,
	-176, -217, 58, -161, -218, 80, 79, 96, 60, -32,
	-53, 99, 81, 97, 98, 83, 105, 104, 115, 108,
	109, 110, 111, 112, 113, 114, 106, 107, 377, 118,
	89, 90, 91, 92, 93, 94, 95, 100, 101, 102,
	103, -97, -217, -68, -217, -217, -217, 123, 124, -56,
	-56, -56, -56, -56, -56, -56, -202, 269, -169, 63,
	122, 122, -2, -63, -32, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -72, -32, -217, 41, -217, -217,
	-217, -223, -217, -223, -223, -223, -223, -223, -223, -223,
	-116, 119, 242, 154, 233, -119, -118, 248, 247, -217,
	-217, -217, -217, -176, 58, -177, -32, -83, 60, 58,
	356, 59, 60, -179, 63, 60, 272, 121, -117, -218,
	60, 60, 60, -30, 24, -29, -63, -31, -32, 110,
	-108, -29, -32, -29, -103, -131, -130, 63, -130, 280,
	280, 65, 65, -160, -102, -46, 60, 58, 58, -83,
	-76, 15, -21, 5, -19, -222, -2, -46, 136, 21,
	6, 8, 9, 10, 19, -100, 59, 25, -187, -215,
	58, -102, 149, -102, -163, -165, 346, -164, 57, 146,
	71, 178, 179, 180, 181, 182, 183, 184, -158, -79,
	27, 28, -177, 56, 73, 172, -177, 56, -148, -176,
	58, -32, -161, 60, -173, 171, -32, -32, -61, 73,
	81, 74, 75, -56, 21, 22, 23, -62, -65, -68,
	69, 99, 97, 98, 83, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-121, 232, -116, -119, -113, 61, 63, 61, -69, -102,
	-108, -218, -55, 63, -102, -55, -102, 381, -103, -109,
	-101, -103, -218, 59, -218, -2, -29, -29, -32, -115,
	119, 238, 154, 233, 227, 257, 258, 277, 231, 278,
	220, 212, 217, 230, 228, 214, 229, 213, 226, 223,
	236, 235, 237, 248, 239, 244, 246, 245, 243, -32,
	-31, -31, -29, -23, 24, -70, -71, 85, -69, 19,
	-218, -218, -218, -218, 240, -29, -30, -29, -29, -29,
	-149, -102, -217, -218, 60, 352, 353, -32, 58, 65,
	60, -134, -218, -29, 59, -218, -218, -105, -104, 25,
	-102, 63, 122, -218, -218, -217, -131, -131, 60, 60,
	60, 58, 58, -84, 368, -160, 60, -80, 17, 16,
	-5, -3, -217, 21, 24, -25, 44, 45, -20, -218,
	25, -149, 187, -99, 85, -102, -188, -190, 207, -6,
	-8, -7, -10, -9, -11, -12, -13, -16, -3, -22,
	10, 9, 20, 33, 191, 192, 197, 193, 148, 138,
	-17, 8, 332, 56, -220, -102, 108, 89, 63, -139,
	59, 58, 58, 364, 365, 139, -162, 56, -164, 346,
	58, 348, 61, -151, 89, 63, 89, 89, 89, 89,
	89, 89, 89, 9, 10, 58, 58, -161, -218, 60,
	-163, 339, 73, 74, 75, -56, -56, -56, -62, -56,
	-56, -56, -28, 155, 80, 346, -218, -218, 122, -203,
	-204, 63, 122, -32, -218, -218, -218, 59, 57, 59,
	-127, -127, -127, -137, 218, -127, 218, -137, -127, -127,
	-127, -127, -127, -127, 25, 59, 11, 59, 11, -218,
	-29, -73, -71, 87, -32, -218, -108, -218, -218, -218,
	-218, 60, 59, -32, -173, 56, 60, -175, 60, 60,
	-218, -31, -206, 379, -104, 110, -109, -206, -206, -30,
	-84, -160, -161, -50, 12, 58, 60, -50, -81, 19,
	34, -32, -77, -78, -32, -76, -2, -23, 70, -2,
	-170, 57, 188, 207, -32, 380, -190, 207, -188, -76,
	-19, -19, -19, -193, -102, -192, -19, -212, -211, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	-102, -102, -102, -186, 40, 194, 195, 196, -51, -56,
	-32, -51, -46, 60, -220, -102, -220, -220, -220, -220,
	-220, -161, -161, 58, 58, 150, -102, -166, -164, -102,
	65, -183, 56, 77, 65, -183, -183, -183, -183, -183,
	-147, -147, -149, -161, 60, -173, -163, -162, -28, 80,
	-56, -56, 231, -103, 382, 59, -169, -103, -115, 119,
	-113, -32, -130, 61, -115, -56, -56, -56, -56, 343,
	-76, 88, -32, 86, 142, -102, -218, 10, 9, 352,
	353, 60, 208, 358, 359, 159, 360, 171, 361, 362,
	-217, 122, -218, -50, 60, 60, -163, -32, -83, -84,
	-163, 9, 99, 59, 18, 59, -79, -80, -218, -24,
	47, -171, 346, -32, -191, 207, -190, -189, -190, -190,
	-188, 88, -80, -96, 11, -41, -46, -34, -35, -36,
	-37, -48, -68, -217, -46, 59, -194, -112, 189, 25,
	-89, -114, 209, -93, 291, 290, -103, 301, -91, 289,
	242, 288, -183, 59, -102, 11, 11, 11, 11, -190,
	207, 86, 207, -100, 19, 60, 60, -161, -161, 58,
	-217, 60, 59, -177, -177, 60, 60, -163, -162, -56,
	280, -204, -218, -218, -218, -218, -218, 59, -218, 19,
	-218, 59, -218, 19, -217, -27, 338, -32, -46, -173,
	-147, -147, 346, 65, 16, 65, 65, 65, 65, 359,
	159, 361, 16, -218, 160, -76, 110, -163, -50, -163,
	-162, 60, -50, -162, 42, -32, -32, -78, -81, -29,
	378, -188, 380, -190, 88, -81, -47, 29, -46, -46,
	-41, -219, 59, 11, 57, 33, 59, -42, -44, -43,
	-45, 46, 50, 52, 47, 48, 49, 53, -112, -34,
	-217, -111, 160, -110, 25, -108, 63, -192, -102, 190,
	-117, 59, -89, 209, -90, -94, 292, 294, 89, 122,
	-107, -102, 63, 31, 33, -211, 29, -189, -188, -189,
	-99, 187, -199, 200, 81, 60, 60, -161, -102, -164,
	142, -163, -162, -56, -56, -56, -56, -56, -218, 63,
	58, 65, 65, 363, -108, 16, -218, -162, -163, -163,
	43, -33, 11, -32, 380, 88, -190, -85, 160, -46,
	-85, 57, -34, -46, -88, -92, -69, -35, -36, -36,
	-35, -36, 46, 46, 46, 51, 46, 51, 46, -43,
	-108, -218, -49, 54, 137, 55, -217, -110, 19, -93,
	-90, 59, 293, 295, 296, 56, 77, -32, -103, -131,
	-102, 88, 380, 380, 88, 207, 188, -200, 201, 200,
	-163, -163, 60, -218, -46, -162, -218, -218, -218, -218,
	-26, 99, 346, -149, 122, -207, -208, -32, -162, -50,
	-34, 88, -54, 33, 38, -2, -217, -217, -50, -34,
	-50, -33, 59, 89, -39, -38, 56, 57, -40, 56,
	-38, 46, 46, -196, 346, 133, 133, 133, -86, -102,
	-2, -94, -95, 297, 294, 300, 89, 88, 87, 87,
	-189, 203, 202, -162, -162, 58, -218, 344, 53, 349,
	60, -103, -218, -76, 59, -74, 13, -87, 56, -88,
	-64, -66, -65, -217, -2, -82, -102, -86, -76, -50,
	-50, -92, -32, -32, 58, -32, 58, -217, -217, -217,
	-218, 59, 294, 298, 299, -32, 138, -188, 207, 380,
	-149, 43, 345, 350, -218, -208, -75, 14, 16, 30,
	-87, 59, -218, -218, -218, 59, 122, -218, -80, -76,
	-83, -195, -197, 369, 370, 371, 372, 373, 374, -83,
	-83, -83, -111, -102, 380, -189, 88, 60, 43, -32,
	-63, 150, -66, 38, -2, -217, -102, -102, -80, 60,
	60, 59, -218, -218, -218, -49, 88, 88, 346, 9,
	-64, -2, 122, -197, -196, 138, 349, -88, -218, -102,
	350,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 788, 1, 3,
	6, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	786, 401, 402, 403, 406, 0, 0, 789, 0, 154,
	198, 198, 198, 790, 0, 0, 786, 0, 786, 0,
	0, 0, 0, 513, 795, 796, 786, 0, 0, 407,
	404, 405, 150, 0, 414, 0, 161, 326, 322, 165,
	166, 167, 168, 169, 309, 245, 273, 274, 309, 297,
	316, 309, 316, 280, 309, 316, 329, 329, 329, 329,
	329, 288, 289, 290, 291, 292, 293, 294, 0, 0,
	265, 309, 309, 309, 309, 309, 271, 272, 299, 300,
	301, 302, 303, 304, 305, 306, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 311, 263, 311, 313,
	313, 261, 262, 162, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 106, 107, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 152, 416, 0,
	419, 155, 156, 157, 158, 159, 160, 0, 408, 410,
	0, 397, 0, 0, 0, 0, 0, 370, 371, 171,
	0, 173, 0, 175, 0, 177, 178, 0, 180, 182,
	408, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	328, 324, 323, 244, 0, 329, 309, 298, 329, 0,
	329, 329, 281, 282, 332, 0, 332, 332, 332, 332,
	0, 0, 319, 319, 268, 269, 270, 256, 0, 311,
	264, 258, 259, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 0, 134, 0, 113, 109, 110,
	111, 0, 108, 0, 21, 514, 797, 798, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 0, 787, 147,
	0, 0, 0, 420, 422, 791, 792, 793, 794, 418,
	0, 380, 0, 0, 0, 411, 361, 0, 366, -2,
	0, 398, 399, 805, 963, 0, 0, 364, 397, 410,
	172, 0, 0, 0, 179, 181, 0, 185, 186, 805,
	0, 216, 0, 0, 199, 0, 202, -2, 205, 206,
	207, 240, 209, 210, 211, 0, 213, 309, 309, 236,
	0, 532, 533, 0, 0, 0, 0, -2, 214, 215,
	327, 164, 325, 0, 332, 329, 332, 0, 0, 332,
	332, 283, 333, 0, 0, 284, 285, 286, 287, 0,
	307, 0, 266, 0, 0, 267, 0, 257, 0, 0,
	0, 0, 0, 0, 0, 786, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 28, 148, 0,
	0, 421, 417, 0, 374, 309, 309, 0, 0, 0,
	0, 0, 397, 0, 0, 365, 0, 0, 523, 805,
	528, 530, 0, 0, 0, 574, 575, 576, 577, 578,
	579, 805, 805, 805, 805, 805, 805, 805, 606, 607,
	608, 609, 0, 611, -2, 719, 714, 721, 722, 723,
	724, 725, 726, 727, 0, 0, 767, 805, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 650, 650, 650, 650, 650, 650, 650, 650,
	0, 0, 0, 0, 0, 806, 362, 363, 368, 397,
	0, 411, 197, 174, 408, 176, 805, 0, 0, 0,
	217, 0, 0, 0, 0, 204, 0, 208, 0, 232,
	0, 234, 0, 0, -2, 805, 805, 0, 310, 275,
	332, 277, 317, 318, 278, 279, 334, 330, 331, 329,
	0, 329, 0, 0, 0, 314, 0, 0, 0, 0,
	0, 372, 373, 309, 0, 0, -2, 735, 0, 426,
	0, 0, -2, 0, 0, 135, 136, 132, 114, 112,
	479, 480, 0, 0, 96, 0, 30, 31, 411, 410,
	29, 415, 423, 424, 425, 336, 0, 740, 378, 379,
	377, 408, 387, 388, 0, 0, 408, 409, 410, 397,
	0, 805, 0, 0, 238, 805, 805, 0, 964, 526,
	805, 0, 0, 805, 805, 805, 805, 805, 805, 805,
	805, 805, 805, 805, 805, 805, 805, 805, 0, 0,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 529, 0, 546, 0, 0, 0, 0, 0, 597,
	598, 599, 600, 601, 602, 603, 610, 0, 718, 720,
	0, 0, 35, 0, 572, 805, 805, 805, 805, 805,
	805, 805, 805, 436, 0, 704, 0, 0, 0, 0,
	0, 641, 0, 642, 643, 644, 645, 646, 647, 648,
	649, 695, 0, 697, 698, 699, 700, 701, 702, 805,
	-2, 805, 805, 369, 0, 0, 0, 0, 0, 805,
	194, 0, 200, 0, 240, 203, 241, 242, 326, 212,
	233, 235, 237, 0, 805, 0, 0, 442, 448, 444,
	0, 0, 448, 0, 0, 276, 332, 308, 332, 320,
	321, 0, 0, 0, 0, 0, 521, 963, 0, 0,
	743, 0, 0, 430, 433, 428, 35, 0, 0, 138,
	139, 140, 141, 142, 0, 710, 0, 0, 0, 22,
	98, 0, 0, 411, 358, 337, 0, 339, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	741, 742, 381, 0, 389, 390, 382, 0, 0, 0,
	0, 0, 0, 336, 396, 0, 524, 525, 527, 549,
	0, 551, 553, 534, 805, 805, 805, 538, 568, 569,
	570, 0, 805, 805, 805, 566, 542, 0, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	594, 0, 605, 309, 595, 661, 662, 0, 0, 714,
	0, 548, 592, 240, 0, 593, 604, 0, 715, 0,
	-2, 717, 571, 805, 766, 35, 0, 0, 0, 0,
	-2, 309, 666, 309, 313, 669, 670, 671, 309, 674,
	676, 677, 678, 679, 313, 681, 682, 683, 684, 685,
	309, 309, 688, 689, 309, 309, 692, 309, 309, 0,
	0, 0, 0, 805, 437, 712, 707, 805, 0, 0,
	638, 639, 640, 651, 696, 0, 0, 441, 0, 0,
	0, 412, 805, 238, 187, 190, 191, 0, 218, 0,
	0, 243, 612, 0, 805, 453, 618, 445, 449, 0,
	451, 452, 0, 453, 453, -2, 295, 296, 312, 315,
	521, 0, 0, 519, 0, 0, 519, 747, 805, 805,
	735, 37, 0, 431, 432, 436, 434, 435, 427, 36,
	0, 143, 0, 0, 805, 481, 18, 115, 0, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 735, 426,
	426, 426, 0, 426, 0, 0, 0, 69, 805, 805,
	778, 41, 42, 0, 0, -2, 98, 98, -2, 98,
	98, 0, 0, 0, 0, 0, 335, 0, 340, 0,
	0, 0, 343, 0, 355, 345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 238, 336,
	358, 239, 550, 552, 554, 535, 536, 537, 539, 566,
	543, 0, 540, 805, 805, 0, 531, 547, 0, 0,
	808, 240, 0, 573, -2, 619, 620, 0, 0, 805,
	663, 329, 667, 668, 672, 673, 675, 680, 686, 687,
	690, 691, 693, 694, 0, 805, 805, 805, 805, 0,
	735, 0, 708, 805, 0, 636, 637, 652, 653, 654,
	655, 0, 0, 0, 183, 0, 0, 0, 196, 201,
	613, 443, 614, 0, 450, 446, 0, 615, 616, 0,
	519, 0, 0, 336, 805, 0, 521, 336, 32, 0,
	0, 744, 736, 737, 740, 743, 35, 438, 429, -2,
	145, 805, 133, 0, 711, 0, 117, 0, 0, 743,
	788, 0, 0, 57, -2, 59, 0, 0, 811, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	64, 65, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 523, 132, 97, 99, -2, 100, 101, 102, 103,
	104, 0, 0, 0, 0, 0, 359, 0, 341, 346,
	344, 347, 356, 357, 348, 349, 350, 351, 352, 353,
	408, 408, 0, 0, 336, 395, 358, 394, 541, 805,
	567, 544, 0, 715, 807, 0, 810, 716, 0, 309,
	0, 0, 664, 665, 0, 0, 0, 0, 0, 0,
	705, 635, 713, 805, 0, 413, 238, 0, 0, 192,
	193, 195, 0, 0, 0, 0, 0, 0, 229, 0,
	0, 0, 617, 336, 519, 336, 358, 520, 0, 519,
	358, 748, 0, 805, 805, 805, 739, 747, 38, 805,
	439, 16, 0, 144, 17, 0, 131, 0, 76, 116,
	0, 118, 747, 0, 0, 0, 49, 0, 460, 462,
	463, 464, 494, 0, 496, 0, 0, 0, 63, 495,
	53, 0, 0, 771, 94, 95, 0, 0, 0, -2,
	0, 782, 779, 0, 67, 70, 71, 72, 73, 74,
	0, 0, 0, 710, 0, 23, 799, 0, 0, 0,
	0, 338, 0, 383, 384, 0, 336, 358, 392, 545,
	596, 809, 621, 624, 622, 623, 625, 805, 627, 805,
	629, 805, 631, 805, 805, 0, 0, 709, 0, 184,
	188, 189, 0, 220, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 454, 0, 0, 447, 358, 336, 10,
	8, 522, 336, 12, 0, 745, 746, 738, 33, 458,
	805, 0, 0, 77, 119, 129, 51, 0, 512, -2,
	0, 0, 0, 47, 48, 0, 0, 0, 0, 0,
	0, 501, 0, 0, 504, 0, 0, 0, 0, 0,
	0, 515, 0, 497, 0, 499, 500, 60, 494, 0,
	61, 0, 54, 0, 56, 83, 0, 0, 805, 0,
	332, 783, 784, 785, 781, 812, 0, 0, 0, 0,
	0, 0, 802, 800, 0, 336, 336, 0, 0, 342,
	0, 358, 393, 0, 0, 0, 0, 656, 634, 706,
	0, 219, 221, 230, 0, 805, 456, 7, 11, 358,
	749, 519, 0, 146, 0, 19, 78, 0, 0, 511,
	519, 0, 519, 50, 458, 768, 0, 461, 490, 492,
	0, 487, 502, 503, 505, 0, 507, 0, 509, 510,
	465, 466, 467, 0, 0, 0, 0, 498, 0, 772,
	55, 0, 0, 86, 87, 773, 774, 775, 0, 777,
	68, 75, 0, 0, 81, 0, 133, 25, 0, 801,
	358, 358, 24, 360, 0, 391, 626, 628, 630, 632,
	0, 0, 0, 0, 0, 0, 732, 734, 9, 728,
	459, 130, 760, 0, 0, -2, 0, 0, 735, 519,
	46, 519, 0, 805, 484, 491, 805, 0, 485, 805,
	486, 506, 508, 477, 0, 0, 0, 0, 0, 482,
	-2, 84, 85, 0, 0, 91, 805, 0, 0, 0,
	0, 803, 804, 26, 27, 0, 633, 0, 0, 0,
	386, 231, 455, 0, 805, 730, 0, 39, 0, 760,
	750, 762, 764, 805, 35, 0, 756, 0, 743, 45,
	735, 769, 770, 488, 0, 493, 0, 0, 0, 0,
	496, 0, 88, 89, 90, 776, 79, 0, 0, 0,
	0, 657, 0, 660, 457, 733, 34, 805, 805, 0,
	40, 0, 765, -2, 0, 0, 0, 52, 44, 743,
	0, 0, 469, 471, 472, 473, 474, 475, 476, 0,
	0, 0, 515, 483, 0, 0, 20, 385, 658, 731,
	729, 0, 763, 0, -2, 0, 758, 757, 43, 489,
	468, 0, 516, 517, 518, 467, 0, 82, 0, 0,
	753, 35, 0, 470, 478, 80, 0, 761, -2, 759,
	659,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 113, 105, 3,
	58, 60, 110, 108, 59, 109, 122, 111, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 380,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 381, 3, 382, 115, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 116,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 106, 107, 112, 114, 117,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:643
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:708
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:726
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:744
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:753
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:768
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:776
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 34:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:783
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:789
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:793
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:799
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:810
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:822
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.str = InsertStr
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:838
		{
			yyVAL.str = ReplaceStr
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:850
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:854
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:863
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:864
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:877
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:881
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:905
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:932
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:947
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:976
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:986
		{
			yyVAL.str = ""
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:990
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1008
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1015
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1029
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1033
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1048
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1058
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1077
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1081
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1087
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1091
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1095
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1101
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1109
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1113
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1123
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.str = SessionStr
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.str = GlobalStr
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1138
		{
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1139
		{
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1143
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1144
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1145
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1146
		{
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1147
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1148
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1149
		{
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1153
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1157
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1165
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1179
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1190
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1222
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1245
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.statement = &BeginEnd{
				Statements: yyDollar[2].blockStatement,
			}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1264
		{
			yyVAL.empty = struct{}{}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1266
		{
			yyVAL.empty = struct{}{}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.bytes = nil
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1277
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1282
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1286
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1290
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1294
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1307
		{
			yyVAL.expr = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1311
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1316
		{
			yyVAL.expr = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1320
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1325
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.bytes = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.bytes = nil
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1344
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1351
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1357
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1361
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1366
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1370
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1374
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1378
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1386
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1392
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1397
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1408
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1425
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1438
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1443
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1448
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1453
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1459
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1464
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1469
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1474
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1479
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1484
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1489
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1494
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1499
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1508
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1518
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1523
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1528
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1535
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1542
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1550
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1555
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1560
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1565
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1571
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1577
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1583
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1590
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1596
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1602
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1606
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1610
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1614
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1618
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1624
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1628
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1632
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1636
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1640
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1644
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1652
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1656
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1662
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1668
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1674
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1684
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1689
		{
			yyVAL.sequence = &Sequence{}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1693
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1698
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1703
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1708
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1713
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1718
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1723
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1728
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1733
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1738
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1743
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1748
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1753
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1760
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1764
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1776
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1780
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1785
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1794
		{
			yyVAL.bytes = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1803
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1808
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2073
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2077
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2093
		{
			yyVAL.optVal = nil
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2102
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2106
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.optVal = nil
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2140
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2149
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2162
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2175
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2180
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2220
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2225
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2229
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2239
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2249
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2259
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2263
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2268
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2272
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2276
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2280
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2284
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2296
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.indexPartition = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2334
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2344
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2348
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2352
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2360
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2372
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2378
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2388
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2414
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2418
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2428
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2433
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2440
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 383:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2447
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 384:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2454
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 385:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2463
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 386:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2493
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2497
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 391:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 392:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 393:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2524
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
			}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2563
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2567
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2571
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2577
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2581
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2585
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2589
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2593
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2597
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2603
		{
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2604
		{
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2608
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2612
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2617
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2628
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2645
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2654
		{
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2655
		{
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2673
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2677
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2686
		{
			setAllowComments(yylex, true)
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.bytes2 = nil
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.str = UnionStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.str = UnionAllStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2714
		{
			yyVAL.str = UnionDistinctStr
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2719
		{
			yyVAL.str = ""
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2723
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2727
		{
			yyVAL.str = SQLCacheStr
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2736
		{
			yyVAL.str = DistinctStr
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.str = StraightJoinHint
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.selectExprs = nil
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2778
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2782
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.overExpr = nil
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2811
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2815
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2819
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 457:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2828
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2860
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.strs = []string{}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2875
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2901
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2905
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2926
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2936
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2973
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2983
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2988
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.empty = struct{}{}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3008
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.str = JoinStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3018
		{
			yyVAL.str = JoinStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.str = JoinStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.str = StraightJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.str = LeftJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.str = LeftJoinStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.str = RightJoinStr
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.str = RightJoinStr
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.str = NaturalJoinStr
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3056
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3066
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.indexHints = nil
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3106
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.columns = nil
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3125
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3161
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3165
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3175
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3179
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3183
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3187
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3191
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3195
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3199
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3215
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3224
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3234
		{
			yyVAL.str = IsNullStr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3238
		{
			yyVAL.str = IsNotNullStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3242
		{
			yyVAL.str = IsTrueStr
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3246
		{
			yyVAL.str = IsNotTrueStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.str = IsFalseStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.str = IsNotFalseStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.str = EqualStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.str = LessThanStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.str = GreaterThanStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.str = LessEqualStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.str = GreaterEqualStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.str = NotEqualStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.str = PosixRegexStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3292
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3296
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3315
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3323
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3329
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3345
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3349
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3353
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3357
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3361
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3365
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3377
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3381
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3385
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3405
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3417
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3445
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3453
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3475
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3483
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3499
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3513
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3547
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3555
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3559
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3563
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3567
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3571
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 626:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3575
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 627:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3579
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 629:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 630:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3591
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 631:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3595
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 632:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3599
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 633:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 634:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3615
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3654
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3678
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.str = ""
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3714
		{
			yyVAL.str = BooleanModeStr
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 659:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.str = QueryExpansionStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3768
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3776
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3780
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3784
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3832
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.expr = nil
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3916
		{
			yyVAL.str = string("")
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3943
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3946
		{
			yyVAL.expr = nil
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3956
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3960
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3985
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3994
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3998
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4002
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4010
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.expr = &NullVal{}
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.exprs = nil
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4023
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.expr = nil
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4038
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.orderBy = nil
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.str = AscScr
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.str = AscScr
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.str = DescScr
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.limit = nil
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.str = ""
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.str = ForUpdateStr
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4116
		{
			yyVAL.str = ShareModeStr
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4137
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4146
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 755:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4150
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 759:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4174
		{
			yyVAL.updateExprs = nil
		}
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4178
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4184
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4194
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4198
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4204
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4210
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4246
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4250
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4254
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 776:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4275
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.bytes = []byte("charset")
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4293
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4297
		{
			yyVAL.expr = &Default{}
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4302
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.str = ""
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4309
		{
			yyVAL.str = IgnoreStr
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4313
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4320
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4324
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4328
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4334
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4360
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4366
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4384
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4402
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4409
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4415
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4419
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4586
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4595
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
