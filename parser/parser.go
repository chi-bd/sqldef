// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const STATUS = 57495
const VARIABLES = 57496
const RESTRICT = 57497
const CASCADE = 57498
const NO = 57499
const ACTION = 57500
const PERMISSIVE = 57501
const RESTRICTIVE = 57502
const PUBLIC = 57503
const CURRENT_USER = 57504
const SESSION_USER = 57505
const PAD_INDEX = 57506
const FILLFACTOR = 57507
const IGNORE_DUP_KEY = 57508
const STATISTICS_NORECOMPUTE = 57509
const STATISTICS_INCREMENTAL = 57510
const ALLOW_ROW_LOCKS = 57511
const ALLOW_PAGE_LOCKS = 57512
const DISTANCE = 57513
const M = 57514
const EUCLIDEAN = 57515
const COSINE = 57516
const BEFORE = 57517
const AFTER = 57518
const EACH = 57519
const ROW = 57520
const SCROLL = 57521
const CURSOR = 57522
const OPEN = 57523
const CLOSE = 57524
const FETCH = 57525
const PRIOR = 57526
const FIRST = 57527
const LAST = 57528
const DEALLOCATE = 57529
const INSTEAD = 57530
const OF = 57531
const DEFERRABLE = 57532
const INITIALLY = 57533
const IMMEDIATE = 57534
const DEFERRED = 57535
const CONCURRENTLY = 57536
const SQL = 57537
const SECURITY = 57538
const BEGIN = 57539
const START = 57540
const TRANSACTION = 57541
const COMMIT = 57542
const ROLLBACK = 57543
const BIT = 57544
const TINYINT = 57545
const SMALLINT = 57546
const SMALLSERIAL = 57547
const MEDIUMINT = 57548
const INT = 57549
const INTEGER = 57550
const SERIAL = 57551
const BIGINT = 57552
const BIGSERIAL = 57553
const INTNUM = 57554
const REAL = 57555
const DOUBLE = 57556
const PRECISION = 57557
const FLOAT_TYPE = 57558
const DECIMAL = 57559
const NUMERIC = 57560
const SMALLMONEY = 57561
const MONEY = 57562
const TIME = 57563
const TIMESTAMP = 57564
const DATETIME = 57565
const YEAR = 57566
const DATETIMEOFFSET = 57567
const DATETIME2 = 57568
const SMALLDATETIME = 57569
const CHAR = 57570
const VARCHAR = 57571
const VARYING = 57572
const BOOL = 57573
const CHARACTER = 57574
const VARBINARY = 57575
const NCHAR = 57576
const NVARCHAR = 57577
const NTEXT = 57578
const UUID = 57579
const TEXT = 57580
const TINYTEXT = 57581
const MEDIUMTEXT = 57582
const LONGTEXT = 57583
const CITEXT = 57584
const BLOB = 57585
const TINYBLOB = 57586
const MEDIUMBLOB = 57587
const LONGBLOB = 57588
const JSON = 57589
const JSONB = 57590
const ENUM = 57591
const GEOMETRY = 57592
const POINT = 57593
const LINESTRING = 57594
const POLYGON = 57595
const GEOMETRYCOLLECTION = 57596
const MULTIPOINT = 57597
const MULTILINESTRING = 57598
const MULTIPOLYGON = 57599
const VECTOR = 57600
const VARIADIC = 57601
const ARRAY = 57602
const NOW = 57603
const GETDATE = 57604
const BPCHAR = 57605
const TEXT_PATTERN_OPS = 57606
const NULLX = 57607
const AUTO_INCREMENT = 57608
const APPROXNUM = 57609
const SIGNED = 57610
const UNSIGNED = 57611
const ZEROFILL = 57612
const ZONE = 57613
const AUTOINCREMENT = 57614
const DATABASES = 57615
const TABLES = 57616
const VSCHEMA_TABLES = 57617
const EXTENDED = 57618
const FULL = 57619
const PROCESSLIST = 57620
const NAMES = 57621
const CHARSET = 57622
const GLOBAL = 57623
const SESSION = 57624
const ISOLATION = 57625
const LEVEL = 57626
const READ = 57627
const WRITE = 57628
const ONLY = 57629
const REPEATABLE = 57630
const COMMITTED = 57631
const UNCOMMITTED = 57632
const SERIALIZABLE = 57633
const NEW = 57634
const CONCAT_NULL_YIELDS_NULL = 57635
const CURSOR_CLOSE_ON_COMMIT = 57636
const QUOTED_IDENTIFIER = 57637
const ARITHABORT = 57638
const FMTONLY = 57639
const NOCOUNT = 57640
const NOEXEC = 57641
const NUMERIC_ROUNDABORT = 57642
const ANSI_DEFAULTS = 57643
const ANSI_NULL_DFLT_OFF = 57644
const ANSI_NULL_DFLT_ON = 57645
const ANSI_NULLS = 57646
const ANSI_PADDING = 57647
const ANSI_WARNINGS = 57648
const FORCEPLAN = 57649
const SHOWPLAN_ALL = 57650
const SHOWPLAN_TEXT = 57651
const SHOWPLAN_XML = 57652
const IMPLICIT_TRANSACTIONS = 57653
const REMOTE_PROC_TRANSACTIONS = 57654
const XACT_ABORT = 57655
const CURRENT_TIMESTAMP = 57656
const DATABASE = 57657
const CURRENT_DATE = 57658
const CURRENT_TIME = 57659
const LOCALTIME = 57660
const LOCALTIMESTAMP = 57661
const UTC_DATE = 57662
const UTC_TIME = 57663
const UTC_TIMESTAMP = 57664
const REPLACE = 57665
const CONVERT = 57666
const CAST = 57667
const SUBSTR = 57668
const SUBSTRING = 57669
const GROUP_CONCAT = 57670
const SEPARATOR = 57671
const INHERIT = 57672
const LEAD = 57673
const LAG = 57674
const MATCH = 57675
const AGAINST = 57676
const BOOLEAN = 57677
const LANGUAGE = 57678
const WITH = 57679
const WITHOUT = 57680
const PARSER = 57681
const QUERY = 57682
const EXPANSION = 57683
const UNUSED = 57684
const VIRTUAL = 57685
const STORED = 57686
const GENERATED = 57687
const ALWAYS = 57688
const IDENTITY = 57689
const SEQUENCE = 57690
const INCREMENT = 57691
const MINVALUE = 57692
const CACHE = 57693
const CYCLE = 57694
const OWNED = 57695
const NONE = 57696
const CLUSTERED = 57697
const NONCLUSTERED = 57698
const REPLICATION = 57699
const COLUMNSTORE = 57700
const INCLUDE = 57701
const HOLDLOCK = 57702
const NOLOCK = 57703
const NOWAIT = 57704
const PAGLOCK = 57705
const ROWLOCK = 57706
const TABLOCK = 57707
const UPDLOCK = 57708
const READUNCOMMITTED = 57709
const DEFINER = 57710
const INVOKER = 57711
const TYPECAST = 57712
const CHECK = 57713
const OVER = 57714

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 426,
	-2, 164,
	-1, 45,
	123, 826,
	-2, 821,
	-1, 260,
	123, 829,
	-2, 825,
	-1, 419,
	61, 396,
	-2, 393,
	-1, 449,
	123, 827,
	-2, 255,
	-1, 569,
	123, 827,
	-2, 255,
	-1, 590,
	277, 836,
	-2, 734,
	-1, 640,
	277, 836,
	-2, 466,
	-1, 674,
	5, 36,
	-2, 14,
	-1, 680,
	5, 36,
	-2, 16,
	-1, 821,
	277, 836,
	-2, 466,
	-1, 993,
	277, 836,
	-2, 325,
	-1, 1069,
	277, 836,
	-2, 466,
	-1, 1137,
	60, 106,
	-2, 213,
	-1, 1140,
	60, 106,
	-2, 213,
	-1, 1194,
	5, 37,
	-2, 600,
	-1, 1273,
	5, 36,
	-2, 15,
	-1, 1290,
	197, 63,
	-2, 522,
	-1, 1326,
	277, 836,
	-2, 145,
	-1, 1327,
	277, 836,
	-2, 145,
	-1, 1331,
	60, 106,
	-2, 184,
	-1, 1475,
	90, 823,
	-2, 811,
	-1, 1571,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1745,
	5, 36,
	-2, 782,
	-1, 1770,
	5, 36,
	-2, 59,
	-1, 1842,
	5, 37,
	-2, 783,
	-1, 1874,
	5, 36,
	-2, 785,
	-1, 1896,
	5, 37,
	-2, 786,
}

const yyPrivate = 57344

const yyLast = 9334

var yyAct = [...]int16{
	571, 1763, 1851, 1801, 1691, 1673, 552, 1802, 1082, 1798,
	687, 1593, 31, 1733, 767, 1674, 1768, 1755, 41, 42,
	1044, 1436, 581, 1607, 1117, 43, 1653, 768, 1104, 1105,
	872, 1606, 68, 68, 68, 1444, 131, 134, 135, 1591,
	542, 1469, 1581, 1595, 1101, 1455, 1666, 1118, 1454, 1098,
	1294, 1466, 1463, 1472, 668, 482, 62, 1267, 1451, 710,
	1262, 31, 899, 1291, 887, 1196, 411, 1115, 1487, 929,
	27, 969, 631, 914, 1077, 1187, 1347, 213, 1356, 1026,
	61, 844, 992, 1062, 1256, 408, 876, 942, 197, 1029,
	1245, 667, 550, 256, 528, 69, 64, 563, 63, 1460,
	811, 232, 414, 247, 551, 161, 140, 446, 1330, 803,
	1148, 420, 248, 129, 130, 448, 180, 454, 52, 48,
	1377, 156, 471, 986, 848, 740, 741, 742, 743, 744,
	737, 1728, 199, 748, 238, 9, 736, 735, 745, 746,
	738, 739, 740, 741, 742, 743, 744, 737, 257, 68,
	748, 1246, 151, 33, 195, 535, 257, 136, 153, 138,
	215, 216, 217, 218, 737, 536, 1558, 748, 415, 632,
	150, 748, 34, 243, 244, 1078, 54, 615, 34, 716,
	32, 618, 434, 745, 746, 738, 739, 740, 741, 742,
	743, 744, 737, 1041, 830, 748, 465, 444, 1144, 421,
	422, 255, 55, 56, 677, 397, 1131, 1121, 1120, 406,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1122, 738,
	739, 740, 741, 742, 743, 744, 737, 1898, 234, 748,
	1831, 1123, 237, 260, 1894, 399, 241, 502, 245, 246,
	50, 1786, 47, 398, 1538, 253, 198, 1400, 1401, 1152,
	400, 176, 1049, 1050, 403, 516, 438, 168, 418, 167,
	1153, 171, 172, 175, 494, 495, 1764, 169, 177, 158,
	1531, 486, 487, 488, 489, 1886, 1402, 1433, 1190, 1830,
	1785, 1390, 475, 1176, 1524, 477, 1561, 480, 481, 57,
	1823, 440, 731, 458, 1701, 734, 1824, 1825, 1702, 1703,
	456, 749, 750, 751, 752, 753, 754, 755, 1507, 732,
	733, 730, 756, 757, 758, 759, 736, 735, 745, 746,
	738, 739, 740, 741, 742, 743, 744, 737, 861, 462,
	748, 419, 1608, 860, 1609, 501, 1372, 1116, 1774, 505,
	506, 1773, 473, 45, 1775, 47, 201, 1128, 177, 549,
	50, 868, 47, 1102, 782, 1384, 214, 203, 1133, 1134,
	515, 736, 735, 745, 746, 738, 739, 740, 741, 742,
	743, 744, 737, 1038, 206, 748, 1375, 555, 1406, 659,
	1521, 459, 658, 461, 460, 1729, 230, 1209, 1207, 490,
	1408, 493, 173, 1714, 1711, 137, 1124, 1125, 1127, 421,
	422, 747, 1126, 537, 1277, 257, 1715, 227, 514, 132,
	252, 529, 1281, 677, 34, 1131, 1121, 1120, 747, 1779,
	1778, 727, 1625, 38, 1712, 1601, 1465, 1122, 1276, 141,
	1622, 1403, 617, 530, 1097, 747, 1519, 727, 920, 747,
	1123, 1357, 1358, 683, 684, 930, 1667, 1362, 465, 1537,
	427, 1539, 520, 1376, 1871, 1341, 175, 718, 525, 34,
	522, 894, 695, 747, 428, 527, 736, 735, 745, 746,
	738, 739, 740, 741, 742, 743, 744, 737, 1320, 696,
	748, 429, 736, 735, 745, 746, 738, 739, 740, 741,
	742, 743, 744, 737, 717, 1441, 748, 747, 747, 39,
	831, 34, 437, 436, 670, 170, 713, 174, 521, 431,
	416, 620, 1145, 1146, 534, 688, 873, 1631, 257, 693,
	423, 697, 674, 176, 680, 257, 633, 526, 538, 1395,
	1147, 645, 231, 647, 616, 698, 650, 651, 1132, 175,
	177, 529, 614, 214, 443, 458, 1116, 1153, 1624, 689,
	1645, 619, 456, 621, 646, 628, 1128, 1887, 1596, 1530,
	45, 727, 47, 630, 133, 1794, 1663, 1133, 1134, 421,
	422, 692, 1357, 1358, 708, 675, 53, 675, 701, 1784,
	708, 28, 1404, 1405, 1407, 1409, 1410, 157, 1279, 880,
	766, 530, 715, 154, 50, 722, 1598, 1464, 747, 176,
	508, 669, 142, 143, 671, 1124, 1125, 1127, 1692, 1694,
	492, 1126, 685, 40, 496, 144, 177, 675, 1767, 690,
	1766, 1281, 1765, 691, 688, 37, 686, 679, 36, 699,
	467, 466, 35, 68, 828, 58, 51, 499, 44, 1321,
	1322, 1323, 783, 747, 257, 711, 712, 714, 719, 736,
	735, 745, 746, 738, 739, 740, 741, 742, 743, 744,
	737, 523, 402, 748, 1542, 670, 865, 653, 847, 6,
	7, 771, 772, 688, 529, 1891, 1845, 417, 1731, 425,
	426, 1611, 1412, 870, 1066, 786, 785, 826, 643, 839,
	517, 149, 1693, 878, 147, 893, 1594, 855, 1423, 895,
	816, 817, 856, 484, 483, 949, 529, 726, 805, 806,
	807, 808, 809, 810, 724, 1776, 33, 1753, 617, 947,
	948, 946, 529, 1610, 725, 724, 654, 824, 871, 1512,
	727, 726, 1443, 857, 456, 859, 1167, 834, 727, 1142,
	1166, 34, 726, 1140, 1425, 1165, 675, 1132, 747, 725,
	724, 725, 724, 943, 1164, 723, 864, 725, 724, 915,
	916, 1163, 669, 1162, 747, 974, 866, 726, 1565, 726,
	1139, 973, 983, 983, 1161, 726, 927, 917, 1160, 879,
	1030, 985, 921, 1226, 980, 1424, 257, 257, 622, 1138,
	1159, 1158, 896, 1156, 1566, 890, 1392, 1440, 974, 1099,
	913, 725, 724, 1030, 1031, 725, 724, 634, 1239, 1394,
	766, 725, 724, 1063, 413, 640, 641, 642, 1217, 726,
	923, 152, 922, 726, 146, 433, 1045, 725, 724, 726,
	924, 675, 919, 918, 846, 852, 854, 675, 412, 987,
	988, 1348, 675, 968, 817, 726, 965, 413, 967, 34,
	1064, 1065, 1644, 1348, 1064, 1532, 1479, 678, 413, 678,
	1272, 842, 1349, 413, 981, 984, 474, 725, 724, 424,
	670, 260, 725, 724, 1349, 934, 936, 937, 900, 432,
	945, 1045, 912, 935, 207, 726, 841, 720, 1643, 1100,
	726, 474, 902, 1137, 1536, 761, 763, 764, 765, 769,
	1201, 1096, 1200, 1040, 1533, 1535, 774, 774, 774, 774,
	774, 774, 774, 1070, 1534, 1071, 1023, 1024, 1177, 1178,
	1179, 640, 725, 724, 762, 479, 529, 1359, 1055, 478,
	1350, 747, 787, 788, 789, 790, 791, 792, 793, 794,
	726, 797, 1086, 799, 800, 801, 802, 804, 804, 804,
	804, 804, 804, 804, 1517, 820, 821, 822, 823, 829,
	1150, 1079, 210, 1450, 1641, 212, 677, 669, 901, 943,
	1346, 474, 1053, 863, 835, 450, 451, 452, 725, 724,
	1172, 989, 990, 455, 453, 463, 464, 1025, 1596, 424,
	862, 627, 50, 500, 47, 727, 726, 1615, 1569, 498,
	1197, 1136, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 497, 470, 50, 1039, 47, 1042, 1043, 424, 784,
	640, 50, 1157, 47, 50, 858, 1598, 34, 678, 1614,
	50, 33, 47, 45, 1183, 47, 50, 491, 47, 1057,
	736, 735, 745, 746, 738, 739, 740, 741, 742, 743,
	744, 737, 424, 439, 748, 783, 34, 784, 32, 1583,
	1586, 1587, 1588, 1584, 1064, 1585, 1589, 257, 34, 1756,
	1757, 50, 970, 1598, 971, 424, 670, 529, 34, 774,
	774, 677, 774, 774, 774, 774, 774, 774, 774, 774,
	774, 774, 774, 774, 774, 774, 774, 1154, 34, 1206,
	1065, 972, 1270, 1141, 888, 727, 1881, 1880, 944, 1210,
	1273, 888, 1879, 678, 652, 30, 1269, 1237, 1225, 769,
	987, 1235, 1866, 1290, 769, 1316, 1317, 1318, 1822, 727,
	1326, 1255, 613, 424, 873, 612, 34, 611, 1331, 1137,
	1137, 1331, 1137, 1137, 529, 529, 1283, 1247, 1282, 1253,
	1342, 1252, 260, 610, 1345, 675, 1575, 1285, 1250, 1251,
	1249, 1844, 727, 675, 159, 1260, 539, 1254, 430, 1324,
	1271, 1045, 529, 669, 727, 898, 1046, 1654, 1791, 727,
	1235, 1787, 677, 1244, 705, 1718, 1578, 727, 1415, 457,
	462, 1365, 705, 1627, 705, 1626, 888, 1549, 1337, 1338,
	705, 1503, 1576, 1329, 1574, 1069, 1286, 1287, 1288, 1743,
	1292, 1235, 1502, 579, 1744, 1344, 1499, 1498, 705, 1493,
	1223, 129, 705, 1492, 1087, 1752, 1366, 873, 1363, 1364,
	705, 1416, 46, 49, 424, 1328, 1396, 1351, 1352, 1353,
	1354, 1355, 459, 1368, 461, 460, 1361, 1332, 1333, 1334,
	1335, 1336, 705, 1367, 1391, 1058, 727, 1235, 1234, 688,
	1371, 705, 1174, 705, 1081, 1259, 49, 888, 1080, 1419,
	1378, 1058, 49, 1381, 978, 727, 888, 1048, 1428, 705,
	928, 1242, 1383, 1379, 705, 704, 1370, 663, 662, 774,
	774, 774, 1442, 257, 656, 657, 774, 774, 774, 774,
	1385, 34, 572, 982, 570, 574, 575, 576, 577, 1257,
	1446, 1241, 573, 578, 1447, 1445, 656, 655, 60, 59,
	1480, 1435, 747, 1670, 944, 1574, 1439, 1074, 1453, 1515,
	727, 853, 1331, 1799, 1420, 1073, 1752, 1069, 1414, 677,
	529, 529, 1427, 774, 1072, 1135, 49, 1577, 513, 1654,
	49, 1221, 49, 49, 1488, 1488, 1578, 1449, 1275, 49,
	1235, 261, 1219, 261, 49, 1054, 889, 867, 49, 843,
	1478, 1873, 836, 1578, 1752, 736, 735, 745, 746, 738,
	739, 740, 741, 742, 743, 744, 737, 1452, 833, 748,
	840, 424, 26, 1490, 1494, 1495, 1489, 1058, 1840, 1220,
	513, 1799, 660, 649, 648, 49, 644, 978, 512, 468,
	1218, 513, 1578, 257, 735, 745, 746, 738, 739, 740,
	741, 742, 743, 744, 737, 677, 1235, 748, 1700, 1603,
	1500, 1501, 1583, 1586, 1587, 1588, 1584, 678, 1585, 1589,
	1461, 1426, 1543, 1508, 1058, 678, 21, 1202, 16, 49,
	888, 705, 832, 49, 49, 1280, 665, 664, 1528, 1529,
	661, 17, 1600, 24, 68, 424, 692, 1527, 257, 1817,
	1567, 1815, 1782, 1756, 1757, 1613, 1642, 424, 203, 1327,
	1505, 18, 19, 1496, 1555, 1340, 1339, 1258, 1564, 1556,
	233, 1171, 1170, 1143, 1076, 1526, 1075, 529, 1629, 1052,
	1546, 925, 892, 1563, 869, 1550, 825, 721, 1619, 1572,
	673, 1590, 672, 639, 544, 638, 636, 623, 540, 1604,
	1602, 975, 976, 977, 979, 1599, 503, 675, 1548, 228,
	1617, 445, 1551, 441, 410, 235, 236, 518, 774, 774,
	1621, 226, 220, 219, 208, 11, 1149, 1759, 1238, 1570,
	1571, 1628, 666, 504, 240, 1033, 1034, 1035, 1036, 239,
	1037, 145, 1630, 139, 1431, 1762, 1761, 1685, 774, 774,
	774, 774, 1686, 1687, 1683, 1587, 1588, 1682, 974, 1684,
	1681, 1091, 1092, 1047, 1675, 1867, 1829, 1652, 14, 1552,
	1659, 798, 409, 1616, 1447, 485, 1411, 626, 1838, 1618,
	1056, 1660, 1059, 1060, 257, 1263, 401, 980, 1067, 254,
	1068, 1027, 257, 1671, 1662, 1633, 915, 916, 1669, 1045,
	1264, 1465, 1095, 625, 1557, 1677, 1678, 1676, 1680, 511,
	1679, 1437, 1688, 1438, 1094, 509, 1280, 1699, 1459, 1709,
	1696, 1088, 507, 1045, 1089, 1698, 148, 882, 1697, 883,
	884, 885, 1491, 1032, 886, 682, 1649, 747, 533, 1083,
	675, 468, 881, 1730, 1836, 1707, 1458, 1647, 1708, 1668,
	1540, 1084, 873, 20, 1672, 1835, 1793, 1257, 1485, 1484,
	1483, 1745, 1173, 1482, 1481, 22, 23, 1169, 25, 249,
	250, 251, 1497, 1888, 1737, 747, 1769, 1760, 1399, 1398,
	1751, 1422, 1740, 1168, 1741, 532, 531, 435, 875, 877,
	1749, 1573, 1770, 694, 891, 8, 1, 468, 49, 1293,
	13, 1175, 774, 12, 1771, 1732, 49, 242, 1191, 1192,
	1195, 1720, 257, 1777, 675, 781, 1194, 567, 1736, 1713,
	1522, 1623, 553, 1721, 974, 1198, 1199, 1807, 1769, 1800,
	1675, 1850, 1462, 974, 1748, 541, 1750, 1289, 1319, 1675,
	1360, 1805, 1735, 1790, 1808, 675, 1446, 1803, 1812, 1447,
	1447, 1445, 469, 624, 182, 1240, 1796, 1797, 442, 1809,
	15, 1222, 1432, 1045, 1795, 1788, 1274, 1228, 681, 1280,
	1560, 510, 1343, 1280, 1438, 1230, 1231, 897, 1232, 1233,
	707, 165, 1437, 1828, 155, 1833, 700, 404, 29, 1592,
	1839, 10, 1155, 1243, 675, 166, 688, 164, 1847, 688,
	688, 688, 163, 1864, 162, 160, 1849, 1780, 1781, 1860,
	1861, 1862, 472, 1863, 1810, 200, 1811, 1458, 205, 229,
	1437, 67, 1848, 65, 66, 1876, 1877, 70, 1872, 1467,
	1612, 519, 1061, 727, 851, 851, 851, 1878, 1874, 760,
	1772, 1474, 774, 1803, 1869, 774, 1806, 774, 1885, 774,
	1266, 774, 774, 1834, 1261, 728, 1792, 1889, 468, 1224,
	49, 770, 795, 1028, 1892, 554, 933, 1893, 566, 974,
	1890, 565, 1897, 49, 1895, 1675, 1803, 202, 736, 735,
	745, 746, 738, 739, 740, 741, 742, 743, 744, 737,
	564, 675, 748, 1657, 1742, 729, 1457, 1568, 1280, 1582,
	1580, 1560, 796, 1459, 1579, 1758, 1754, 1456, 1459, 1459,
	1459, 1459, 1459, 1523, 1727, 1090, 1430, 1129, 1119, 874,
	1093, 5, 1592, 675, 1695, 1130, 1114, 4, 3, 1113,
	1112, 1458, 1111, 1109, 827, 1110, 1458, 1458, 1458, 1458,
	1458, 1107, 1108, 1106, 1085, 676, 2, 1369, 0, 0,
	1458, 204, 849, 1560, 209, 0, 0, 211, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1397, 0, 221, 222, 223, 224, 225, 261,
	0, 851, 851, 0, 1459, 851, 851, 851, 1413, 0,
	0, 46, 1438, 0, 0, 0, 1746, 1747, 1657, 0,
	1459, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 1458, 192, 851, 851, 851, 851, 0, 195,
	196, 0, 0, 0, 0, 0, 0, 678, 1458, 1417,
	0, 0, 926, 1421, 0, 0, 931, 932, 0, 851,
	0, 0, 0, 0, 183, 1437, 0, 0, 0, 0,
	0, 773, 775, 776, 777, 778, 779, 780, 0, 190,
	0, 178, 0, 468, 677, 0, 1131, 1121, 1120, 179,
	0, 0, 0, 0, 1804, 0, 678, 0, 1122, 0,
	0, 770, 0, 476, 0, 0, 770, 0, 0, 0,
	0, 1123, 0, 0, 0, 1818, 1819, 1820, 0, 0,
	0, 991, 1022, 0, 0, 0, 0, 0, 0, 0,
	0, 1560, 0, 0, 0, 1509, 0, 1510, 1511, 0,
	0, 1513, 1514, 1516, 1518, 1520, 0, 0, 186, 1280,
	181, 191, 677, 0, 1131, 1121, 1120, 0, 188, 187,
	1504, 0, 1051, 0, 0, 0, 1122, 1541, 0, 1189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	747, 1657, 0, 0, 0, 0, 0, 0, 0, 0,
	1804, 1438, 0, 1875, 736, 735, 745, 746, 738, 739,
	740, 741, 742, 743, 744, 737, 0, 1545, 748, 1547,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 1804, 0, 678, 0, 1128, 0, 0,
	0, 0, 0, 0, 1710, 0, 0, 0, 1133, 1134,
	851, 0, 0, 0, 938, 1620, 1229, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 0, 0, 0, 0, 0, 677, 0, 1131,
	1121, 1120, 851, 0, 0, 0, 1124, 1125, 1127, 1640,
	261, 1122, 1126, 851, 0, 1116, 0, 0, 0, 468,
	0, 184, 1281, 0, 1123, 1128, 1632, 185, 0, 1648,
	0, 0, 0, 0, 0, 0, 1133, 1134, 0, 0,
	1193, 0, 736, 735, 745, 746, 738, 739, 740, 741,
	742, 743, 744, 737, 0, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1650,
	0, 0, 0, 1651, 1124, 1125, 1127, 1690, 0, 49,
	1126, 0, 0, 0, 0, 0, 0, 635, 637, 0,
	0, 0, 1227, 1188, 0, 0, 0, 0, 0, 0,
	193, 0, 194, 0, 0, 0, 0, 0, 1236, 0,
	0, 0, 0, 0, 0, 1719, 0, 0, 0, 0,
	1722, 1723, 1724, 1725, 1726, 0, 189, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1128, 0, 0, 0, 0, 1265, 1268, 0, 1132, 1716,
	1717, 1133, 1134, 0, 0, 0, 0, 706, 709, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1284, 0,
	0, 0, 0, 900, 1180, 1181, 1182, 912, 0, 1124,
	1125, 1127, 1184, 1185, 1186, 1126, 0, 902, 1837, 0,
	591, 0, 592, 0, 0, 1281, 747, 0, 0, 0,
	582, 583, 0, 1783, 0, 0, 1132, 0, 1789, 0,
	424, 0, 0, 45, 572, 569, 570, 574, 575, 576,
	577, 49, 49, 0, 573, 578, 463, 464, 773, 0,
	0, 0, 0, 0, 561, 0, 0, 590, 0, 0,
	812, 0, 0, 677, 1821, 1131, 1121, 1120, 0, 0,
	0, 0, 0, 0, 1382, 0, 1664, 1122, 0, 0,
	0, 558, 559, 901, 0, 0, 1832, 607, 0, 560,
	1123, 0, 556, 557, 562, 814, 0, 0, 1393, 0,
	1841, 1842, 1843, 0, 1846, 0, 0, 0, 706, 0,
	0, 605, 0, 0, 0, 0, 0, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 0, 0, 0, 1418,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 1665, 0, 1434, 0, 49,
	0, 568, 0, 0, 0, 0, 1882, 1883, 1884, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	122, 123, 0, 124, 125, 126, 128, 127, 0, 966,
	815, 0, 0, 1325, 851, 0, 1896, 0, 71, 813,
	0, 1658, 0, 0, 819, 818, 1116, 0, 770, 770,
	0, 0, 0, 49, 49, 0, 1128, 0, 677, 0,
	1131, 1121, 1120, 49, 1597, 0, 0, 1133, 1134, 0,
	0, 0, 1122, 0, 0, 677, 593, 1131, 1121, 1120,
	0, 0, 0, 0, 0, 1123, 0, 0, 0, 1122,
	0, 0, 0, 1373, 1374, 0, 0, 0, 609, 0,
	594, 595, 1123, 0, 0, 1124, 1125, 1127, 0, 0,
	0, 1126, 0, 0, 0, 0, 1525, 0, 0, 0,
	0, 0, 0, 1386, 1387, 1388, 1389, 0, 0, 0,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	1151, 0, 72, 0, 1646, 0, 1553, 1554, 1268, 0,
	0, 0, 0, 596, 606, 602, 603, 600, 601, 599,
	598, 597, 608, 584, 585, 586, 587, 589, 0, 0,
	467, 466, 588, 49, 0, 0, 0, 49, 49, 0,
	0, 46, 49, 49, 49, 49, 49, 0, 0, 0,
	0, 1116, 0, 0, 1689, 0, 49, 0, 0, 0,
	1597, 1128, 0, 0, 0, 0, 0, 0, 1116, 604,
	0, 0, 1133, 1134, 0, 0, 0, 0, 1128, 0,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 1133,
	1134, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 0,
	1124, 1125, 1127, 0, 0, 814, 1126, 0, 49, 0,
	0, 0, 0, 1380, 0, 0, 1281, 1124, 1125, 1127,
	0, 0, 0, 1126, 49, 0, 0, 1506, 0, 0,
	1655, 1203, 1204, 0, 1205, 0, 0, 0, 0, 1208,
	677, 0, 1131, 1121, 1120, 0, 0, 1664, 995, 0,
	0, 1211, 1212, 0, 1122, 1213, 1214, 0, 1215, 1216,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	0, 677, 1706, 1131, 1121, 1120, 0, 0, 0, 0,
	815, 0, 0, 0, 0, 1122, 0, 46, 71, 813,
	0, 0, 0, 0, 819, 818, 46, 677, 1123, 1131,
	1121, 1120, 1004, 1010, 1008, 0, 0, 1005, 0, 1734,
	1003, 1122, 0, 1012, 0, 0, 1011, 997, 1007, 1009,
	1006, 1001, 0, 996, 1123, 1014, 1013, 1015, 994, 1017,
	0, 0, 1132, 1021, 1018, 1020, 1019, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 998, 999, 1132,
	0, 0, 0, 1738, 1739, 0, 0, 1634, 0, 0,
	1635, 0, 1636, 1116, 1637, 1597, 1638, 1639, 1000, 1002,
	0, 0, 0, 1128, 0, 0, 0, 0, 0, 1870,
	0, 0, 1279, 0, 1133, 1134, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 629, 0, 0, 45, 1827,
	449, 450, 451, 452, 1116, 0, 0, 0, 0, 455,
	453, 463, 464, 0, 1128, 1813, 0, 0, 1814, 0,
	0, 1816, 1124, 1125, 1127, 1133, 1134, 0, 1126, 0,
	1116, 0, 46, 0, 0, 0, 0, 0, 1826, 0,
	1128, 447, 0, 0, 45, 0, 449, 450, 451, 452,
	0, 1133, 1134, 1734, 0, 455, 453, 463, 464, 0,
	0, 0, 0, 1124, 1125, 1127, 770, 0, 0, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	1125, 1127, 0, 0, 0, 1126, 0, 1868, 770, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 1325, 382,
	369, 0, 327, 384, 295, 315, 393, 317, 318, 354,
	273, 337, 0, 312, 292, 0, 0, 0, 298, 266,
	307, 267, 296, 329, 0, 293, 0, 371, 340, 0,
	0, 0, 391, 0, 345, 0, 0, 0, 0, 0,
	332, 373, 335, 364, 326, 355, 282, 344, 386, 313,
	350, 387, 0, 0, 1132, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 380, 309,
	279, 396, 0, 353, 265, 347, 0, 0, 271, 274,
	392, 378, 303, 302, 0, 0, 0, 0, 0, 0,
	0, 331, 336, 361, 323, 1132, 0, 0, 1203, 0,
	0, 0, 0, 0, 1559, 457, 462, 299, 0, 343,
	0, 0, 0, 278, 272, 0, 328, 0, 0, 0,
	281, 1132, 300, 362, 0, 262, 367, 375, 325, 0,
	0, 379, 322, 321, 0, 0, 0, 0, 0, 0,
	314, 259, 358, 394, 383, 333, 372, 297, 308, 0,
	304, 457, 462, 0, 305, 306, 342, 356, 459, 0,
	461, 460, 0, 381, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 467, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 263, 301, 365,
	368, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 459, 0, 461, 460, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 467, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 269, 290, 376, 0, 0, 0, 0,
	1477, 1475, 1471, 1470, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 289, 283, 284, 338,
	339, 388, 389, 390, 363, 280, 0, 287, 288, 0,
	370, 0, 0, 0, 341, 0, 0, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 316, 264, 320, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 0, 0,
	324, 319, 346, 348, 357, 366, 377, 385, 360, 294,
	330, 382, 369, 0, 327, 384, 295, 315, 393, 317,
	318, 354, 273, 337, 0, 312, 292, 0, 0, 0,
	298, 266, 307, 267, 296, 329, 0, 293, 0, 371,
	340, 0, 0, 0, 391, 0, 345, 0, 0, 0,
	0, 0, 332, 373, 335, 364, 326, 355, 282, 344,
	386, 313, 350, 387, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	380, 309, 279, 396, 0, 353, 265, 347, 0, 0,
	271, 274, 392, 378, 303, 302, 0, 0, 0, 0,
	0, 0, 0, 331, 336, 361, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 343, 0, 0, 0, 278, 272, 0, 328, 0,
	0, 0, 281, 0, 300, 362, 0, 262, 367, 375,
	325, 0, 0, 379, 322, 321, 0, 0, 0, 0,
	0, 0, 314, 259, 358, 394, 383, 333, 372, 297,
	308, 0, 304, 0, 0, 0, 305, 306, 342, 356,
	0, 0, 0, 0, 0, 381, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 365, 368, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1605, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 0, 269, 290, 376, 0, 0,
	0, 0, 1477, 1475, 677, 0, 1131, 1121, 1120, 0,
	351, 0, 0, 0, 0, 1473, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 285, 289, 283,
	284, 338, 339, 388, 389, 390, 363, 280, 0, 287,
	288, 0, 370, 0, 0, 0, 341, 0, 0, 0,
	395, 0, 0, 0, 0, 0, 0, 0, 316, 264,
	320, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	0, 0, 324, 319, 346, 348, 357, 366, 377, 385,
	360, 294, 330, 382, 369, 0, 327, 384, 295, 315,
	393, 317, 318, 354, 273, 337, 0, 312, 292, 0,
	0, 0, 298, 266, 307, 267, 296, 329, 0, 293,
	0, 371, 340, 0, 0, 0, 391, 0, 345, 0,
	0, 0, 0, 0, 332, 373, 335, 364, 326, 355,
	282, 344, 386, 313, 350, 387, 0, 1128, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 1133, 1134,
	0, 349, 380, 309, 279, 396, 0, 353, 265, 347,
	0, 0, 271, 274, 392, 378, 303, 302, 0, 0,
	0, 0, 0, 0, 0, 331, 336, 361, 323, 0,
	0, 0, 0, 0, 0, 0, 1124, 1125, 1127, 0,
	0, 299, 1126, 343, 0, 0, 0, 278, 272, 0,
	328, 0, 1448, 0, 281, 0, 300, 362, 0, 262,
	367, 375, 325, 0, 0, 379, 322, 321, 0, 0,
	0, 0, 0, 0, 314, 259, 358, 394, 383, 333,
	372, 297, 308, 0, 304, 0, 0, 0, 305, 306,
	342, 356, 0, 0, 0, 0, 0, 381, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 263, 301, 365, 368, 286, 352, 275, 310, 359,
	311, 334, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 1132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 269, 290, 376,
	0, 0, 0, 0, 1477, 1475, 0, 0, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 283, 284, 338, 339, 388, 389, 390, 363, 280,
	0, 287, 288, 0, 370, 0, 0, 0, 341, 0,
	0, 0, 395, 0, 0, 0, 0, 0, 0, 0,
	316, 264, 320, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 0, 0, 324, 319, 346, 348, 357, 366,
	377, 385, 360, 294, 330, 382, 369, 0, 327, 384,
	295, 315, 393, 317, 318, 354, 273, 337, 0, 312,
	292, 0, 0, 0, 298, 266, 307, 267, 296, 329,
	0, 293, 0, 371, 340, 0, 94, 0, 391, 33,
	345, 0, 0, 0, 0, 0, 332, 373, 335, 364,
	326, 355, 282, 344, 386, 313, 350, 387, 0, 0,
	0, 45, 1142, 47, 34, 0, 1140, 0, 0, 0,
	0, 0, 0, 349, 380, 309, 279, 396, 0, 353,
	265, 347, 0, 0, 271, 274, 392, 378, 303, 302,
	0, 0, 0, 1139, 0, 0, 0, 331, 336, 361,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1248, 1138, 299, 0, 343, 0, 0, 0, 278,
	272, 0, 328, 79, 0, 0, 281, 0, 300, 362,
	0, 262, 367, 375, 325, 0, 0, 379, 322, 321,
	0, 0, 0, 0, 0, 0, 314, 259, 358, 394,
	383, 333, 372, 297, 308, 0, 304, 0, 95, 0,
	305, 306, 342, 356, 0, 0, 0, 0, 0, 381,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 263, 301, 365, 368, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 0, 122, 123, 0, 124, 125, 126, 128,
	127, 96, 97, 98, 102, 100, 99, 101, 73, 75,
	0, 71, 74, 80, 76, 77, 78, 92, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 93,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 269,
	290, 376, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 289, 283, 284, 338, 339, 388, 389, 390,
	363, 280, 0, 287, 288, 0, 370, 0, 0, 0,
	341, 0, 0, 0, 395, 72, 0, 0, 0, 0,
	0, 0, 316, 264, 320, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 0, 0, 324, 319, 346, 348,
	357, 366, 377, 385, 360, 294, 330, 382, 369, 0,
	327, 384, 295, 315, 393, 317, 318, 354, 273, 337,
	0, 312, 292, 0, 0, 0, 298, 266, 307, 267,
	296, 329, 0, 293, 0, 371, 340, 0, 94, 0,
	391, 0, 345, 0, 0, 0, 0, 0, 332, 373,
	335, 364, 326, 355, 282, 344, 386, 313, 350, 387,
	0, 0, 0, 34, 0, 702, 34, 703, 0, 0,
	0, 0, 0, 0, 0, 349, 380, 309, 279, 396,
	0, 353, 265, 347, 0, 0, 271, 274, 392, 378,
	303, 302, 0, 0, 0, 0, 0, 0, 0, 331,
	336, 361, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 343, 0, 0,
	0, 278, 272, 0, 328, 79, 0, 0, 281, 0,
	300, 362, 0, 262, 367, 375, 325, 0, 0, 379,
	322, 321, 0, 0, 0, 0, 0, 0, 314, 259,
	358, 394, 383, 333, 372, 297, 308, 0, 304, 0,
	95, 0, 305, 306, 342, 356, 0, 0, 0, 0,
	0, 381, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 263, 301, 365, 368, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 0, 122, 123, 0, 124, 125,
	126, 128, 127, 96, 97, 98, 102, 100, 99, 101,
	73, 75, 0, 71, 74, 80, 76, 77, 78, 92,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 93, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 269, 290, 376, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 289, 283, 284, 338, 339, 388,
	389, 390, 363, 280, 0, 287, 288, 0, 370, 0,
	0, 0, 341, 0, 0, 0, 395, 72, 0, 0,
	0, 0, 0, 0, 316, 264, 320, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 0, 0, 324, 319,
	346, 348, 357, 366, 377, 385, 360, 294, 330, 382,
	369, 0, 327, 384, 295, 315, 393, 317, 318, 354,
	273, 337, 0, 312, 292, 0, 0, 0, 298, 266,
	307, 267, 296, 329, 0, 293, 0, 371, 340, 0,
	0, 0, 391, 0, 345, 0, 0, 0, 0, 0,
	332, 373, 335, 364, 326, 355, 282, 344, 386, 313,
	350, 387, 0, 405, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 349, 380, 309,
	279, 396, 0, 353, 265, 347, 0, 0, 271, 274,
	392, 378, 303, 302, 0, 0, 0, 0, 0, 0,
	0, 331, 336, 361, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 343,
	0, 0, 0, 278, 272, 0, 328, 0, 0, 0,
	281, 0, 300, 362, 0, 262, 367, 375, 325, 0,
	0, 379, 322, 321, 0, 0, 0, 0, 0, 0,
	314, 259, 358, 394, 383, 333, 372, 297, 308, 0,
	304, 0, 0, 0, 305, 306, 342, 356, 0, 0,
	0, 0, 0, 381, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 263, 301, 365,
	368, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 269, 290, 376, 0, 0, 0, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 289, 283, 284, 338,
	339, 388, 389, 390, 363, 280, 0, 287, 288, 0,
	370, 0, 0, 0, 341, 0, 0, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 316, 264, 320, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 0, 0,
	324, 319, 346, 348, 357, 366, 377, 385, 360, 294,
	330, 382, 369, 0, 327, 384, 295, 315, 393, 317,
	318, 354, 273, 337, 0, 312, 292, 0, 0, 0,
	298, 266, 307, 267, 296, 329, 0, 293, 0, 371,
	340, 0, 0, 0, 391, 0, 345, 0, 0, 0,
	0, 0, 332, 373, 335, 364, 326, 355, 282, 344,
	386, 313, 350, 387, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	380, 309, 279, 396, 0, 353, 265, 347, 0, 0,
	271, 274, 392, 378, 303, 302, 0, 0, 0, 0,
	0, 0, 0, 331, 336, 361, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1544, 0, 299,
	0, 343, 0, 0, 0, 278, 272, 0, 328, 0,
	0, 0, 281, 0, 300, 362, 0, 262, 367, 375,
	325, 0, 0, 379, 322, 321, 0, 0, 0, 0,
	0, 0, 314, 259, 358, 394, 383, 333, 372, 297,
	308, 0, 304, 0, 0, 0, 305, 306, 342, 356,
	0, 0, 0, 0, 0, 381, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 365, 368, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 0, 269, 290, 376, 0, 0,
	0, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 289, 283,
	284, 338, 339, 388, 389, 390, 363, 280, 0, 287,
	288, 0, 370, 0, 0, 0, 341, 0, 0, 0,
	395, 0, 0, 0, 0, 0, 0, 0, 316, 264,
	320, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	0, 0, 324, 319, 346, 348, 357, 366, 377, 385,
	360, 294, 330, 382, 369, 0, 327, 384, 295, 315,
	393, 317, 318, 354, 273, 337, 0, 312, 292, 0,
	0, 0, 298, 266, 307, 267, 296, 329, 0, 293,
	0, 371, 340, 0, 0, 0, 391, 0, 345, 0,
	0, 0, 0, 0, 332, 373, 335, 364, 326, 355,
	282, 344, 386, 313, 350, 387, 0, 0, 0, 45,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 380, 309, 279, 396, 0, 353, 265, 347,
	0, 0, 271, 274, 392, 378, 303, 302, 0, 0,
	0, 0, 0, 0, 0, 331, 336, 361, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 343, 0, 0, 0, 278, 272, 0,
	328, 0, 0, 0, 281, 0, 300, 362, 0, 262,
	367, 375, 325, 0, 0, 379, 322, 321, 0, 0,
	0, 0, 0, 0, 314, 259, 358, 394, 383, 333,
	372, 297, 308, 0, 304, 0, 0, 0, 305, 306,
	342, 356, 0, 0, 0, 0, 0, 381, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 263, 301, 365, 368, 286, 352, 275, 310, 359,
	311, 334, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 269, 290, 376,
	0, 0, 0, 0, 0, 258, 0, 0, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 283, 284, 338, 339, 388, 389, 390, 363, 280,
	0, 287, 288, 0, 370, 0, 0, 0, 341, 0,
	0, 0, 395, 0, 0, 0, 0, 0, 0, 0,
	316, 264, 320, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 0, 0, 324, 319, 346, 348, 357, 366,
	377, 385, 360, 294, 330, 382, 369, 0, 327, 384,
	295, 315, 393, 317, 318, 354, 273, 337, 0, 312,
	292, 0, 0, 0, 298, 266, 307, 267, 296, 329,
	0, 293, 0, 371, 340, 0, 0, 0, 391, 0,
	345, 0, 0, 0, 0, 0, 332, 373, 335, 364,
	326, 355, 282, 344, 386, 313, 350, 387, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 380, 309, 279, 396, 0, 353,
	265, 347, 0, 0, 271, 274, 392, 378, 303, 302,
	524, 0, 0, 0, 0, 0, 0, 331, 336, 361,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 343, 0, 0, 0, 278,
	272, 0, 328, 0, 0, 0, 281, 0, 300, 362,
	0, 262, 367, 375, 325, 0, 0, 379, 322, 321,
	0, 0, 0, 0, 0, 0, 314, 259, 358, 394,
	383, 333, 372, 297, 308, 0, 304, 0, 0, 0,
	305, 306, 342, 356, 0, 0, 0, 0, 0, 381,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 263, 301, 365, 368, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 269,
	290, 376, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 289, 283, 284, 338, 339, 388, 389, 390,
	363, 280, 0, 287, 288, 0, 370, 0, 0, 0,
	341, 0, 0, 0, 395, 0, 0, 0, 0, 0,
	0, 0, 316, 264, 320, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 0, 0, 324, 319, 346, 348,
	357, 366, 377, 385, 360, 294, 330, 382, 369, 0,
	327, 384, 295, 315, 393, 317, 318, 354, 273, 337,
	0, 312, 292, 0, 0, 0, 298, 266, 307, 267,
	296, 329, 0, 293, 0, 371, 340, 0, 0, 0,
	391, 0, 345, 0, 0, 0, 0, 0, 332, 373,
	335, 364, 326, 355, 282, 344, 386, 313, 350, 387,
	0, 0, 0, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 380, 309, 279, 396,
	0, 353, 265, 347, 0, 0, 271, 274, 392, 378,
	303, 302, 0, 0, 0, 0, 0, 0, 0, 331,
	336, 361, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 343, 0, 0,
	0, 278, 272, 0, 328, 0, 0, 0, 281, 0,
	300, 362, 0, 262, 367, 375, 325, 0, 0, 379,
	322, 321, 0, 0, 0, 0, 0, 0, 314, 259,
	358, 394, 383, 333, 372, 297, 308, 0, 304, 0,
	0, 0, 305, 306, 342, 356, 0, 0, 0, 0,
	0, 381, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 263, 301, 365, 368, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 269, 290, 376, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 289, 283, 284, 338, 339, 388,
	389, 390, 363, 280, 0, 287, 288, 0, 370, 0,
	0, 0, 341, 0, 0, 0, 395, 0, 0, 0,
	0, 0, 0, 0, 316, 264, 320, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 0, 0, 324, 319,
	346, 348, 357, 366, 377, 385, 360, 294, 330, 382,
	369, 0, 327, 384, 295, 315, 393, 317, 318, 354,
	273, 337, 0, 312, 292, 0, 0, 0, 298, 266,
	307, 267, 296, 329, 0, 293, 0, 371, 340, 0,
	0, 0, 391, 0, 345, 0, 0, 0, 0, 0,
	332, 373, 335, 364, 326, 355, 282, 344, 386, 313,
	350, 387, 0, 0, 0, 50, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 380, 309,
	279, 396, 0, 353, 265, 347, 0, 0, 271, 274,
	392, 378, 303, 302, 0, 0, 0, 0, 0, 0,
	0, 331, 336, 361, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 343,
	0, 0, 0, 278, 272, 0, 328, 0, 0, 0,
	281, 0, 300, 362, 0, 262, 367, 375, 325, 0,
	0, 379, 322, 321, 0, 0, 0, 0, 0, 0,
	314, 0, 358, 394, 383, 333, 372, 297, 308, 0,
	304, 0, 0, 0, 305, 306, 342, 356, 0, 0,
	0, 0, 0, 381, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 263, 301, 365,
	368, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 939, 940, 941, 0, 0, 0, 0, 677, 0,
	1131, 1121, 1120, 0, 0, 0, 0, 0, 591, 0,
	592, 0, 1122, 0, 0, 0, 0, 0, 582, 583,
	0, 0, 0, 0, 0, 1123, 0, 0, 424, 0,
	0, 45, 572, 569, 570, 574, 575, 576, 577, 0,
	0, 0, 573, 578, 463, 464, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 269, 290, 376, 0, 0, 0, 558,
	559, 0, 0, 0, 0, 607, 0, 560, 351, 0,
	556, 557, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 0, 0, 0, 285, 289, 283, 284, 338,
	339, 388, 389, 390, 363, 280, 0, 287, 288, 0,
	370, 1116, 0, 0, 341, 0, 0, 0, 395, 0,
	0, 1128, 0, 0, 0, 0, 316, 264, 320, 568,
	0, 0, 1133, 1134, 547, 0, 276, 277, 0, 0,
	324, 319, 346, 348, 357, 366, 377, 385, 360, 294,
	330, 546, 0, 0, 0, 0, 545, 0, 0, 0,
	0, 0, 0, 591, 0, 592, 0, 0, 0, 0,
	1124, 1125, 1127, 582, 583, 0, 1126, 0, 0, 0,
	0, 0, 0, 424, 0, 0, 45, 572, 569, 570,
	574, 575, 576, 577, 0, 0, 0, 573, 578, 463,
	464, 548, 0, 0, 593, 0, 543, 561, 0, 0,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 594, 595,
	0, 0, 0, 0, 558, 559, 0, 0, 0, 0,
	607, 0, 560, 0, 0, 993, 557, 562, 0, 0,
	0, 0, 677, 0, 1131, 1121, 1120, 0, 0, 580,
	0, 0, 0, 0, 605, 0, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	995, 596, 606, 602, 603, 600, 601, 599, 598, 597,
	608, 584, 585, 586, 587, 589, 0, 0, 467, 466,
	588, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 1132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1865, 0, 0, 604, 0, 0,
	0, 0, 0, 0, 1004, 1010, 1008, 0, 0, 1005,
	0, 0, 1003, 0, 0, 1012, 0, 0, 1011, 997,
	1007, 1009, 1006, 1001, 0, 996, 0, 1014, 1013, 1015,
	994, 1017, 0, 0, 0, 1021, 1018, 1020, 1019, 593,
	1016, 0, 0, 0, 0, 1116, 0, 0, 0, 998,
	999, 0, 0, 0, 0, 1128, 0, 0, 0, 0,
	0, 609, 0, 594, 595, 0, 1133, 1134, 0, 0,
	1000, 1002, 0, 0, 0, 677, 0, 1131, 1121, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1122,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 1124, 1125, 1127, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 596, 606, 602, 603,
	600, 601, 599, 598, 597, 608, 584, 585, 586, 587,
	589, 547, 0, 467, 466, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 0, 0, 545, 0, 0, 0, 0, 0, 0,
	591, 0, 592, 0, 0, 677, 0, 1131, 1121, 1120,
	582, 583, 604, 0, 0, 0, 0, 0, 1704, 1122,
	424, 0, 0, 45, 572, 569, 570, 574, 575, 576,
	577, 0, 1123, 0, 573, 578, 463, 464, 548, 1705,
	0, 0, 0, 543, 561, 0, 0, 590, 1116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1128, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 1133,
	1134, 558, 559, 0, 0, 0, 0, 607, 845, 560,
	546, 0, 556, 557, 562, 545, 1132, 1656, 0, 0,
	0, 0, 591, 0, 592, 0, 0, 0, 0, 0,
	0, 605, 582, 583, 0, 0, 0, 1124, 1125, 1127,
	0, 0, 424, 1126, 0, 45, 572, 569, 570, 574,
	575, 576, 577, 1448, 0, 0, 573, 578, 463, 464,
	548, 0, 0, 0, 0, 543, 561, 0, 1116, 590,
	0, 568, 0, 0, 0, 0, 0, 0, 1128, 0,
	0, 0, 0, 0, 0, 547, 0, 0, 0, 1133,
	1134, 0, 0, 558, 559, 850, 0, 0, 0, 607,
	0, 560, 546, 0, 556, 557, 562, 545, 0, 0,
	0, 0, 0, 0, 591, 0, 592, 0, 0, 0,
	0, 0, 0, 605, 582, 583, 0, 1124, 1125, 1127,
	0, 0, 0, 1126, 424, 0, 727, 45, 572, 569,
	570, 574, 575, 576, 577, 0, 593, 0, 573, 578,
	463, 464, 548, 0, 0, 0, 0, 543, 561, 0,
	0, 590, 0, 568, 0, 0, 0, 0, 609, 0,
	594, 595, 0, 0, 0, 0, 0, 0, 0, 1132,
	0, 0, 0, 0, 0, 558, 559, 0, 0, 0,
	0, 607, 0, 560, 0, 0, 556, 557, 562, 0,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 0, 0,
	0, 0, 0, 596, 606, 602, 603, 600, 601, 599,
	598, 597, 608, 584, 585, 586, 587, 589, 593, 0,
	467, 466, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	609, 0, 594, 595, 0, 0, 0, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 606, 602, 603, 600,
	601, 599, 598, 597, 608, 584, 585, 586, 587, 589,
	593, 0, 467, 466, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 609, 0, 594, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 677, 0, 1131, 1121,
	1120, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 606, 602,
	603, 600, 601, 599, 598, 597, 608, 584, 585, 586,
	587, 589, 547, 0, 467, 466, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 546,
	0, 0, 0, 0, 545, 0, 0, 0, 0, 0,
	0, 591, 0, 592, 0, 677, 0, 1131, 1121, 1120,
	0, 582, 583, 604, 0, 0, 0, 0, 0, 1122,
	0, 424, 0, 0, 45, 572, 569, 570, 574, 575,
	576, 577, 1123, 0, 0, 573, 578, 463, 464, 548,
	0, 0, 0, 0, 543, 561, 0, 0, 590, 1116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1128,
	0, 677, 0, 0, 547, 0, 0, 0, 0, 0,
	1133, 1134, 558, 559, 850, 0, 0, 0, 607, 0,
	560, 546, 0, 556, 557, 562, 545, 1562, 0, 0,
	0, 0, 0, 591, 0, 592, 0, 0, 0, 0,
	0, 0, 605, 582, 583, 0, 0, 0, 1124, 1125,
	1127, 0, 0, 424, 1126, 0, 45, 572, 569, 570,
	574, 575, 576, 577, 1103, 0, 0, 573, 578, 463,
	464, 548, 0, 0, 0, 0, 543, 561, 1116, 0,
	590, 0, 568, 0, 0, 0, 0, 0, 1128, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 0, 1133,
	1134, 0, 0, 0, 558, 559, 0, 0, 0, 0,
	607, 0, 560, 546, 0, 556, 557, 562, 545, 0,
	0, 0, 0, 0, 0, 591, 0, 592, 0, 0,
	0, 0, 0, 0, 605, 582, 583, 1124, 1125, 1127,
	0, 0, 0, 1126, 0, 424, 0, 0, 45, 572,
	569, 570, 574, 575, 576, 577, 0, 593, 0, 573,
	578, 463, 464, 548, 0, 0, 0, 0, 543, 561,
	0, 0, 590, 0, 568, 0, 0, 0, 0, 609,
	0, 594, 595, 0, 0, 0, 0, 0, 0, 0,
	1132, 0, 0, 0, 0, 0, 558, 559, 0, 0,
	0, 0, 607, 0, 560, 0, 0, 556, 557, 562,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 0,
	0, 0, 0, 0, 596, 606, 602, 603, 600, 601,
	599, 598, 597, 608, 584, 585, 586, 587, 589, 593,
	0, 467, 466, 588, 0, 0, 0, 0, 0, 0,
	0, 677, 0, 1131, 1121, 1120, 568, 0, 0, 0,
	0, 609, 0, 594, 595, 1122, 0, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 606, 602, 603,
	600, 601, 599, 598, 597, 608, 584, 585, 586, 587,
	589, 593, 0, 467, 466, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 0, 594, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1661, 0, 580, 0, 0, 0,
	0, 0, 0, 0, 1128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1133, 1134, 0, 596, 606,
	602, 603, 600, 601, 599, 598, 597, 608, 584, 585,
	586, 587, 589, 547, 0, 467, 466, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 0, 0, 1124, 1125, 1127, 0, 0, 0, 1126,
	0, 0, 591, 0, 592, 0, 0, 0, 0, 1448,
	0, 0, 582, 583, 604, 0, 0, 0, 0, 0,
	0, 0, 424, 0, 0, 45, 572, 569, 570, 574,
	575, 576, 577, 0, 0, 0, 573, 578, 463, 464,
	548, 0, 0, 0, 0, 0, 561, 0, 0, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 677, 0,
	1131, 1121, 1120, 558, 559, 0, 0, 0, 0, 607,
	0, 560, 1122, 0, 556, 557, 562, 0, 0, 0,
	0, 0, 0, 0, 591, 1123, 592, 0, 0, 0,
	0, 0, 0, 605, 582, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 45, 572, 569,
	570, 574, 575, 576, 577, 0, 0, 0, 573, 578,
	463, 464, 0, 0, 0, 1132, 0, 0, 561, 0,
	0, 590, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 559, 0, 0, 0,
	0, 607, 0, 560, 0, 0, 556, 557, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1128, 0, 0, 0, 0, 0, 0, 593, 0,
	0, 0, 1133, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	609, 0, 594, 595, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 1125, 1127, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 34, 580, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 606, 602, 603, 600,
	601, 599, 598, 597, 608, 584, 585, 586, 587, 589,
	593, 0, 467, 466, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 609, 838, 594, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 606, 602,
	603, 600, 601, 599, 598, 597, 608, 584, 585, 586,
	587, 589, 1132, 0, 467, 466, 588, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	0, 122, 123, 604, 124, 125, 126, 128, 127, 96,
	97, 98, 102, 100, 99, 101, 73, 75, 0, 71,
	74, 80, 76, 77, 78, 92, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 93, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72,
}

var yyPact = [...]int16{
	543, -1000, -255, -1000, -1000, 1487, 1313, 443, -1000, -1000,
	-1000, 995, 498, 494, 491, 287, 477, 1007, 499, 975,
	503, 437, -1000, -199, -170, -1000, -51, 502, -1000, 1259,
	-1000, 4705, 4705, 4705, -1000, 353, 1007, 1007, 437, 182,
	437, 1507, 410, 1505, 743, -1000, 571, -1000, 1621, 568,
	-1000, 437, 975, 740, -1000, -1000, -1000, -1000, 289, 232,
	117, 2008, -145, 60, -1000, -1000, -1000, -1000, -1000, 1420,
	-1000, -1000, -1000, 1420, 127, 1486, 1420, 1486, -1000, 1420,
	1486, 107, 107, 107, 107, 107, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1485, 1484, -1000, 1420, 1420, 1420, 1420,
	1420, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1471, 154, 1471, 1432, 1432, -1000, -1000, 2008,
	2008, 1479, 975, 1007, 1503, 1498, 975, -212, 975, 975,
	1681, -1000, -1000, -1000, 204, 975, 1583, 5848, 4705, 6994,
	975, -1000, 1580, 531, 975, 5084, -1000, 1556, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1476, 782, 1007, 359, 197,
	1407, 465, 389, 330, 1107, 358, -1000, -1000, -1000, 806,
	-1000, 1007, -1000, 1698, -1000, -1000, 352, -1000, 351, 733,
	990, 975, 1475, 181, 1473, 3053, 947, -1000, -270, -1000,
	55, -1000, -1000, 906, 107, 1420, -1000, 107, 864, 107,
	107, -1000, -1000, 584, 1562, 584, 584, 584, 584, 974,
	974, -90, -90, -1000, -1000, -1000, 946, -1000, 934, 1471,
	-1000, -1000, -1000, 928, -1000, 975, 1007, 1468, 1497, 975,
	975, 1617, 464, -1000, -1000, 1610, 1604, 1352, -1000, -1000,
	202, -1000, -1000, 410, 1007, -1000, 567, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1480, -1000, 310, 530, 6230, 232, -1000, -1000, -1000, -1000,
	440, -1000, 1696, 1639, 368, 15, -173, 1105, -1000, -1000,
	1460, -1000, -1000, 8397, -1000, 1092, 1076, -1000, 1074, 1071,
	27, 1007, -1000, -193, 123, 50, -1000, -1000, 1407, -1000,
	1459, 8397, 1598, -1000, 1566, 926, -1000, 3007, -1000, -218,
	-1000, -1000, -1000, -218, -1000, -1000, -1000, 1407, -1000, 1458,
	1457, -1000, 1455, -1000, -1000, 1407, 1407, 1407, 565, -1000,
	-1000, -1000, -1000, -1000, 1346, 584, 107, 584, 1344, 1343,
	584, 584, -1000, -1000, 1053, 606, -1000, -1000, -1000, -1000,
	1257, -1000, 1235, -1000, 144, 141, -1000, 1342, 1401, -1000,
	1228, 1399, 1496, 282, 975, 1454, 1452, 1419, 437, 1419,
	1636, 267, 975, 1681, 398, 1681, 410, 6612, 1007, 328,
	1007, -1000, -1000, 393, 4702, -1000, -1000, 1225, -1000, 299,
	1420, 473, 473, -195, 343, 306, -173, 1407, 1449, -1000,
	440, 678, -1000, 8397, 211, 1407, 1407, 1407, 1407, 8305,
	-1000, -1000, 547, -1000, -1000, -1000, 2432, 2432, 2432, 2432,
	2432, 2432, 2432, -1000, -1000, -1000, -1000, 77, -1000, -218,
	-1000, 994, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 563,
	562, -1000, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
	8397, 1407, 1550, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
	1407, 1407, 1407, 1407, 2710, 1407, 1407, 1407, 1407, -1000,
	-1000, -1000, -1000, -1000, -1000, -173, 1448, -1000, -1000, -1000,
	733, -1000, 8397, 398, 899, 136, -1000, 1393, 1328, 911,
	1312, -1000, 8981, -1000, 1114, -1000, 826, -1000, 801, 1309,
	7784, 8213, 8213, 6612, -1000, -1000, 584, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 107, 962, 107, 45, 40,
	-1000, 925, -1000, 908, 282, 1007, 975, 1307, 1392, -1000,
	293, 1446, 398, 440, -1000, 1657, 1703, -1000, 1419, 975,
	-1000, 452, 1641, -1000, -1000, 1635, -1000, 1391, -1000, -1000,
	1341, 1681, -1000, 1444, 1007, -1000, -1000, 311, 1007, -1000,
	-1000, -1000, -1000, -1000, 821, 440, 1589, -1000, -1000, -1000,
	777, -1000, -1000, 759, 263, 766, -1000, 1007, -173, 1443,
	8397, 440, 1220, 271, 8397, 8397, 802, -1000, 610, 7180,
	811, 621, 2432, 2432, 2432, 2432, 2432, 2432, 2432, 2432,
	2432, 2432, 2432, 2432, 2432, 2432, 2432, 2400, 1011, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1040, -1000, 1419, 972, 1114, 1114, 1114, 1215, 8305,
	672, 1240, 1240, 52, 8305, 52, 52, 52, 52, 52,
	111, -1000, -268, -1000, -1000, 5848, 6612, 8213, 8213, 7355,
	8397, 8213, 8213, 8213, 1587, 717, 672, 972, 1634, 1114,
	1114, 1114, 1114, -1000, 1114, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 126, -1000, -1000, -1000, -1000, -1000, -1000,
	8213, 8213, 8213, 8213, -1000, 1007, 1407, 678, 1217, -108,
	8397, 1441, 907, -1000, 1305, -218, -1000, -1000, -1000, -145,
	-1000, -1000, -1000, -1000, 1114, 8213, 1196, 1215, -1000, 788,
	-1000, 561, 1196, 788, 1196, 1407, -1000, 584, -1000, 584,
	-1000, -1000, 1284, 1275, 1267, 1438, 1436, -201, 906, 282,
	1208, 1204, 1642, 1655, 1419, 1620, 1537, -1000, 1114, 1597,
	1007, -1000, -1000, -1000, -1000, -1000, 240, 713, 1007, 8160,
	1289, -1000, 680, 1435, 140, 390, 1490, 2396, 191, -1000,
	1036, 703, 959, 701, 700, 688, 684, 673, 671, 664,
	655, 650, 646, -1000, -1000, -1000, -1000, -1000, 1694, -1000,
	-1000, -1000, 1677, 1434, 1433, 440, 678, 1202, 821, -1000,
	-64, 610, 634, -1000, -1000, 845, -1000, -1000, 544, 2432,
	2432, 2432, -1000, -1000, -1000, -1000, 811, 2432, 2432, 2432,
	2207, 544, 2089, 76, 1308, 52, 14, 14, 48, 48,
	48, 48, 48, 110, 110, -1000, -76, -1000, 1420, -1000,
	-1000, -1000, 1114, 1114, -1000, -1000, -1000, -1000, 8397, -1000,
	1114, -1000, -218, 956, -1000, -1000, 937, 1407, -1000, 1196,
	1196, 843, 1388, 8826, 1420, -1000, 1420, 1432, -1000, -1000,
	163, 1420, 162, -1000, -1000, -1000, -1000, 1432, -1000, -1000,
	-1000, -1000, -1000, 1420, 1420, -1000, -1000, 1420, 1420, -1000,
	1420, 1420, 793, 1351, 1340, 1196, 8213, -1000, 694, -1000,
	8397, 1114, 975, -1000, -1000, -1000, -1000, -1000, -1000, 1196,
	1114, 1385, 1196, 1196, 1198, -1000, 8397, 271, 1492, -1000,
	-1000, 748, -1000, 1251, 1221, -1000, -1000, 1196, 8213, -238,
	-1000, -1000, -1000, 1037, -1000, -1000, 4320, -238, -238, 8213,
	-1000, -1000, -1000, -1000, -201, 282, 440, 1665, 1429, 1205,
	1665, 821, 1586, 8397, 8397, 1657, -1000, 1419, -1000, -1000,
	1587, -1000, -1000, 790, -1000, 1419, 1301, 233, 190, 8397,
	-1000, 2662, -1000, 8160, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1657, 8397, -1000, -1000, -1000,
	-1000, -1000, 1007, 3114, 1007, 1007, 1007, 438, 8734, 1017,
	-1000, -1000, -1000, -1000, -1000, 975, 1143, 4323, 680, 680,
	4323, 680, 680, 440, 440, 1428, 1427, 304, -1000, 1007,
	-1000, -96, 2396, 1007, -1000, 905, -1000, -1000, 785, 865,
	785, 785, 785, 785, 785, 251, 862, 382, 473, 473,
	1007, 440, 1193, 271, 821, 1490, -1000, -1000, -1000, -1000,
	544, 544, 544, -1000, 2207, 544, 256, -1000, 2432, 2432,
	138, -1000, -1000, 672, -1000, 61, -1000, -218, -1000, -1000,
	2753, 1011, 8397, -1000, 294, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2753, 2432, 2432,
	2432, 2432, -70, 1212, 708, -1000, 8397, 722, -1000, -1000,
	-1000, -1000, -1000, -1000, 386, 1007, 678, -1000, 1689, -113,
	216, -1000, -1000, -1000, -1000, -1000, 1407, -1000, -1000, 559,
	-1000, -1000, 1114, 1665, 1128, 1171, 821, 8397, 398, -201,
	821, -1000, -1000, 1692, 598, 726, 1382, -1000, 732, 1642,
	1114, 1517, -1000, -1000, -77, 8397, 8160, 7202, 672, 7202,
	-1000, 8160, 407, 1642, 645, 7639, 443, 952, 931, 1381,
	401, -1000, 3174, 797, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1007,
	1673, 1672, 1669, 1668, 8832, 211, 8397, 8397, 1633, -1000,
	-1000, 4323, -1000, -1000, -1000, -1000, -1000, 1163, 1159, 440,
	440, 1425, 1407, 1157, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 733, 733, 1152, 1141, 821, -1000, 1490,
	-1000, -1000, 2432, 544, 544, 20, -1000, 937, -1000, 1114,
	1420, 1114, 670, -1000, -1000, 1114, 1270, 935, 377, 361,
	1407, -62, -1000, 672, 8397, 975, -1000, 271, 473, 473,
	-1000, -1000, -1000, 205, 839, 849, 840, 829, 82, -1000,
	1654, 501, 5466, -1000, 821, 1665, 821, 1490, 672, 1137,
	1665, 1490, -1000, 1547, 8397, 8397, 8397, -1000, 1586, -1000,
	8213, -1000, -1000, -222, 672, 2662, 2894, -1000, -1000, 198,
	8249, -1000, 1586, 8160, 679, -1000, 705, -1000, 7202, 969,
	975, 1145, -1000, 1314, 1386, -1000, -1000, -1000, 1596, 960,
	533, 1007, 228, 4705, -1000, -1000, 1370, 3556, 32, -1000,
	-1000, -1000, 633, 558, 966, -1000, 1560, -1000, -1000, 3114,
	1570, -1000, -1000, -1000, -1000, -1000, 7202, -1000, 1348, 1114,
	713, 236, -1000, 341, 1135, 1133, 440, 1007, -1000, 2396,
	-1000, -1000, 374, 821, 1490, -1000, 544, -1000, -1000, -1000,
	-1000, -1000, 2432, -1000, -1000, 2432, -1000, 2432, -1000, 2432,
	-1000, 2432, 2432, 1114, 901, 672, 1418, -1000, -1000, -1000,
	823, -1000, 787, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	179, -1000, 1651, 1114, -1000, 1490, 821, -1000, -1000, -1000,
	821, -1000, 1544, 672, 672, -1000, -1000, 1338, 8397, 7729,
	-1000, -1000, -1000, -1000, 2261, 8565, 427, 2517, 283, 975,
	-1000, 283, 1266, 931, 975, -1000, -1000, 972, 931, 931,
	931, 931, 931, -1000, 1534, 1531, -1000, 1528, 1521, 1527,
	975, 1127, 960, 554, 1407, -1000, 1010, -1000, -1000, -1000,
	1596, 1629, -1000, 3938, 1370, 32, 1369, -1000, -7, -5,
	7692, 6612, 584, -1000, -1000, -1000, -1000, -1000, 1007, 2146,
	-1000, 180, 229, 185, -1000, 199, 821, 821, 1125, 1114,
	-1000, 975, 1490, -1000, 1793, 1793, 1793, 1793, 1793, 31,
	-1000, -1000, 1007, -1000, -1000, -1000, 555, 8397, -1000, -1000,
	-1000, 1490, -1000, 1665, 931, 672, -1000, -1000, 2935, -1000,
	-1000, 8734, -1000, 8734, 7202, -1000, 1176, 1407, -1000, 1665,
	931, 1297, -1000, 1166, -1000, 627, 1386, 1417, 1491, 1013,
	-1000, -1000, -1000, -1000, 1520, -1000, 1519, -1000, -1000, -1000,
	-1000, -88, 488, 486, 484, 1007, -1000, 1419, -1000, 1369,
	32, 36, -1000, -1000, -1000, -1000, 672, 625, -1000, 1367,
	-1000, 7202, -1000, -1000, 210, -1000, 1490, 1490, -1000, -1000,
	1414, -1000, -1000, -1000, -1000, -1000, -1000, 1114, 227, -116,
	1121, 6612, 1119, -1000, 672, -1000, 1663, 1353, 426, 8160,
	3848, 7639, 1345, 972, 1407, -1000, 1075, 1007, 1657, 1297,
	-1000, 1665, 972, 8397, -1000, -1000, 8397, 1413, -1000, 8397,
	-1000, -1000, -1000, -1000, 1411, 1407, 1407, 1407, 1069, -1000,
	-1000, -1000, -1000, -12, -10, -1000, 8397, 2679, -1000, -1000,
	-1000, -1000, 1007, -1000, 1543, -74, -128, -1000, -1000, -1000,
	1114, 8397, 1661, 1648, -1000, 2078, 679, -1000, -1000, 1568,
	1277, 1339, -1000, -1000, 7876, 1114, 1102, 553, 1069, 1642,
	-1000, 1657, -1000, 672, 672, 398, 672, -167, 398, 398,
	398, 963, 1007, -1000, -1000, -1000, 672, 7476, 1062, -1000,
	1542, -1000, -1000, -1000, -1000, 8397, 8397, 2961, 303, -1000,
	1407, -1000, -1000, 1333, 1007, 1007, -1000, -1000, 1642, 1052,
	1047, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1045, 1045, 1045, 554, -1000, -1000, -1000, -79, 672, 1348,
	418, 1684, -1000, 1407, -1000, 1419, 552, -1000, -1000, -1000,
	-1000, -167, -1000, -1000, -1000, -88, -123, -1000, 972, 1339,
	1114, 1007, -1000, -1000, -131, 1315, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1966, 14, 67, 1965, 1964, 1963, 1962, 1961, 1955,
	1953, 1952, 1950, 1949, 29, 24, 47, 28, 35, 1948,
	1947, 1946, 1945, 1941, 86, 1940, 1939, 1938, 1937, 79,
	1936, 1935, 1934, 1933, 75, 193, 81, 124, 1331, 26,
	39, 48, 45, 1927, 17, 1926, 1925, 58, 1924, 42,
	1920, 1919, 99, 1917, 1916, 4, 84, 40, 104, 1915,
	1914, 92, 1514, 1910, 1891, 97, 1888, 1886, 87, 27,
	68, 3, 22, 7, 1885, 377, 6, 1883, 89, 1882,
	1879, 1876, 1873, 30, 1870, 57, 73, 8, 60, 1866,
	10, 74, 46, 16, 9, 5, 51, 31, 1861, 15,
	41, 23, 1860, 70, 1859, 118, 49, 64, 85, 0,
	53, 83, 1852, 1851, 1850, 1213, 93, 43, 11, 52,
	71, 1849, 82, 100, 56, 96, 95, 1847, 98, 1844,
	1843, 1841, 1839, 1838, 1897, 884, 117, 77, 55, 1835,
	1832, 88, 391, 407, 101, 389, 1103, 80, 1825, 1824,
	1822, 1817, 105, 1815, 59, 102, 20, 507, 1812, 1811,
	1808, 1807, 1806, 1804, 1801, 94, 1800, 91, 54, 110,
	792, 62, 1797, 1792, 1791, 1788, 72, 1786, 1782, 1780,
	69, 1778, 1775, 111, 66, 116, 107, 115, 1774, 1772,
	76, 78, 1760, 106, 112, 1758, 103, 44, 21, 353,
	63, 1757, 1752, 1751, 1, 2, 1742, 1741, 1739, 1737,
	1735, 1730, 65, 1727, 90, 1725, 13, 1723, 1720, 50,
	1719, 1716, 1715, 1714, 1713, 349, 755, 1711, 108, 121,
	1709, 109,
}

var yyR1 = [...]uint8{
	0, 221, 222, 222, 1, 1, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 20, 20, 20, 20, 20, 20,
	20, 224, 224, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 27, 27, 7, 8, 8, 8, 227, 227,
	47, 47, 92, 92, 9, 9, 9, 9, 10, 10,
	201, 201, 200, 202, 202, 11, 11, 11, 11, 11,
	195, 195, 195, 195, 195, 12, 12, 198, 198, 198,
	14, 14, 14, 14, 15, 15, 16, 16, 16, 18,
	18, 97, 97, 101, 101, 101, 102, 102, 102, 102,
	213, 213, 121, 121, 223, 223, 228, 228, 228, 228,
	228, 228, 228, 193, 193, 193, 193, 194, 194, 194,
	194, 196, 196, 197, 197, 197, 197, 197, 197, 199,
	199, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 13, 13, 28, 28, 70, 70, 107, 107, 174,
	174, 174, 175, 175, 175, 175, 175, 175, 177, 177,
	178, 178, 113, 113, 179, 179, 23, 159, 160, 160,
	160, 160, 160, 160, 160, 160, 146, 146, 146, 124,
	124, 124, 124, 124, 124, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 185, 185, 185, 185, 185, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 187, 188,
	189, 181, 181, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 136, 136, 136,
	136, 136, 136, 180, 180, 176, 176, 176, 176, 128,
	128, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 127, 127, 127, 127, 127, 127, 127, 132, 132,
	129, 129, 129, 129, 129, 129, 129, 129, 125, 125,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 133, 133, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 145, 145, 134, 134, 143, 143, 144,
	144, 144, 135, 135, 135, 142, 142, 142, 139, 139,
	140, 140, 141, 141, 141, 137, 137, 137, 138, 138,
	138, 148, 170, 170, 170, 172, 172, 173, 173, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 158, 158, 190, 190, 191, 191, 192,
	192, 169, 169, 169, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 157, 157, 167, 167,
	168, 168, 165, 165, 165, 166, 152, 152, 152, 152,
	152, 153, 153, 154, 154, 154, 154, 149, 149, 150,
	150, 151, 151, 183, 183, 183, 217, 217, 217, 217,
	217, 217, 218, 218, 184, 184, 155, 155, 156, 156,
	163, 163, 163, 163, 229, 229, 161, 161, 161, 162,
	162, 162, 230, 24, 25, 25, 26, 26, 26, 31,
	31, 31, 29, 29, 30, 30, 36, 36, 35, 35,
	37, 37, 37, 37, 112, 112, 112, 111, 111, 214,
	214, 214, 214, 214, 39, 39, 40, 40, 41, 41,
	42, 42, 42, 204, 204, 203, 203, 205, 205, 205,
	205, 205, 205, 205, 205, 54, 54, 90, 90, 90,
	93, 93, 43, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 119, 119, 118, 118, 118, 117, 117, 48,
	48, 48, 50, 49, 49, 49, 49, 51, 51, 53,
	53, 52, 52, 55, 55, 55, 55, 56, 56, 91,
	91, 38, 38, 38, 38, 38, 38, 38, 104, 104,
	58, 58, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 67, 67,
	67, 67, 67, 67, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 34, 34, 68, 68, 68,
	75, 69, 69, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 65, 65, 65, 65, 65, 65, 65, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 231, 231, 66, 66, 66, 66, 32, 32, 32,
	32, 32, 120, 120, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 123, 123, 123, 123,
	123, 123, 123, 123, 79, 79, 33, 33, 77, 77,
	78, 106, 106, 80, 80, 76, 76, 76, 206, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 81,
	81, 82, 82, 215, 215, 216, 83, 83, 84, 84,
	85, 86, 86, 86, 87, 87, 87, 87, 88, 88,
	88, 60, 60, 60, 60, 60, 60, 89, 89, 89,
	89, 94, 94, 71, 71, 73, 73, 72, 74, 95,
	95, 99, 96, 96, 100, 100, 100, 100, 100, 21,
	22, 98, 98, 98, 114, 114, 114, 105, 105, 103,
	103, 109, 110, 110, 110, 110, 115, 115, 116, 116,
	207, 207, 207, 208, 208, 208, 209, 209, 210, 211,
	211, 212, 220, 220, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	225, 226,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 4, 1, 1, 0, 1, 0, 3, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 4, 4, 0, 1,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 9, 6, 6, 8, 8, 5,
	8, 7, 4, 0, 2, 4, 6, 2, 4, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 1, 2,
	1, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 2, 2, 3, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 2, 1, 1, 1, 1,
	4, 5, 4, 4, 4, 1, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 5, 2, 3, 3, 2, 3, 2,
	3, 3, 2, 2, 3, 4, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 5, 5, 8,
	8, 13, 11, 1, 1, 2, 2, 10, 8, 9,
	7, 7, 5, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 8, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 4, 4, 4, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 4, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 6, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 2,
	1, 4, 5, 5, 5, 5, 6, 4, 4, 4,
	6, 6, 8, 6, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 9, 7, 5, 4, 4, 3, 3,
	3, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 2, 2, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 0, 2, 1, 3, 5, 3, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	3, 0, 2, 1, 3, 1, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	3, 1, 2, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 2, 0, 2, 2, 0, 1, 4, 1,
	3, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -221, -1, -19, -20, -23, 126, 127, -222, 390,
	-159, 58, -217, -218, 275, -179, 135, 148, 168, 169,
	360, 133, 372, 373, 150, 375, 79, -103, 138, -160,
	-146, -109, 63, 36, 61, 134, 134, 134, 136, 212,
	136, -109, -109, -76, 139, 61, -115, 63, -52, -115,
	61, 133, -105, 139, 375, 372, 373, 340, 133, 60,
	59, -147, -124, -128, -125, -130, -129, -131, -109, -126,
	-127, 248, 352, 245, 249, 246, 251, 252, 253, 120,
	250, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 254, 266, 33, 155, 238, 239, 240, 243,
	242, 244, 241, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 228, 230, 231, 233, 234, 235, 237, 236, -147,
	-147, -109, 56, 211, -109, -109, -105, 213, -105, 56,
	-193, 19, 192, 193, 205, 56, 81, 123, 25, 123,
	-105, -52, 81, -52, 304, -163, -229, 355, 37, -146,
	-148, -152, -149, -150, -151, -164, -153, 142, 140, 150,
	388, 144, 145, 275, -157, 146, 134, 151, 73, 81,
	-185, 142, -188, 56, 283, 289, 140, 151, 150, 388,
	71, 143, 25, 362, 364, 31, 32, -141, 391, 277,
	-139, 286, -134, 58, -134, -133, 247, -135, 58, -134,
	-135, -134, -135, -137, 249, -137, -137, -137, -137, 58,
	58, -134, -134, -134, -134, -134, 58, -143, 58, -132,
	232, -143, -144, 58, -144, 56, 57, -52, -109, 56,
	56, -52, -213, 385, 386, -52, -52, -196, -194, 8,
	9, 10, 206, -52, 26, -110, -116, -109, 297, 147,
	-108, -115, 131, 193, 363, 80, 25, 27, 283, 289,
	192, 84, 120, 16, 85, 199, 372, 373, 119, 76,
	341, 126, 52, 333, 334, 331, 197, 343, 344, 332,
	290, 204, 20, 31, 385, 10, 28, 153, 24, 113,
	128, 194, 89, 88, 156, 160, 161, 26, 154, 75,
	200, 202, 19, 55, 146, 11, 362, 13, 14, 377,
	364, 139, 138, 100, 376, 134, 50, 8, 122, 29,
	386, 97, 46, 151, 203, 48, 98, 17, 335, 336,
	34, 350, 162, 115, 53, 40, 378, 81, 379, 73,
	56, 304, 198, 79, 15, 51, 163, 380, 148, 201,
	384, 99, 129, 340, 49, 195, 381, 132, 196, 6,
	346, 33, 152, 47, 170, 133, 291, 382, 87, 137,
	74, 169, 5, 150, 9, 383, 54, 57, 337, 338,
	339, 38, 86, 12, 149, 354, 77, -124, -116, -108,
	-52, 26, 131, -52, -161, 59, -110, 71, -108, 36,
	58, -184, 56, 81, -155, -109, 151, -157, 61, 134,
	-183, 372, 373, -225, 58, -157, -157, 61, 134, 151,
	61, 151, 73, 19, -109, 9, 151, 151, -184, 63,
	-52, 58, -181, 363, 16, 58, -186, 58, -187, 63,
	64, 65, 66, 73, -136, 72, -58, 278, -65, 331,
	334, 333, 279, 74, 75, -109, 349, 348, -115, -189,
	65, 392, -140, 287, 65, -137, -134, -137, 65, 61,
	-137, -137, -138, 120, 119, 33, -138, -138, -138, -138,
	-145, 63, -145, -142, 354, 355, -142, 65, 65, -143,
	65, -52, -109, 58, 56, -52, -52, 25, 136, 25,
	-174, 25, 56, 59, 206, -193, -109, 123, 57, -113,
	142, -152, 150, 131, 90, -110, -229, -168, -165, -109,
	151, 10, 9, 19, 146, 140, 150, 388, -183, 61,
	58, -38, -57, 81, -62, 31, 26, 9, 76, -225,
	-61, -58, -76, -206, -74, -75, 120, 121, 109, 110,
	117, 82, 122, -65, -63, -64, -66, -209, 179, 63,
	64, -109, 62, 72, 65, 66, 67, 68, 73, -115,
	309, -72, 48, 49, 341, 342, 343, 344, 350, 345,
	85, 38, 40, 254, 278, 279, 331, 339, 338, 337,
	335, 336, 333, 334, 387, 139, 332, 115, 340, 276,
	61, 61, 61, 61, -183, 150, -155, -109, 374, -185,
	388, -136, -225, 58, -38, 25, 31, 65, -186, 58,
	-187, -176, 387, -176, -225, -134, 58, -134, 58, 58,
	-225, -225, -225, 123, 60, -138, -137, -138, 60, 60,
	-138, -138, 61, 61, 120, 60, 59, 60, 238, 238,
	60, 59, 60, 59, 58, 57, 56, -167, -168, -65,
	-109, -52, 58, 58, -2, -3, -4, 6, -225, -105,
	-2, -175, 19, 176, 177, -52, -194, -90, -109, 151,
	-196, -193, -110, -109, -224, 134, 151, -109, 142, -152,
	-162, -110, 63, 65, 60, 59, -134, -166, 281, -134,
	-154, 172, 173, 33, 174, -154, 374, 151, 151, -183,
	-225, 58, -168, -226, 80, 79, 97, 60, -38, -59,
	100, 81, 98, 99, 84, 106, 105, 116, 109, 110,
	111, 112, 113, 114, 115, 107, 108, 387, 119, 90,
	91, 92, 93, 94, 95, 96, 101, 102, 103, 104,
	-104, -225, -75, -225, -225, -225, -57, -2, -69, -225,
	-38, 124, 125, -62, -225, -62, -62, -62, -62, -62,
	-62, -210, 277, -176, 63, 123, 123, -225, -225, -225,
	-225, -225, -225, -225, -225, -79, -38, -225, 41, -225,
	-225, -225, -225, -231, -225, -231, -231, -231, -231, -231,
	-231, -123, 120, 249, 155, 240, -126, -125, 255, 254,
	-225, -225, -225, -225, -183, 58, -184, -38, -90, 60,
	58, 364, 59, 60, -186, 63, 60, 280, 122, -124,
	-226, 60, 60, 60, -36, 24, -35, -69, -37, -38,
	111, -115, -35, -38, -35, -110, -138, -137, 63, -137,
	288, 288, 65, 65, -167, -109, -52, 60, 58, 58,
	-90, -168, -83, 15, -26, 5, -24, -230, -2, -52,
	137, 21, 6, 8, 9, 10, 19, -107, 59, 25,
	-196, -223, 58, -109, 150, -109, -170, -172, 354, -171,
	57, 147, 71, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 61, -165, -86, 27, 28, -184, 56, 73,
	175, -184, 56, -155, -183, 58, -38, -168, 60, -180,
	174, -38, -38, -67, 73, 81, 74, 75, -62, 21,
	22, 23, -68, -72, -75, 69, 100, 98, 99, 84,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -128, 239, -123, -126, -120,
	61, 63, 61, -76, -109, -226, -226, -226, 59, -226,
	-2, -61, 63, -109, -61, -109, 391, -110, -110, -35,
	-35, -38, -122, 120, 245, 155, 240, 234, 264, 265,
	285, 238, 286, 227, 219, 224, 237, 235, 221, 236,
	220, 233, 230, 243, 242, 244, 255, 246, 251, 253,
	252, 250, -38, -37, -37, -35, -29, 24, -77, -78,
	86, -76, 19, -226, -226, -226, -226, -226, 247, -35,
	-36, -35, -35, -35, -156, -109, -225, -226, 60, 360,
	361, -38, 58, 65, 60, -141, -226, -35, 59, -226,
	-226, -112, -111, 25, -109, 63, 123, -226, -226, -225,
	-138, -138, 60, 60, 60, 58, 58, -91, 376, -167,
	60, 60, -87, 17, 16, -5, -3, -225, 21, 24,
	-31, 44, 45, -25, -226, 25, -156, 194, -106, 86,
	-109, -197, -199, 214, -17, -14, -6, -8, -7, -10,
	-9, -11, -12, -13, -21, -3, 139, -15, -16, -27,
	10, 9, 20, 33, 198, 199, 204, 200, 149, -28,
	-22, 8, 340, 160, 161, 56, -228, -109, 109, 90,
	63, -146, 59, 58, 58, 372, 373, 140, -169, 56,
	-171, 354, 58, 356, 61, -158, 90, 63, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 9, 10,
	58, 58, -168, -226, 60, -170, 347, 73, 74, 75,
	-62, -62, -62, -68, -62, -62, -62, -34, 156, 80,
	354, -226, -226, -38, -226, -211, -212, 63, -226, -226,
	59, 57, 59, -134, -134, -134, -144, 225, -134, 225,
	-144, -134, -134, -134, -134, -134, -134, 25, 59, 11,
	59, 11, -226, -35, -80, -78, 89, -38, -226, -115,
	-226, -226, -226, -226, 60, 59, -38, -180, 56, 60,
	-182, 60, 60, -226, -37, -214, 389, -111, 111, -116,
	-214, -214, -36, -91, -167, -168, -56, 12, 58, 60,
	-56, -170, -88, 19, 34, -38, -84, -85, -38, -83,
	-2, -29, 70, -2, -177, 57, 195, 214, -38, 390,
	-199, 214, -197, -83, -38, -57, -24, -24, -24, -201,
	-109, -200, -24, -220, -219, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, -109, -109, -109, -195,
	40, 201, 202, 203, -57, -62, -109, -225, -52, 60,
	-228, -109, -228, -228, -228, -228, -228, -168, -168, 58,
	58, 151, -109, -173, -171, -109, 65, -190, 56, 77,
	65, -190, -190, -190, -190, -190, -191, 190, 191, 65,
	-192, -191, 65, -154, -154, -156, -168, 60, -180, -170,
	-169, -34, 80, -62, -62, 238, 392, 59, -176, -122,
	120, -120, -38, -137, 61, -122, -62, -62, -62, -62,
	351, -83, 88, -38, 87, 143, -109, -226, 10, 9,
	360, 361, 60, 215, 366, 367, 162, 368, 174, 369,
	370, -225, 123, -226, -56, 60, 60, -170, -38, -90,
	-91, -170, 9, 100, 59, 18, 59, -86, -87, -226,
	-30, 47, -178, 354, -38, -197, -198, -199, -199, -197,
	390, 88, -87, 87, -18, -14, -15, -17, 214, -103,
	11, -47, -52, -40, -41, -42, -43, -54, -75, -225,
	-52, 59, -202, -119, 196, 25, -96, -121, 216, -100,
	299, 298, -110, 309, -98, 297, 249, 296, -190, 59,
	-109, 11, 11, 11, 11, -199, 214, -70, -69, -70,
	-107, 19, 60, 60, -168, -168, 58, -225, 60, 59,
	-184, -184, 60, 60, -170, -169, -62, 288, -212, -226,
	-226, -226, 59, -226, -226, 59, -226, 19, -226, 59,
	-226, 19, -225, -33, 346, -38, -52, -180, -154, -154,
	354, 65, 16, 65, 65, 65, 65, 367, 162, 369,
	16, -226, 163, -83, 111, -170, -56, -170, -169, 60,
	-56, -169, 42, -38, -38, -85, -88, -35, 388, 390,
	-199, 88, 88, -88, -197, 89, 89, -198, -53, 29,
	-52, -52, -47, -227, 59, 11, 57, 33, 59, -48,
	-50, -49, -51, 46, 50, 52, 47, 48, 49, 53,
	-119, -40, -225, -118, 163, -117, 25, -115, 63, -200,
	-109, 197, -124, 59, -96, 216, -97, -101, 300, 302,
	90, 123, -114, -109, 63, 31, 33, -219, 29, -198,
	-226, -106, 194, -207, 207, 81, 60, 60, -168, -109,
	-171, 143, -170, -169, -62, -62, -62, -62, -62, -62,
	-226, 63, 58, 65, 65, 371, -115, 16, -226, -169,
	-170, -170, 43, -39, 11, -38, 88, -199, 390, -15,
	-18, 139, -16, 139, 390, 88, -92, 163, -52, -92,
	57, -40, -52, -95, -99, -76, -41, -42, -42, -41,
	-42, 46, 46, 46, 51, 46, 51, 46, -49, -115,
	-226, -55, 54, 138, 55, -225, -117, 19, -100, -97,
	59, 301, 303, 304, 56, 77, -38, -110, -138, -156,
	88, 214, 195, -208, 208, 207, -170, -170, 60, -226,
	-52, -169, -226, -226, -226, -226, -226, -32, 100, 354,
	-156, 123, -215, -216, -38, -169, -56, -40, 88, 89,
	-57, -57, -60, 33, 38, -2, -225, -225, -56, -40,
	-56, -39, 59, 90, -45, -44, 56, 57, -46, 56,
	-44, 46, 46, -204, 354, 134, 134, 134, -93, -109,
	-2, -101, -102, 305, 302, 308, 90, -198, 210, 209,
	-169, -169, 58, -226, 352, 53, 357, 60, -110, -226,
	-83, 59, -81, 13, 139, -197, -18, -18, -94, 56,
	-95, -71, -73, -72, -225, -2, -89, -109, -93, -83,
	-56, -56, -99, -38, -38, 58, -38, 58, -225, -225,
	-225, -226, 59, 302, 306, 307, -38, 390, -156, 43,
	353, 358, -226, -216, -82, 14, 16, 390, 30, -94,
	59, -226, -226, -226, 59, 123, -226, -87, -83, -90,
	-203, -205, 377, 378, 379, 380, 381, 382, 383, 384,
	-90, -90, -90, -118, -109, 88, 60, 43, -38, -69,
	88, 151, -73, 38, -2, -225, -109, -109, -87, 60,
	60, 59, -226, -226, -226, -55, 354, 139, 9, -71,
	-2, 123, -205, -204, 357, -95, -226, -109, 358,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 819, 1, 3,
	6, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 427, 428, 429, 432, 0, 0, 820, 0,
	169, 213, 213, 213, 821, 0, 0, 0, 817, 0,
	817, 0, 745, 0, 0, -2, 0, 827, 0, 541,
	826, 817, 0, 0, 433, 430, 431, 165, 0, 440,
	0, 176, 342, 338, 180, 181, 182, 183, 184, 325,
	260, 288, 289, 325, 312, 332, 325, 332, 295, 325,
	332, 345, 345, 345, 345, 345, 303, 304, 305, 306,
	307, 308, 309, 0, 0, 280, 325, 325, 325, 325,
	325, 286, 287, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 327, 278, 327, 329, 329, 276, 277, 177,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 167, 442, 0, 445, 170,
	171, 172, 173, 174, 175, 0, 434, 436, 0, 423,
	0, 0, 0, 0, 0, 0, 396, 397, 186, 0,
	188, 0, 190, 0, 192, 193, 0, 195, 197, 434,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 344,
	340, 339, 259, 0, 345, 325, 313, 345, 0, 345,
	345, 296, 297, 348, 0, 348, 348, 348, 348, 0,
	0, 335, 335, 283, 284, 285, 0, 271, 0, 327,
	279, 273, 274, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 149, 0, 121, 117,
	118, 119, 116, 0, 0, 746, 0, 822, 823, 824,
	-2, 828, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 22, 542, 829,
	0, 818, 162, 0, 0, 0, 446, 448, 825, 444,
	0, 406, 0, 0, 0, 437, 384, 0, 392, -2,
	0, 424, 425, 836, 1000, 0, 0, 387, 389, 0,
	423, 436, 187, 0, 0, 0, 194, 196, 0, 200,
	201, 836, 0, 231, 0, 0, 214, 0, 217, -2,
	220, 221, 222, 255, 224, 225, 226, 0, 228, 325,
	325, 251, 0, 560, 561, 0, 0, 0, 0, 229,
	230, 343, 179, 341, 0, 348, 345, 348, 0, 0,
	348, 348, 298, 349, 0, 0, 299, 300, 301, 302,
	0, 323, 0, 281, 0, 0, 282, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	436, 29, 163, 0, 0, 447, 443, 0, 400, 325,
	325, 0, 0, 0, 0, 0, 423, 0, 0, 391,
	0, 0, 551, 836, 556, 558, 0, 0, 0, 836,
	603, 604, 605, 606, 607, 608, 836, 836, 836, 836,
	836, 836, 836, 635, 636, 637, 638, 0, 640, -2,
	750, 745, 752, 753, 754, 755, 756, 757, 758, 0,
	0, 798, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 671, 681, 681, 681,
	681, 681, 681, 681, 0, 0, 0, 0, 0, 837,
	385, 386, 388, 390, 394, 423, 0, 437, 212, 189,
	434, 191, 836, 0, 0, 0, 232, 0, 0, 0,
	0, 219, 0, 223, 0, 247, 0, 249, 0, 0,
	-2, 836, 836, 0, 326, 290, 348, 292, 333, 334,
	293, 294, 350, 346, 347, 345, 0, 345, 0, 0,
	322, 0, 330, 0, 0, 0, 0, 0, 398, 399,
	325, 0, 0, 0, -2, 766, 0, 452, 0, 0,
	-2, 0, 0, 150, 151, 147, 122, 120, 507, 508,
	0, 0, 747, 104, 0, 31, 32, 437, 436, 30,
	441, 449, 450, 451, 352, 0, 771, 404, 405, 403,
	434, 413, 414, 0, 0, 434, 435, 436, 423, 0,
	836, 0, 0, 253, 836, 836, 0, 1001, 554, 836,
	0, 0, 836, 836, 836, 836, 836, 836, 836, 836,
	836, 836, 836, 836, 836, 836, 836, 0, 0, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	557, 0, 574, 0, 0, 0, 551, 36, 0, 836,
	601, 0, 0, 626, 836, 627, 628, 629, 630, 631,
	632, 639, 0, 749, 751, 0, 0, 836, 836, 836,
	836, 836, 836, 836, 462, 0, 735, 0, 0, 0,
	0, 0, 0, 673, 0, 674, 675, 676, 677, 678,
	679, 680, 726, 0, 728, 729, 730, 731, 732, 733,
	836, -2, 836, 836, 395, 0, 0, 0, 0, 0,
	836, 209, 0, 215, 0, 255, 218, 256, 257, 342,
	227, 248, 250, 252, 0, 836, 0, 0, 468, 474,
	470, 0, 0, 474, 0, 0, 291, 348, 324, 348,
	336, 337, 0, 0, 0, 0, 0, 549, 1000, 0,
	0, 0, 774, 0, 0, 456, 459, 454, 36, 0,
	0, 153, 154, 155, 156, 157, 0, 741, 0, 0,
	0, 23, 106, 0, 0, 437, 381, 353, 0, 355,
	0, 373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 401, 402, 772, 773, 407, 0, 415,
	416, 408, 0, 0, 0, 0, 0, 0, 352, 422,
	0, 552, 553, 555, 578, 0, 580, 582, 562, 836,
	836, 836, 566, 597, 598, 599, 0, 836, 836, 836,
	595, 570, 0, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 623, 0, 634, 325, 624,
	692, 693, 0, 0, 745, 576, 577, 600, 836, 797,
	36, 621, 255, 0, 622, 633, 0, 746, 748, 0,
	0, 0, 0, -2, 325, 697, 325, 329, 700, 701,
	702, 325, 705, 707, 708, 709, 710, 329, 712, 713,
	714, 715, 716, 325, 325, 719, 720, 325, 325, 723,
	325, 325, 0, 0, 0, 0, 836, 463, 743, 738,
	836, 0, 0, 668, 669, 670, 672, 682, 727, 0,
	0, 467, 0, 0, 0, 438, 836, 253, 202, 205,
	206, 0, 233, 0, 0, 258, 641, 0, 836, 479,
	647, 471, 475, 0, 477, 478, 0, 479, 479, -2,
	310, 311, 328, 331, 549, 0, 0, 547, 0, 0,
	547, 352, 778, 836, 836, 766, 38, 0, 457, 458,
	462, 460, 461, 453, 37, 0, 158, 0, 0, 836,
	509, 19, 123, 0, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 766, 836, 82, 83, 452,
	452, 452, 0, 452, 0, 0, 0, 70, 836, 0,
	809, 42, 43, 143, 144, 0, 0, -2, 106, 106,
	-2, 106, 106, 0, 0, 0, 0, 0, 351, 0,
	356, 0, 0, 0, 359, 0, 374, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 352, 381, 254, 579, 581, 583,
	563, 564, 565, 567, 595, 571, 0, 568, 836, 836,
	0, 559, 575, 602, -2, 0, 839, 255, 648, 649,
	0, 0, 836, 694, 345, 698, 699, 703, 704, 706,
	711, 717, 718, 721, 722, 724, 725, 0, 836, 836,
	836, 836, 0, 766, 0, 739, 836, 0, 666, 667,
	683, 684, 685, 686, 0, 0, 0, 198, 0, 0,
	0, 211, 216, 642, 469, 643, 0, 476, 472, 0,
	644, 645, 0, 547, 0, 0, 352, 836, 0, 549,
	352, 13, 33, 0, 0, 775, 767, 768, 771, 774,
	36, 464, 455, -2, 160, 836, 148, 0, 742, 0,
	126, 0, 0, 774, 0, 551, 819, 0, 0, 58,
	-2, 60, 0, 0, 842, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 65, 66, 67, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 147, 105,
	107, -2, 108, 109, 110, 111, 112, 0, 0, 0,
	0, 0, 382, 0, 357, 362, 360, 363, 375, 376,
	364, 365, 366, 367, 368, 369, 370, 377, 378, 371,
	372, 379, 380, 434, 434, 0, 0, 352, 421, 381,
	420, 569, 836, 596, 572, 0, 838, 0, 841, 0,
	325, 0, 0, 695, 696, 0, 0, 0, 0, 0,
	0, 736, 665, 744, 836, 0, 439, 253, 0, 0,
	207, 208, 210, 0, 0, 0, 0, 0, 0, 244,
	0, 0, 0, 646, 352, 547, 352, 381, 548, 0,
	547, 381, 779, 0, 836, 836, 836, 770, 778, 39,
	836, 465, 17, 0, 159, 18, 0, 77, 124, 0,
	0, 127, 778, 0, 88, 86, 82, 89, 0, 0,
	0, 0, 50, 0, 486, 488, 489, 490, 522, 0,
	524, 0, 0, 0, 64, 523, 54, 0, 0, 802,
	102, 103, 0, 0, 0, -2, 0, 813, 810, 0,
	68, 71, 72, 73, 74, 75, 0, 141, 146, 0,
	741, 0, 24, 830, 0, 0, 0, 0, 354, 0,
	409, 410, 0, 352, 381, 418, 573, 625, 840, 650,
	654, 651, 836, 653, 655, 836, 657, 836, 659, 836,
	661, 836, 836, 0, 0, 740, 0, 199, 203, 204,
	0, 235, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 480, 0, 0, 473, 381, 352, 10, 8, 550,
	352, 12, 0, 776, 777, 769, 34, 484, 836, 0,
	78, 128, 125, 140, 0, 0, 0, 0, 52, 0,
	540, -2, 0, 0, 0, 48, 49, 0, 0, 0,
	0, 0, 0, 529, 0, 0, 532, 0, 0, 0,
	0, 0, 0, 543, 0, 525, 0, 527, 528, 61,
	522, 0, 62, 0, 55, 0, 57, 91, 0, 0,
	836, 0, 348, 814, 815, 816, 812, 843, 0, 0,
	142, 0, 0, 833, 831, 0, 352, 352, 0, 0,
	358, 0, 381, 419, 0, 0, 0, 0, 0, 687,
	664, 737, 0, 234, 236, 245, 0, 836, 482, 7,
	11, 381, 780, 547, 0, 161, 20, 79, 0, 84,
	85, 836, 87, 836, 0, 90, 0, 0, 539, 547,
	0, 547, 51, 484, 799, 0, 487, 518, 520, 0,
	515, 530, 531, 533, 0, 535, 0, 537, 538, 491,
	492, 493, 0, 0, 0, 0, 526, 0, 803, 56,
	0, 0, 94, 95, 804, 805, 806, 0, 808, 69,
	76, 0, 148, 26, 0, 832, 381, 381, 25, 383,
	0, 417, 652, 656, 658, 660, 662, 0, 0, 0,
	0, 0, 0, 763, 765, 9, 759, 485, 0, 0,
	0, 0, 791, 0, 0, -2, 0, 0, 766, 547,
	47, 547, 0, 836, 512, 519, 836, 0, 513, 836,
	514, 534, 536, 505, 0, 0, 0, 0, 0, 510,
	-2, 92, 93, 0, 0, 99, 836, 0, 834, 835,
	27, 28, 0, 663, 0, 0, 0, 412, 246, 481,
	0, 836, 761, 0, 80, 0, 0, 88, 40, 0,
	791, 781, 793, 795, 836, 36, 0, 787, 0, 774,
	46, 766, 800, 801, 516, 0, 521, 0, 0, 0,
	0, 524, 0, 96, 97, 98, 807, 0, 0, 688,
	0, 691, 483, 764, 35, 836, 836, 0, 0, 41,
	0, 796, -2, 0, 0, 0, 53, 45, 774, 0,
	0, 495, 497, 498, 499, 500, 501, 502, 503, 504,
	0, 0, 0, 543, 511, 21, 411, 689, 762, 760,
	0, 0, 794, 0, -2, 0, 789, 788, 44, 517,
	494, 0, 544, 545, 546, 493, 0, 81, 0, 784,
	36, 0, 496, 506, 0, 792, -2, 790, 690,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 390,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 391, 3, 392, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:425
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:426
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:434
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:439
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:459
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:479
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:500
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:516
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:533
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:553
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:568
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:579
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:591
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:618
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:632
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:659
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:684
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:690
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:704
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:718
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:756
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:774
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:783
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:798
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:813
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:819
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:829
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:833
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:840
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:852
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:864
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:874
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:880
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:893
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:894
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:898
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:902
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:907
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:917
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:921
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:925
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:929
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:935
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:952
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:962
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:977
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:984
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:991
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1006
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1016
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1038
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1045
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1074
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1103
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1113
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1134
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1141
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1145
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1156
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1160
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1180
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1217
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1218
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1222
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1223
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1224
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1244
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1326
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1338
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1348
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1353
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1359
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1363
		{
			yyVAL.exprs = nil
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1367
		{
			yyVAL.empty = struct{}{}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.empty = struct{}{}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1372
		{
			yyVAL.bytes = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1380
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.bytes = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1389
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1393
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1397
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1401
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1405
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.expr = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1414
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.expr = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1423
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1428
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1432
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.bytes = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1441
		{
			yyVAL.bytes = nil
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1447
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1454
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1460
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1464
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1473
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1477
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1481
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1485
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1489
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1495
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1500
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1511
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1528
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1541
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1546
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1551
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1556
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1562
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1567
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1572
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1577
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1582
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1587
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1592
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1597
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1602
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1611
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1621
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1626
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1631
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1638
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1645
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1658
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1663
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1668
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1674
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1680
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1686
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1693
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1699
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1713
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1717
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1731
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1765
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1792
		{
			yyVAL.sequence = &Sequence{}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1796
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1801
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1806
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1811
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1816
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1821
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1826
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1831
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1836
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1841
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1846
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1851
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1856
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1863
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1892
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.bytes = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1998
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2120
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2195
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.optVal = nil
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2204
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2221
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2225
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2231
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2239
		{
			yyVAL.optVal = nil
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2247
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2260
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2264
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2291
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2332
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2336
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2360
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2370
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2383
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2387
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2391
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2395
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2407
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2419
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2430
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2440
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2444
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2460
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.indexPartition = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2478
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2484
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2488
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2504
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2508
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2512
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2516
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2520
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2524
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2528
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2584
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2589
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2596
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 409:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2603
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 410:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2610
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 411:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 412:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2641
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2645
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2653
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 417:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 418:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 419:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2761
		{
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2792
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2811
		{
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2812
		{
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2843
		{
			setAllowComments(yylex, true)
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.bytes2 = nil
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.str = UnionStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.str = UnionAllStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2871
		{
			yyVAL.str = UnionDistinctStr
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2876
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2884
		{
			yyVAL.str = SQLCacheStr
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.str = DistinctStr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = StraightJoinHint
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.selectExprs = nil
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2917
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.overExpr = nil
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 483:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.strs = []string{}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3058
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3062
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3086
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3091
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3095
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3130
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3138
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3142
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3179
		{
			yyVAL.str = JoinStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3183
		{
			yyVAL.str = JoinStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3187
		{
			yyVAL.str = JoinStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.str = StraightJoinStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3199
		{
			yyVAL.str = LeftJoinStr
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.str = LeftJoinStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.str = RightJoinStr
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.str = RightJoinStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.str = NaturalJoinStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3221
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.indexHints = nil
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3262
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3267
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3271
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.columns = nil
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3290
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3298
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3302
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3306
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3310
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.str = ""
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3330
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3340
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.str = IsNullStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.str = IsNotNullStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.str = IsTrueStr
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.str = IsNotTrueStr
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.str = IsFalseStr
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.str = IsNotFalseStr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.str = EqualStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.str = LessThanStr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.str = GreaterThanStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.str = LessEqualStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.str = GreaterEqualStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.str = NotEqualStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.str = PosixRegexStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3469
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.expr = nil
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3478
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3498
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3508
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3614
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3622
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3636
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3640
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3644
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3652
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3682
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 652:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3733
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 656:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 658:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 660:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3765
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3769
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 662:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3773
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 663:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3777
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 664:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3789
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3871
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3875
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.str = ""
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.str = BooleanModeStr
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 690:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.str = QueryExpansionStr
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3921
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.expr = nil
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.str = string("")
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.expr = nil
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4139
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4143
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4164
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = &NullVal{}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4198
		{
			yyVAL.exprs = nil
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = nil
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4232
		{
			yyVAL.orderBy = nil
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4242
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4246
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4252
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.str = AscScr
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.str = AscScr
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4265
		{
			yyVAL.str = DescScr
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.limit = nil
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.str = ""
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.str = ForUpdateStr
		}
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.str = ShareModeStr
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4316
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4325
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 786:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4329
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4336
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4344
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4348
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.updateExprs = nil
		}
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4363
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4367
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4383
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4389
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4399
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4403
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4409
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4415
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4419
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4425
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4429
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4438
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4442
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4448
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4461
		{
			yyVAL.bytes = []byte("charset")
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4468
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4472
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4476
		{
			yyVAL.expr = &Default{}
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4481
		{
			yyVAL.empty = struct{}{}
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.empty = struct{}{}
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.str = ""
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4488
		{
			yyVAL.str = IgnoreStr
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4499
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4503
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4507
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4513
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4525
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4531
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4535
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4539
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4545
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4553
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4559
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4563
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4581
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4588
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4594
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4598
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4771
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4780
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
