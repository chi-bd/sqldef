// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const STATUS = 57495
const VARIABLES = 57496
const RESTRICT = 57497
const CASCADE = 57498
const NO = 57499
const ACTION = 57500
const PERMISSIVE = 57501
const RESTRICTIVE = 57502
const PUBLIC = 57503
const CURRENT_USER = 57504
const SESSION_USER = 57505
const PAD_INDEX = 57506
const FILLFACTOR = 57507
const IGNORE_DUP_KEY = 57508
const STATISTICS_NORECOMPUTE = 57509
const STATISTICS_INCREMENTAL = 57510
const ALLOW_ROW_LOCKS = 57511
const ALLOW_PAGE_LOCKS = 57512
const DISTANCE = 57513
const M = 57514
const EUCLIDEAN = 57515
const COSINE = 57516
const BEFORE = 57517
const AFTER = 57518
const EACH = 57519
const ROW = 57520
const SCROLL = 57521
const CURSOR = 57522
const OPEN = 57523
const CLOSE = 57524
const FETCH = 57525
const PRIOR = 57526
const FIRST = 57527
const LAST = 57528
const DEALLOCATE = 57529
const INSTEAD = 57530
const OF = 57531
const OUTPUT = 57532
const DEFERRABLE = 57533
const INITIALLY = 57534
const IMMEDIATE = 57535
const DEFERRED = 57536
const CONCURRENTLY = 57537
const SQL = 57538
const SECURITY = 57539
const BEGIN = 57540
const START = 57541
const TRANSACTION = 57542
const COMMIT = 57543
const ROLLBACK = 57544
const BIT = 57545
const TINYINT = 57546
const SMALLINT = 57547
const SMALLSERIAL = 57548
const MEDIUMINT = 57549
const INT = 57550
const INTEGER = 57551
const SERIAL = 57552
const BIGINT = 57553
const BIGSERIAL = 57554
const INTNUM = 57555
const REAL = 57556
const DOUBLE = 57557
const PRECISION = 57558
const FLOAT_TYPE = 57559
const DECIMAL = 57560
const NUMERIC = 57561
const SMALLMONEY = 57562
const MONEY = 57563
const TIME = 57564
const TIMESTAMP = 57565
const DATETIME = 57566
const YEAR = 57567
const DATETIMEOFFSET = 57568
const DATETIME2 = 57569
const SMALLDATETIME = 57570
const CHAR = 57571
const VARCHAR = 57572
const VARYING = 57573
const BOOL = 57574
const CHARACTER = 57575
const VARBINARY = 57576
const NCHAR = 57577
const NVARCHAR = 57578
const NTEXT = 57579
const UUID = 57580
const TEXT = 57581
const TINYTEXT = 57582
const MEDIUMTEXT = 57583
const LONGTEXT = 57584
const CITEXT = 57585
const BLOB = 57586
const TINYBLOB = 57587
const MEDIUMBLOB = 57588
const LONGBLOB = 57589
const JSON = 57590
const JSONB = 57591
const ENUM = 57592
const GEOMETRY = 57593
const POINT = 57594
const LINESTRING = 57595
const POLYGON = 57596
const GEOMETRYCOLLECTION = 57597
const MULTIPOINT = 57598
const MULTILINESTRING = 57599
const MULTIPOLYGON = 57600
const VECTOR = 57601
const VARIADIC = 57602
const ARRAY = 57603
const NOW = 57604
const GETDATE = 57605
const BPCHAR = 57606
const TEXT_PATTERN_OPS = 57607
const NULLX = 57608
const AUTO_INCREMENT = 57609
const APPROXNUM = 57610
const SIGNED = 57611
const UNSIGNED = 57612
const ZEROFILL = 57613
const ZONE = 57614
const AUTOINCREMENT = 57615
const DATABASES = 57616
const TABLES = 57617
const VSCHEMA_TABLES = 57618
const EXTENDED = 57619
const FULL = 57620
const PROCESSLIST = 57621
const NAMES = 57622
const CHARSET = 57623
const GLOBAL = 57624
const SESSION = 57625
const ISOLATION = 57626
const LEVEL = 57627
const READ = 57628
const WRITE = 57629
const ONLY = 57630
const REPEATABLE = 57631
const COMMITTED = 57632
const UNCOMMITTED = 57633
const SERIALIZABLE = 57634
const NEW = 57635
const CONCAT_NULL_YIELDS_NULL = 57636
const CURSOR_CLOSE_ON_COMMIT = 57637
const QUOTED_IDENTIFIER = 57638
const ARITHABORT = 57639
const FMTONLY = 57640
const NOCOUNT = 57641
const NOEXEC = 57642
const NUMERIC_ROUNDABORT = 57643
const ANSI_DEFAULTS = 57644
const ANSI_NULL_DFLT_OFF = 57645
const ANSI_NULL_DFLT_ON = 57646
const ANSI_NULLS = 57647
const ANSI_PADDING = 57648
const ANSI_WARNINGS = 57649
const FORCEPLAN = 57650
const SHOWPLAN_ALL = 57651
const SHOWPLAN_TEXT = 57652
const SHOWPLAN_XML = 57653
const IMPLICIT_TRANSACTIONS = 57654
const REMOTE_PROC_TRANSACTIONS = 57655
const XACT_ABORT = 57656
const CURRENT_TIMESTAMP = 57657
const DATABASE = 57658
const CURRENT_DATE = 57659
const CURRENT_TIME = 57660
const LOCALTIME = 57661
const LOCALTIMESTAMP = 57662
const UTC_DATE = 57663
const UTC_TIME = 57664
const UTC_TIMESTAMP = 57665
const REPLACE = 57666
const CONVERT = 57667
const CAST = 57668
const SUBSTR = 57669
const SUBSTRING = 57670
const GROUP_CONCAT = 57671
const SEPARATOR = 57672
const INHERIT = 57673
const LEAD = 57674
const LAG = 57675
const MATCH = 57676
const AGAINST = 57677
const BOOLEAN = 57678
const LANGUAGE = 57679
const WITH = 57680
const WITHOUT = 57681
const PARSER = 57682
const QUERY = 57683
const EXPANSION = 57684
const UNUSED = 57685
const VIRTUAL = 57686
const STORED = 57687
const GENERATED = 57688
const ALWAYS = 57689
const IDENTITY = 57690
const SEQUENCE = 57691
const INCREMENT = 57692
const MINVALUE = 57693
const CACHE = 57694
const CYCLE = 57695
const OWNED = 57696
const NONE = 57697
const CLUSTERED = 57698
const NONCLUSTERED = 57699
const REPLICATION = 57700
const COLUMNSTORE = 57701
const INCLUDE = 57702
const HOLDLOCK = 57703
const NOLOCK = 57704
const NOWAIT = 57705
const PAGLOCK = 57706
const ROWLOCK = 57707
const TABLOCK = 57708
const UPDLOCK = 57709
const READUNCOMMITTED = 57710
const DEFINER = 57711
const INVOKER = 57712
const TYPECAST = 57713
const CHECK = 57714
const OVER = 57715

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 428,
	-2, 164,
	-1, 45,
	123, 831,
	-2, 826,
	-1, 260,
	123, 834,
	-2, 830,
	-1, 419,
	61, 398,
	-2, 395,
	-1, 449,
	123, 832,
	-2, 257,
	-1, 570,
	123, 832,
	-2, 257,
	-1, 591,
	278, 841,
	-2, 737,
	-1, 645,
	278, 841,
	-2, 468,
	-1, 679,
	5, 36,
	-2, 14,
	-1, 685,
	5, 36,
	-2, 16,
	-1, 827,
	278, 841,
	-2, 468,
	-1, 1000,
	278, 841,
	-2, 327,
	-1, 1076,
	278, 841,
	-2, 468,
	-1, 1144,
	60, 106,
	-2, 213,
	-1, 1147,
	60, 106,
	-2, 213,
	-1, 1201,
	5, 37,
	-2, 603,
	-1, 1280,
	5, 36,
	-2, 15,
	-1, 1296,
	197, 63,
	-2, 524,
	-1, 1331,
	278, 841,
	-2, 145,
	-1, 1332,
	278, 841,
	-2, 145,
	-1, 1336,
	60, 106,
	-2, 184,
	-1, 1480,
	90, 828,
	-2, 816,
	-1, 1576,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1750,
	5, 36,
	-2, 787,
	-1, 1775,
	5, 36,
	-2, 59,
	-1, 1847,
	5, 37,
	-2, 788,
	-1, 1879,
	5, 36,
	-2, 790,
	-1, 1901,
	5, 37,
	-2, 791,
}

const yyPrivate = 57344

const yyLast = 9344

var yyAct = [...]int16{
	572, 553, 1678, 1806, 773, 1856, 1696, 1089, 1768, 1807,
	1803, 1738, 31, 1598, 1773, 774, 1679, 1612, 41, 42,
	43, 692, 1124, 582, 1441, 1760, 1658, 1051, 1611, 1111,
	1600, 1112, 68, 68, 68, 1596, 131, 134, 135, 1459,
	1122, 1474, 1586, 879, 1671, 1460, 1477, 906, 1449, 1105,
	1263, 483, 1300, 1125, 1471, 1468, 62, 1456, 1274, 1297,
	936, 31, 1269, 894, 1203, 1108, 27, 411, 921, 999,
	715, 1492, 628, 1194, 213, 61, 1084, 1033, 1361, 976,
	1352, 564, 883, 1069, 673, 634, 672, 1252, 1036, 232,
	551, 408, 197, 851, 543, 414, 69, 1048, 256, 64,
	63, 817, 949, 529, 420, 247, 552, 161, 129, 130,
	140, 52, 248, 446, 448, 809, 1382, 455, 156, 472,
	180, 1109, 1335, 746, 747, 748, 749, 750, 743, 199,
	993, 754, 9, 1253, 238, 536, 743, 1563, 855, 754,
	195, 754, 1155, 635, 34, 537, 1085, 192, 257, 68,
	136, 1151, 138, 195, 196, 616, 257, 215, 216, 217,
	218, 243, 244, 150, 54, 421, 422, 1903, 415, 721,
	903, 619, 55, 56, 1836, 1543, 1899, 50, 183, 47,
	1405, 1406, 434, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1791, 836, 190, 255, 178, 466, 444, 1056, 1057,
	629, 1159, 406, 179, 682, 397, 1138, 1128, 1127, 1160,
	495, 496, 158, 1769, 1733, 1891, 234, 1438, 1129, 742,
	741, 751, 752, 744, 745, 746, 747, 748, 749, 750,
	743, 1130, 1197, 754, 1465, 1835, 1790, 503, 1395, 260,
	1183, 399, 1529, 198, 57, 630, 1829, 1830, 398, 682,
	1828, 1138, 1128, 1127, 48, 517, 1512, 438, 1707, 1708,
	1706, 474, 186, 1129, 181, 191, 868, 487, 488, 489,
	490, 463, 188, 187, 867, 1779, 1130, 459, 1778, 476,
	201, 1780, 478, 875, 481, 482, 737, 151, 50, 740,
	47, 214, 788, 153, 203, 755, 756, 757, 758, 759,
	760, 761, 457, 738, 739, 736, 762, 763, 764, 765,
	742, 741, 751, 752, 744, 745, 746, 747, 748, 749,
	750, 743, 1045, 460, 754, 462, 461, 1613, 1526, 1614,
	206, 1566, 230, 1380, 1389, 664, 663, 1123, 1216, 556,
	227, 1214, 491, 1716, 494, 1284, 137, 1135, 751, 752,
	744, 745, 746, 747, 748, 749, 750, 743, 1140, 1141,
	754, 132, 418, 45, 516, 47, 34, 237, 1719, 733,
	1720, 241, 515, 245, 246, 1784, 1783, 252, 421, 422,
	253, 1542, 1123, 1544, 538, 400, 38, 1606, 1717, 403,
	1283, 1627, 1135, 1430, 1104, 927, 1131, 1132, 1134, 880,
	753, 1672, 1133, 1140, 1141, 257, 184, 1470, 753, 937,
	753, 530, 185, 1288, 742, 741, 751, 752, 744, 745,
	746, 747, 748, 749, 750, 743, 440, 1876, 754, 1630,
	1346, 731, 618, 1326, 1429, 419, 1362, 1363, 723, 922,
	923, 1131, 1132, 1134, 733, 550, 722, 1133, 466, 437,
	1381, 526, 177, 531, 730, 729, 34, 1407, 1288, 688,
	689, 436, 431, 39, 141, 231, 1152, 1153, 718, 1734,
	502, 753, 731, 1367, 506, 507, 744, 745, 746, 747,
	748, 749, 750, 743, 729, 193, 754, 194, 1650, 700,
	1535, 730, 729, 416, 901, 528, 730, 729, 621, 837,
	1160, 731, 753, 535, 1399, 675, 701, 713, 1636, 731,
	522, 189, 26, 679, 731, 685, 693, 133, 713, 257,
	698, 539, 702, 214, 527, 34, 257, 617, 650, 459,
	652, 157, 154, 655, 656, 615, 1789, 1517, 733, 1139,
	638, 732, 530, 1400, 703, 443, 694, 1547, 175, 680,
	1154, 680, 651, 622, 457, 620, 1629, 730, 729, 1411,
	733, 631, 633, 493, 1892, 697, 21, 497, 16, 521,
	500, 1413, 706, 175, 28, 731, 1070, 523, 1469, 730,
	729, 17, 732, 24, 1139, 1799, 674, 1668, 45, 1842,
	47, 680, 427, 753, 1327, 1328, 1329, 731, 1362, 1363,
	428, 18, 19, 174, 720, 730, 729, 716, 717, 719,
	53, 732, 34, 1408, 1072, 531, 423, 429, 887, 732,
	509, 684, 695, 731, 732, 693, 727, 691, 696, 753,
	730, 729, 704, 40, 1286, 1246, 68, 142, 143, 835,
	176, 1208, 724, 1207, 1772, 772, 834, 1771, 731, 257,
	144, 468, 467, 1770, 730, 729, 789, 177, 730, 729,
	1601, 854, 37, 730, 729, 176, 44, 36, 1697, 1699,
	675, 872, 731, 35, 421, 422, 731, 1224, 693, 530,
	58, 731, 177, 51, 524, 732, 402, 1781, 885, 832,
	6, 7, 846, 1896, 580, 862, 50, 753, 1603, 877,
	900, 1850, 822, 863, 902, 823, 1736, 732, 1616, 14,
	1417, 530, 1073, 46, 49, 811, 812, 813, 814, 815,
	816, 830, 792, 618, 680, 777, 778, 530, 791, 648,
	518, 730, 729, 732, 149, 864, 147, 866, 658, 457,
	676, 485, 484, 853, 859, 861, 841, 49, 690, 731,
	629, 674, 1698, 49, 1537, 753, 871, 1428, 732, 1758,
	950, 1615, 1174, 878, 1409, 1410, 1412, 1414, 1415, 1173,
	1172, 981, 980, 417, 1037, 425, 426, 1233, 990, 990,
	987, 1171, 732, 924, 1170, 956, 732, 992, 928, 1169,
	1168, 732, 257, 257, 20, 630, 1167, 659, 1599, 954,
	955, 953, 897, 629, 981, 1038, 22, 23, 1166, 25,
	680, 934, 1165, 1163, 920, 1570, 680, 1571, 930, 1397,
	1106, 680, 1037, 413, 207, 152, 929, 49, 931, 146,
	926, 49, 1052, 49, 49, 33, 1279, 1541, 994, 995,
	49, 925, 261, 1364, 261, 49, 682, 412, 630, 49,
	975, 413, 1355, 823, 972, 974, 424, 1071, 1149, 732,
	34, 1071, 1147, 941, 943, 944, 413, 952, 988, 991,
	772, 942, 413, 1353, 1353, 433, 1484, 675, 1184, 1185,
	1186, 636, 637, 260, 623, 1351, 49, 768, 1052, 1146,
	469, 996, 997, 475, 1354, 1354, 1107, 1032, 424, 870,
	1144, 50, 210, 47, 639, 212, 873, 1601, 1145, 1455,
	728, 1060, 645, 646, 647, 1103, 1077, 1620, 1078, 886,
	849, 1047, 1093, 848, 1046, 475, 1049, 1050, 475, 432,
	49, 869, 839, 530, 49, 49, 1030, 1031, 480, 1062,
	1574, 424, 479, 50, 50, 1603, 47, 34, 1646, 1619,
	1064, 733, 1157, 501, 683, 499, 683, 498, 674, 50,
	471, 47, 1204, 1086, 34, 573, 989, 571, 575, 576,
	577, 578, 50, 33, 47, 574, 579, 950, 790, 1588,
	1591, 1592, 1593, 1589, 725, 1590, 1594, 1164, 865, 1761,
	1762, 492, 767, 769, 770, 771, 775, 45, 34, 47,
	32, 439, 34, 780, 780, 780, 780, 780, 780, 780,
	50, 50, 47, 1603, 977, 424, 978, 1179, 645, 34,
	790, 1072, 1143, 424, 880, 682, 34, 1148, 1161, 793,
	794, 795, 796, 797, 798, 799, 800, 979, 803, 30,
	805, 806, 807, 808, 810, 810, 810, 810, 810, 810,
	810, 657, 826, 827, 828, 829, 1190, 741, 751, 752,
	744, 745, 746, 747, 748, 749, 750, 743, 1796, 733,
	754, 1071, 895, 733, 257, 789, 951, 424, 614, 1580,
	34, 1886, 1885, 675, 530, 895, 1884, 682, 159, 1242,
	1871, 1827, 733, 1420, 1213, 1849, 733, 1242, 1792, 1277,
	710, 1723, 1583, 733, 1217, 613, 1182, 1280, 710, 1632,
	710, 1631, 895, 1554, 1748, 1244, 710, 1508, 1582, 1749,
	994, 645, 1242, 1507, 1232, 1581, 612, 1579, 611, 683,
	1296, 1230, 1322, 1323, 1324, 680, 1276, 1331, 1267, 424,
	540, 430, 469, 680, 1583, 1336, 1144, 1144, 1336, 1144,
	1144, 530, 530, 1334, 1254, 1504, 1503, 1347, 1260, 710,
	1498, 1350, 1257, 1258, 674, 260, 1290, 1264, 1262, 1261,
	1259, 1266, 1256, 710, 1497, 1278, 1289, 1804, 1052, 530,
	1757, 780, 780, 1249, 780, 780, 780, 780, 780, 780,
	780, 780, 780, 780, 780, 780, 780, 780, 780, 469,
	49, 710, 1421, 1248, 1251, 1370, 1081, 1349, 49, 1292,
	1293, 1294, 1080, 1298, 1583, 683, 710, 1372, 1065, 733,
	1675, 775, 1579, 129, 1242, 1241, 775, 710, 1181, 880,
	1287, 710, 1088, 895, 1087, 1342, 1343, 985, 733, 895,
	1055, 1373, 1079, 1401, 710, 935, 1368, 1369, 1356, 1357,
	1358, 1359, 1360, 1366, 710, 709, 668, 667, 1659, 1268,
	661, 662, 1061, 1371, 1659, 1376, 693, 1228, 1337, 1338,
	1339, 1340, 1341, 1065, 1396, 661, 660, 1384, 1053, 60,
	59, 682, 860, 1282, 1433, 1242, 1388, 1424, 1386, 1142,
	1383, 874, 514, 951, 1390, 896, 907, 850, 1447, 257,
	919, 843, 1226, 840, 665, 654, 1757, 1757, 1076, 653,
	909, 1419, 1065, 1878, 1451, 1227, 513, 649, 1845, 514,
	682, 1452, 985, 1450, 1583, 1375, 1485, 1094, 1242, 514,
	1458, 1705, 1608, 424, 1804, 1466, 1431, 1336, 1065, 753,
	858, 858, 858, 1425, 1432, 530, 530, 1493, 1493, 1440,
	1225, 1209, 1374, 895, 1444, 710, 838, 670, 669, 1454,
	666, 424, 1822, 1820, 469, 1787, 49, 1588, 1591, 1592,
	1593, 1589, 424, 1590, 1594, 1761, 1762, 1333, 1647, 49,
	1483, 203, 1501, 1345, 1344, 1265, 908, 233, 1178, 1177,
	1150, 1083, 780, 780, 780, 1082, 1059, 1495, 932, 780,
	780, 780, 780, 899, 1494, 876, 1442, 831, 1443, 726,
	678, 1287, 677, 644, 643, 641, 624, 541, 257, 504,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 1499,
	1500, 228, 445, 441, 1422, 410, 1505, 1506, 1426, 226,
	1076, 235, 236, 1436, 220, 219, 780, 1513, 208, 11,
	519, 1156, 1490, 1764, 1245, 671, 505, 240, 239, 145,
	1548, 139, 1767, 1532, 697, 46, 1766, 1605, 1687, 68,
	1686, 1551, 1690, 257, 1533, 1534, 1555, 1691, 1572, 1872,
	1618, 1536, 1538, 1539, 1540, 1834, 261, 1657, 858, 858,
	1560, 804, 858, 858, 858, 1688, 1561, 1557, 46, 409,
	1689, 1621, 530, 1634, 486, 680, 1692, 545, 1592, 1593,
	1568, 1098, 1099, 1577, 1569, 1270, 1624, 1510, 627, 1595,
	1843, 858, 858, 858, 858, 1607, 1604, 1609, 1457, 1623,
	1271, 922, 923, 1562, 401, 254, 1470, 1622, 1102, 1095,
	683, 626, 1096, 1509, 512, 1626, 510, 858, 683, 508,
	847, 148, 1635, 889, 1034, 890, 891, 892, 1702, 1496,
	1039, 893, 1287, 1565, 687, 1553, 1287, 1443, 888, 1556,
	534, 469, 1090, 1841, 1652, 1442, 1545, 1091, 880, 1840,
	1798, 1264, 1332, 981, 1680, 1489, 1633, 249, 250, 251,
	1550, 1488, 1552, 1664, 905, 1487, 1486, 1404, 1403, 1176,
	1452, 1893, 987, 533, 532, 1427, 1175, 435, 1648, 257,
	1649, 882, 884, 1442, 1676, 1578, 699, 257, 898, 1665,
	8, 1674, 1, 1681, 1052, 1667, 1684, 1299, 13, 12,
	1682, 1683, 1701, 1685, 1463, 1531, 1737, 1693, 680, 1704,
	242, 780, 780, 1202, 787, 568, 1718, 1628, 1052, 554,
	1703, 1714, 1638, 1855, 1467, 1295, 1325, 1365, 470, 182,
	1247, 442, 15, 1712, 1437, 1281, 686, 511, 1348, 1713,
	904, 780, 780, 780, 780, 1735, 1750, 712, 165, 1637,
	155, 705, 982, 983, 984, 986, 1662, 404, 29, 1575,
	1576, 1287, 10, 1654, 1565, 1742, 1162, 166, 164, 1416,
	163, 1774, 162, 160, 473, 1756, 542, 1775, 200, 1741,
	1765, 1754, 680, 205, 229, 67, 1040, 1041, 1042, 1043,
	65, 1044, 1655, 1776, 625, 1753, 1656, 1755, 858, 66,
	70, 1472, 1617, 520, 1236, 1068, 766, 257, 1777, 1479,
	1464, 1782, 1811, 680, 1054, 1273, 1565, 1839, 1797, 981,
	1680, 1805, 1812, 1774, 1231, 801, 1810, 1035, 981, 1680,
	858, 555, 1063, 940, 1066, 1067, 567, 1813, 261, 1451,
	1074, 858, 1075, 1808, 1817, 1452, 1452, 469, 1450, 566,
	1726, 1795, 565, 1793, 1747, 1443, 735, 1462, 1052, 1573,
	1587, 1662, 680, 1502, 1801, 1802, 1101, 1814, 1585, 1740,
	1584, 1763, 1721, 1722, 1463, 1815, 1759, 1816, 1838, 1673,
	1800, 1461, 1528, 1732, 1677, 1833, 1844, 1097, 1435, 1136,
	1126, 693, 1852, 780, 693, 693, 693, 734, 1869, 881,
	1100, 5, 1137, 776, 1121, 4, 3, 49, 1442, 1120,
	1868, 1527, 1854, 1119, 1180, 1865, 1866, 1867, 1118, 1116,
	1881, 1882, 1117, 1879, 1114, 1877, 1115, 1874, 1113, 1092,
	1853, 1883, 681, 2, 1785, 1786, 0, 0, 0, 1808,
	0, 1725, 0, 0, 802, 1890, 0, 0, 0, 202,
	0, 0, 1894, 0, 0, 1895, 0, 0, 0, 680,
	1198, 1199, 1897, 0, 981, 1680, 1900, 1902, 1201, 1898,
	0, 0, 1808, 0, 1565, 0, 833, 1205, 1206, 0,
	1597, 0, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 680, 1287, 1463, 1463, 1463, 1463, 1463, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 1229, 0, 0, 0, 0, 0, 1235,
	0, 0, 0, 204, 1662, 0, 209, 1237, 1238, 211,
	1239, 1240, 0, 780, 1443, 0, 780, 0, 780, 0,
	780, 0, 780, 780, 0, 1250, 221, 222, 223, 224,
	225, 0, 682, 0, 1138, 1128, 1127, 0, 49, 49,
	0, 0, 0, 0, 0, 0, 1129, 0, 0, 1463,
	1524, 733, 0, 0, 0, 0, 0, 0, 933, 1130,
	0, 0, 938, 939, 682, 1463, 1138, 1128, 1127, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 1129, 1464,
	1464, 1464, 1464, 1464, 0, 0, 0, 0, 0, 0,
	0, 1130, 0, 1597, 0, 1700, 742, 741, 751, 752,
	744, 745, 746, 747, 748, 749, 750, 743, 776, 0,
	754, 0, 0, 776, 1446, 779, 781, 782, 783, 784,
	785, 786, 682, 0, 1138, 1128, 1127, 0, 998, 1029,
	0, 0, 0, 0, 0, 477, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 1715, 0, 0, 1130,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 1751, 1752, 1058,
	0, 1464, 0, 0, 0, 1135, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 1140, 1141, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 1123, 683, 49,
	49, 0, 0, 0, 1402, 0, 0, 1135, 0, 49,
	1602, 0, 0, 0, 0, 0, 0, 0, 1140, 1141,
	1418, 0, 0, 0, 1131, 1132, 1134, 0, 0, 0,
	1133, 0, 907, 733, 0, 0, 919, 0, 1434, 0,
	0, 1288, 0, 0, 0, 1809, 909, 683, 0, 0,
	0, 0, 0, 0, 0, 1123, 1131, 1132, 1134, 0,
	0, 0, 1133, 0, 0, 1135, 1823, 1824, 1825, 0,
	0, 0, 0, 0, 0, 0, 1140, 1141, 742, 741,
	751, 752, 744, 745, 746, 747, 748, 749, 750, 743,
	1651, 0, 754, 945, 0, 0, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 0, 0, 0, 1131, 1132, 1134, 0, 1200, 49,
	1133, 0, 908, 49, 49, 0, 0, 46, 49, 49,
	49, 49, 49, 0, 0, 0, 0, 0, 0, 0,
	1694, 1809, 49, 0, 1880, 1514, 1602, 1515, 1516, 0,
	0, 1518, 1519, 1521, 1523, 1525, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 0, 0, 1139, 0, 0,
	1234, 0, 0, 0, 1809, 0, 683, 1546, 0, 753,
	0, 49, 0, 0, 0, 0, 1243, 0, 0, 0,
	640, 642, 682, 0, 1138, 1128, 1127, 0, 0, 1139,
	0, 0, 0, 0, 49, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 1130,
	49, 0, 0, 1272, 1275, 0, 0, 0, 0, 0,
	1520, 733, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1669,
	0, 0, 0, 0, 0, 1625, 1291, 1139, 0, 0,
	711, 714, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 1670, 0, 742, 741, 751, 752,
	744, 745, 746, 747, 748, 749, 750, 743, 0, 1645,
	754, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 1187, 1188, 1189, 1832, 0, 1653,
	0, 0, 1191, 1192, 1193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 0, 0,
	1158, 0, 0, 0, 0, 1135, 0, 682, 0, 1138,
	1128, 1127, 1387, 0, 0, 0, 1140, 1141, 0, 0,
	0, 1129, 0, 0, 0, 0, 0, 1695, 779, 0,
	0, 753, 0, 0, 1130, 0, 1398, 0, 0, 0,
	0, 1602, 0, 0, 0, 0, 0, 548, 0, 0,
	0, 0, 0, 0, 1131, 1132, 1134, 0, 0, 0,
	1133, 0, 0, 0, 547, 1724, 0, 1423, 0, 546,
	1727, 1728, 1729, 1730, 1731, 711, 592, 0, 593, 0,
	0, 0, 0, 0, 0, 1439, 583, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 424, 0, 0, 45,
	573, 570, 571, 575, 576, 577, 578, 0, 46, 0,
	574, 579, 464, 465, 549, 0, 0, 0, 0, 544,
	562, 0, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 776, 776, 733, 0, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 559, 560, 0,
	1135, 0, 0, 608, 0, 561, 0, 0, 1000, 558,
	563, 1140, 1141, 1788, 0, 0, 0, 0, 1794, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	0, 742, 741, 751, 752, 744, 745, 746, 747, 748,
	749, 750, 743, 1002, 0, 754, 0, 1139, 0, 1131,
	1132, 1134, 1530, 0, 1826, 1133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 569, 0, 0,
	0, 0, 0, 1378, 1379, 0, 1837, 0, 0, 753,
	0, 0, 1558, 1559, 1275, 0, 0, 0, 0, 0,
	1846, 1847, 1848, 0, 1851, 0, 0, 1669, 0, 0,
	0, 0, 0, 1391, 1392, 1393, 1394, 0, 1011, 1017,
	1015, 0, 0, 1012, 0, 0, 1010, 0, 0, 1019,
	0, 0, 1018, 1004, 1014, 1016, 1013, 1008, 0, 1003,
	0, 1021, 1020, 1022, 1001, 1024, 0, 0, 0, 1028,
	1025, 1027, 1026, 594, 1023, 0, 1887, 1888, 1889, 0,
	0, 0, 0, 1005, 1006, 0, 682, 0, 1138, 1128,
	1127, 0, 0, 0, 0, 610, 0, 595, 596, 0,
	1129, 0, 0, 0, 1007, 1009, 1901, 0, 0, 0,
	0, 0, 682, 1130, 1138, 1128, 1127, 0, 0, 0,
	0, 0, 1139, 0, 0, 0, 1129, 0, 581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1130,
	0, 0, 0, 0, 0, 0, 1660, 0, 0, 0,
	597, 607, 603, 604, 601, 602, 600, 599, 598, 609,
	585, 586, 587, 588, 590, 0, 0, 468, 467, 589,
	0, 0, 1663, 0, 0, 0, 0, 0, 0, 0,
	1210, 1211, 0, 1212, 0, 1511, 0, 0, 1215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1711, 0,
	1218, 1219, 0, 0, 1220, 1221, 605, 1222, 1223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1135,
	0, 0, 0, 0, 0, 1739, 0, 0, 0, 0,
	1140, 1141, 0, 0, 753, 1123, 0, 0, 0, 1745,
	0, 1746, 0, 0, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1131, 1132,
	1134, 0, 0, 0, 1133, 0, 0, 1377, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 0, 0,
	0, 0, 0, 0, 1131, 1132, 1134, 0, 0, 0,
	1133, 0, 742, 741, 751, 752, 744, 745, 746, 747,
	748, 749, 750, 743, 0, 1639, 754, 0, 1640, 0,
	1641, 0, 1642, 0, 1643, 1644, 0, 0, 0, 0,
	0, 1818, 0, 0, 1819, 0, 0, 1821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 382, 369, 1831, 327, 384, 295, 315, 393,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 1739,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	371, 340, 776, 0, 0, 391, 0, 345, 0, 0,
	0, 0, 0, 332, 373, 335, 364, 326, 355, 282,
	344, 386, 313, 350, 387, 0, 0, 0, 34, 0,
	0, 1139, 0, 1873, 776, 0, 0, 0, 0, 0,
	349, 380, 309, 279, 396, 0, 353, 265, 347, 0,
	0, 271, 274, 392, 378, 303, 302, 1139, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 1286, 343, 0, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 367,
	375, 325, 0, 0, 379, 322, 321, 1564, 0, 0,
	0, 0, 0, 314, 259, 358, 394, 383, 333, 372,
	297, 308, 0, 304, 0, 0, 0, 305, 306, 342,
	356, 0, 0, 0, 0, 0, 381, 374, 742, 741,
	751, 752, 744, 745, 746, 747, 748, 749, 750, 743,
	0, 0, 754, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 365, 368, 286, 352, 275, 310, 359, 311,
	334, 291, 0, 0, 0, 1210, 33, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 1195,
	0, 0, 0, 0, 0, 0, 0, 1196, 0, 0,
	0, 34, 0, 32, 0, 753, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 742, 741, 751, 752, 744, 745, 746, 747,
	748, 749, 750, 743, 0, 0, 754, 0, 742, 741,
	751, 752, 744, 745, 746, 747, 748, 749, 750, 743,
	0, 268, 754, 0, 0, 0, 0, 269, 290, 376,
	0, 0, 0, 0, 1482, 1480, 1476, 1475, 0, 0,
	0, 0, 351, 0, 176, 0, 0, 1478, 0, 0,
	168, 0, 167, 0, 171, 172, 175, 0, 0, 0,
	169, 177, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 283, 284, 338, 339, 388, 389, 390, 363, 280,
	0, 287, 288, 0, 370, 0, 0, 0, 341, 0,
	0, 0, 395, 0, 0, 0, 0, 0, 0, 0,
	316, 264, 320, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 0, 0, 324, 319, 346, 348, 357, 366,
	377, 385, 360, 294, 330, 382, 369, 0, 327, 384,
	295, 315, 393, 317, 318, 354, 273, 337, 0, 312,
	292, 0, 0, 0, 298, 266, 307, 267, 296, 329,
	0, 293, 0, 371, 340, 0, 0, 0, 391, 0,
	345, 0, 0, 0, 0, 0, 332, 373, 335, 364,
	326, 355, 282, 344, 386, 313, 350, 387, 0, 0,
	0, 34, 0, 0, 0, 0, 173, 0, 0, 0,
	0, 753, 0, 349, 380, 309, 279, 396, 0, 353,
	265, 347, 0, 0, 271, 274, 392, 378, 303, 302,
	0, 0, 0, 0, 0, 0, 0, 331, 336, 361,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 343, 0, 0, 0, 278,
	272, 0, 328, 818, 0, 0, 281, 0, 300, 362,
	0, 262, 367, 375, 325, 0, 0, 379, 322, 321,
	0, 0, 0, 0, 0, 0, 314, 259, 358, 394,
	383, 333, 372, 297, 308, 753, 304, 0, 820, 0,
	305, 306, 342, 356, 0, 0, 0, 0, 0, 381,
	374, 753, 818, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 263, 301, 365, 368, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1610, 0, 0,
	0, 0, 0, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 0, 122, 123, 0, 124, 125, 126,
	128, 127, 0, 973, 821, 0, 0, 0, 0, 0,
	1481, 0, 71, 819, 0, 0, 0, 0, 825, 824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 376, 821, 0, 0, 0, 1482, 1480, 0,
	0, 71, 819, 0, 0, 351, 0, 825, 824, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 388, 389,
	390, 363, 280, 0, 287, 288, 0, 370, 0, 0,
	0, 341, 0, 0, 0, 395, 72, 0, 0, 0,
	0, 0, 0, 316, 264, 320, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 366, 377, 385, 360, 294, 330, 382, 369,
	0, 327, 384, 295, 315, 393, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 72, 0, 298, 266, 307,
	267, 296, 329, 0, 293, 0, 371, 340, 0, 0,
	0, 391, 0, 345, 0, 0, 0, 0, 0, 332,
	373, 335, 364, 326, 355, 282, 344, 386, 313, 350,
	387, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 380, 309, 279,
	396, 0, 353, 265, 347, 0, 0, 271, 274, 392,
	378, 303, 302, 0, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 0, 0, 0, 0, 0, 1385,
	0, 0, 0, 0, 0, 0, 299, 0, 343, 0,
	0, 0, 278, 272, 0, 328, 0, 0, 0, 281,
	0, 300, 362, 0, 262, 367, 375, 325, 0, 0,
	379, 322, 321, 0, 1002, 0, 0, 0, 0, 314,
	259, 358, 394, 383, 333, 372, 297, 308, 0, 304,
	0, 0, 0, 305, 306, 342, 356, 0, 0, 0,
	0, 0, 381, 374, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 270, 263, 301, 365, 368,
	286, 352, 275, 310, 359, 311, 334, 291, 0, 1011,
	1017, 1015, 0, 0, 1012, 0, 0, 1010, 0, 0,
	1019, 0, 0, 1018, 1004, 1014, 1016, 1013, 1008, 0,
	1003, 0, 1021, 1020, 1022, 1001, 1024, 0, 0, 0,
	1028, 1025, 1027, 1026, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 1481, 1005, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1007, 1009, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 269, 290, 376, 0, 0, 0, 0,
	1482, 1480, 0, 0, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 289, 283, 284, 338,
	339, 388, 389, 390, 363, 280, 0, 287, 288, 0,
	370, 0, 0, 0, 341, 0, 0, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 316, 264, 320, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 0, 0,
	324, 319, 346, 348, 357, 366, 377, 385, 360, 294,
	330, 382, 369, 0, 327, 384, 295, 315, 393, 317,
	318, 354, 273, 337, 0, 312, 292, 0, 0, 0,
	298, 266, 307, 267, 296, 329, 0, 293, 0, 371,
	340, 0, 94, 0, 391, 33, 345, 0, 0, 0,
	0, 0, 332, 373, 335, 364, 326, 355, 282, 344,
	386, 313, 350, 387, 0, 0, 0, 45, 1149, 47,
	34, 0, 1147, 0, 0, 0, 0, 0, 0, 349,
	380, 309, 279, 396, 0, 353, 265, 347, 0, 0,
	271, 274, 392, 378, 303, 302, 0, 0, 0, 1146,
	0, 0, 0, 331, 336, 361, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1255, 1145, 299,
	0, 343, 0, 0, 0, 278, 272, 0, 328, 79,
	0, 0, 281, 0, 300, 362, 0, 262, 367, 375,
	325, 0, 0, 379, 322, 321, 0, 0, 0, 0,
	0, 0, 314, 259, 358, 394, 383, 333, 372, 297,
	308, 0, 304, 0, 95, 0, 305, 306, 342, 356,
	0, 0, 0, 0, 0, 381, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 365, 368, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 0,
	122, 123, 0, 124, 125, 126, 128, 127, 96, 97,
	98, 102, 100, 99, 101, 73, 75, 0, 71, 74,
	80, 76, 77, 78, 92, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 93, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 376, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 338, 339, 388, 389, 390, 363, 280, 0,
	287, 288, 0, 370, 0, 0, 0, 341, 0, 0,
	0, 395, 72, 0, 0, 0, 0, 0, 0, 316,
	264, 320, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 324, 319, 346, 348, 357, 366, 377,
	385, 360, 294, 330, 382, 369, 0, 327, 384, 295,
	315, 393, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 371, 340, 0, 94, 0, 391, 0, 345,
	0, 0, 0, 0, 0, 332, 373, 335, 364, 326,
	355, 282, 344, 386, 313, 350, 387, 0, 0, 0,
	34, 0, 707, 34, 708, 0, 0, 0, 0, 0,
	0, 0, 349, 380, 309, 279, 396, 0, 353, 265,
	347, 0, 0, 271, 274, 392, 378, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 343, 0, 0, 0, 278, 272,
	0, 328, 79, 0, 0, 281, 0, 300, 362, 0,
	262, 367, 375, 325, 0, 0, 379, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 259, 358, 394, 383,
	333, 372, 297, 308, 0, 304, 0, 95, 0, 305,
	306, 342, 356, 0, 0, 0, 0, 0, 381, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 263, 301, 365, 368, 286, 352, 275, 310,
	359, 311, 334, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 0, 122, 123, 0, 124, 125, 126, 128,
	127, 96, 97, 98, 102, 100, 99, 101, 73, 75,
	0, 71, 74, 80, 76, 77, 78, 92, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 93,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 269,
	290, 376, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 289, 283, 284, 338, 339, 388, 389, 390,
	363, 280, 0, 287, 288, 0, 370, 0, 0, 0,
	341, 0, 0, 0, 395, 72, 0, 0, 0, 0,
	0, 0, 316, 264, 320, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 0, 0, 324, 319, 346, 348,
	357, 366, 377, 385, 360, 294, 330, 382, 369, 0,
	327, 384, 295, 315, 393, 317, 318, 354, 273, 337,
	0, 312, 292, 0, 0, 0, 298, 266, 307, 267,
	296, 329, 0, 293, 0, 371, 340, 0, 0, 0,
	391, 0, 345, 0, 0, 0, 0, 0, 332, 373,
	335, 364, 326, 355, 282, 344, 386, 313, 350, 387,
	0, 405, 0, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 349, 380, 309, 279, 396,
	0, 353, 265, 347, 0, 0, 271, 274, 392, 378,
	303, 302, 0, 0, 0, 0, 0, 0, 0, 331,
	336, 361, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 343, 0, 0,
	0, 278, 272, 0, 328, 0, 0, 0, 281, 0,
	300, 362, 0, 262, 367, 375, 325, 0, 0, 379,
	322, 321, 0, 0, 0, 0, 0, 0, 314, 259,
	358, 394, 383, 333, 372, 297, 308, 0, 304, 0,
	0, 0, 305, 306, 342, 356, 682, 0, 1138, 1128,
	1127, 381, 374, 0, 0, 0, 0, 0, 0, 0,
	1129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1130, 270, 263, 301, 365, 368, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1743, 1744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 632, 0, 0, 45,
	0, 449, 450, 451, 453, 0, 0, 0, 0, 0,
	456, 454, 464, 465, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 376, 0, 0, 0, 0, 1123,
	258, 0, 0, 0, 0, 0, 0, 351, 0, 1135,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 0,
	1140, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 283, 284, 338, 339,
	388, 389, 390, 363, 280, 0, 287, 288, 0, 370,
	0, 0, 0, 341, 0, 0, 0, 395, 1131, 1132,
	1134, 0, 0, 0, 1133, 316, 264, 320, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 0, 324,
	319, 346, 348, 357, 366, 377, 385, 360, 294, 330,
	382, 369, 0, 327, 384, 295, 315, 393, 317, 318,
	354, 273, 337, 0, 312, 292, 0, 0, 0, 298,
	266, 307, 267, 296, 329, 0, 293, 0, 371, 340,
	0, 0, 0, 391, 0, 345, 0, 0, 0, 0,
	0, 332, 373, 335, 364, 326, 355, 282, 344, 386,
	313, 350, 387, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 380,
	309, 279, 396, 0, 353, 265, 347, 0, 0, 271,
	274, 392, 378, 303, 302, 0, 0, 0, 0, 0,
	0, 0, 331, 336, 361, 323, 0, 458, 463, 0,
	0, 0, 0, 0, 0, 0, 1549, 0, 299, 0,
	343, 1139, 0, 0, 278, 272, 0, 328, 0, 0,
	0, 281, 0, 300, 362, 0, 262, 367, 375, 325,
	0, 0, 379, 322, 321, 0, 0, 0, 0, 0,
	0, 314, 259, 358, 394, 383, 333, 372, 297, 308,
	460, 304, 462, 461, 0, 305, 306, 342, 356, 682,
	0, 1138, 1128, 1127, 381, 374, 0, 468, 467, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 270, 263, 301,
	365, 368, 286, 352, 275, 310, 359, 311, 334, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 447,
	0, 0, 45, 0, 449, 450, 451, 453, 0, 0,
	0, 0, 0, 456, 454, 464, 465, 0, 0, 268,
	0, 0, 0, 0, 0, 269, 290, 376, 0, 0,
	0, 0, 1123, 258, 0, 0, 0, 0, 0, 0,
	351, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 452, 0, 1140, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 289, 283,
	284, 338, 339, 388, 389, 390, 363, 280, 0, 287,
	288, 0, 370, 0, 0, 0, 341, 0, 0, 0,
	395, 1131, 1132, 1134, 0, 0, 0, 1133, 316, 264,
	320, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	0, 0, 324, 319, 346, 348, 357, 366, 377, 385,
	360, 294, 330, 382, 369, 0, 327, 384, 295, 315,
	393, 317, 318, 354, 273, 337, 0, 312, 292, 0,
	0, 0, 298, 266, 307, 267, 296, 329, 0, 293,
	0, 371, 340, 0, 0, 0, 391, 0, 345, 0,
	0, 0, 0, 0, 332, 373, 335, 364, 326, 355,
	282, 344, 386, 313, 350, 387, 0, 0, 0, 45,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 380, 309, 279, 396, 0, 353, 265, 347,
	0, 0, 271, 274, 392, 378, 303, 302, 0, 0,
	0, 0, 0, 0, 0, 331, 336, 361, 323, 0,
	458, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 343, 1139, 0, 0, 278, 272, 0,
	328, 0, 0, 0, 281, 0, 300, 362, 0, 262,
	367, 375, 325, 0, 0, 379, 322, 321, 0, 0,
	0, 0, 0, 0, 314, 259, 358, 394, 383, 333,
	372, 297, 308, 460, 304, 462, 461, 0, 305, 306,
	342, 356, 682, 0, 1138, 1128, 1127, 381, 374, 0,
	468, 467, 0, 0, 0, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1130,
	270, 263, 301, 365, 368, 286, 352, 275, 310, 359,
	311, 334, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1870, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 450, 451,
	453, 0, 0, 0, 0, 0, 456, 454, 464, 465,
	0, 0, 268, 0, 0, 0, 0, 0, 269, 290,
	376, 0, 0, 0, 0, 1123, 258, 0, 0, 0,
	0, 0, 0, 351, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 452, 0, 1140, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 289, 283, 284, 338, 339, 388, 389, 390, 363,
	280, 0, 287, 288, 0, 370, 0, 0, 0, 341,
	0, 0, 0, 395, 1131, 1132, 1134, 0, 0, 0,
	1133, 316, 264, 320, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 0, 0, 324, 319, 346, 348, 357,
	366, 377, 385, 360, 294, 330, 382, 369, 0, 327,
	384, 295, 315, 393, 317, 318, 354, 273, 337, 0,
	312, 292, 0, 0, 0, 298, 266, 307, 267, 296,
	329, 0, 293, 0, 371, 340, 0, 0, 0, 391,
	0, 345, 0, 0, 0, 0, 0, 332, 373, 335,
	364, 326, 355, 282, 344, 386, 313, 350, 387, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 380, 309, 279, 396, 0,
	353, 265, 347, 0, 0, 271, 274, 392, 378, 303,
	302, 525, 0, 0, 0, 0, 0, 0, 331, 336,
	361, 323, 0, 458, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 343, 1139, 0, 0,
	278, 272, 0, 328, 0, 0, 0, 281, 0, 300,
	362, 0, 262, 367, 375, 325, 0, 0, 379, 322,
	321, 0, 0, 0, 0, 0, 0, 314, 259, 358,
	394, 383, 333, 372, 297, 308, 460, 304, 462, 461,
	0, 305, 306, 342, 356, 682, 0, 1138, 1128, 1127,
	381, 374, 0, 0, 0, 0, 0, 0, 0, 1129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1130, 270, 263, 301, 365, 368, 286, 352,
	275, 310, 359, 311, 334, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 269, 290, 376, 0, 0, 0, 0, 1123, 258,
	0, 0, 0, 0, 0, 0, 351, 0, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1140,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 289, 283, 284, 338, 339, 388,
	389, 390, 363, 280, 0, 287, 288, 0, 370, 0,
	0, 0, 341, 0, 0, 0, 395, 1131, 1132, 1134,
	0, 0, 0, 1133, 316, 264, 320, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 0, 0, 324, 319,
	346, 348, 357, 366, 377, 385, 360, 294, 330, 382,
	369, 0, 327, 384, 295, 315, 393, 317, 318, 354,
	273, 337, 0, 312, 292, 0, 0, 0, 298, 266,
	307, 267, 296, 329, 0, 293, 0, 371, 340, 0,
	0, 0, 391, 0, 345, 0, 0, 0, 0, 0,
	332, 373, 335, 364, 326, 355, 282, 344, 386, 313,
	350, 387, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 380, 309,
	279, 396, 0, 353, 265, 347, 0, 0, 271, 274,
	392, 378, 303, 302, 0, 0, 0, 0, 0, 0,
	0, 331, 336, 361, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 343,
	1139, 0, 0, 278, 272, 0, 328, 0, 0, 0,
	281, 0, 300, 362, 0, 262, 367, 375, 325, 0,
	0, 379, 322, 321, 0, 0, 0, 0, 0, 0,
	314, 259, 358, 394, 383, 333, 372, 297, 308, 0,
	304, 0, 0, 0, 305, 306, 342, 356, 682, 0,
	1138, 1128, 1127, 381, 374, 0, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1130, 270, 263, 301, 365,
	368, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 376, 0, 0, 0,
	0, 1123, 258, 0, 0, 0, 0, 0, 0, 351,
	0, 1135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	338, 339, 388, 389, 390, 363, 280, 0, 287, 288,
	0, 370, 0, 0, 0, 341, 0, 0, 0, 395,
	1131, 1132, 1134, 0, 0, 0, 1133, 316, 264, 320,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 324, 319, 346, 348, 357, 366, 377, 385, 360,
	294, 330, 382, 369, 0, 327, 384, 295, 315, 393,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 0,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	371, 340, 0, 0, 0, 391, 0, 345, 0, 0,
	0, 0, 0, 332, 373, 335, 364, 326, 355, 282,
	344, 386, 313, 350, 387, 0, 0, 0, 50, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 380, 309, 279, 396, 0, 353, 265, 347, 0,
	0, 271, 274, 392, 378, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 343, 1139, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 367,
	375, 325, 0, 0, 379, 322, 321, 0, 0, 0,
	0, 0, 0, 314, 0, 358, 394, 383, 333, 372,
	297, 308, 0, 304, 0, 0, 0, 305, 306, 342,
	356, 0, 0, 0, 0, 0, 381, 374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 0, 0, 0, 270,
	263, 301, 365, 368, 286, 352, 275, 310, 359, 311,
	334, 291, 547, 0, 0, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 592, 0, 593, 0, 0, 0,
	0, 0, 0, 0, 583, 584, 0, 0, 0, 0,
	0, 0, 1709, 0, 424, 0, 0, 45, 573, 570,
	571, 575, 576, 577, 578, 0, 0, 0, 574, 579,
	464, 465, 549, 1710, 0, 0, 0, 544, 562, 0,
	0, 591, 0, 0, 0, 682, 0, 1138, 1128, 1127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1129,
	0, 268, 0, 0, 0, 559, 560, 269, 290, 376,
	0, 608, 1130, 561, 0, 0, 557, 558, 563, 0,
	0, 0, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 283, 284, 338, 339, 388, 389, 390, 363, 280,
	0, 287, 288, 0, 370, 0, 0, 0, 341, 0,
	0, 0, 395, 0, 0, 569, 0, 0, 0, 0,
	316, 264, 320, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 0, 0, 324, 319, 346, 348, 357, 366,
	377, 385, 360, 294, 330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1135, 0,
	0, 0, 0, 682, 0, 1138, 1128, 1127, 0, 1140,
	1141, 0, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 0, 595, 596, 1131, 1132, 1134,
	0, 0, 0, 1133, 0, 682, 0, 1138, 1128, 1127,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 1129,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 1130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 607,
	603, 604, 601, 602, 600, 599, 598, 609, 585, 586,
	587, 588, 590, 548, 0, 468, 467, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 0,
	547, 0, 0, 0, 0, 546, 1666, 0, 0, 0,
	0, 0, 592, 0, 593, 0, 1135, 0, 0, 0,
	0, 0, 583, 584, 605, 0, 0, 1140, 1141, 0,
	0, 0, 424, 0, 0, 45, 573, 570, 571, 575,
	576, 577, 578, 0, 0, 0, 574, 579, 464, 465,
	549, 0, 0, 0, 0, 544, 562, 0, 1123, 591,
	1139, 0, 0, 0, 0, 1131, 1132, 1134, 1135, 0,
	0, 1133, 0, 0, 0, 548, 0, 0, 0, 1140,
	1141, 0, 1453, 559, 560, 857, 0, 0, 0, 608,
	0, 561, 547, 0, 557, 558, 563, 546, 0, 0,
	0, 0, 0, 0, 592, 0, 593, 0, 0, 0,
	0, 0, 0, 606, 583, 584, 0, 1131, 1132, 1134,
	0, 0, 0, 1133, 424, 0, 733, 45, 573, 570,
	571, 575, 576, 577, 578, 0, 0, 0, 574, 579,
	464, 465, 549, 0, 0, 0, 0, 544, 562, 0,
	0, 591, 0, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 0, 0,
	0, 0, 0, 0, 0, 559, 560, 0, 0, 0,
	0, 608, 0, 561, 547, 0, 557, 558, 563, 546,
	0, 0, 0, 0, 0, 0, 592, 0, 593, 0,
	0, 0, 0, 0, 0, 606, 583, 584, 1139, 0,
	0, 0, 0, 0, 0, 0, 424, 0, 0, 45,
	573, 570, 571, 575, 576, 577, 578, 0, 0, 594,
	574, 579, 464, 465, 549, 0, 0, 0, 0, 544,
	562, 0, 0, 591, 0, 569, 0, 0, 0, 0,
	0, 610, 0, 595, 596, 0, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 559, 560, 857,
	0, 0, 0, 608, 0, 561, 0, 0, 557, 558,
	563, 0, 0, 0, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 607, 603, 604,
	601, 602, 600, 599, 598, 609, 585, 586, 587, 588,
	590, 594, 0, 468, 467, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 0, 0,
	0, 0, 0, 610, 0, 595, 596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 607,
	603, 604, 601, 602, 600, 599, 598, 609, 585, 586,
	587, 588, 590, 594, 0, 468, 467, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 0, 595, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 607, 603, 604, 601, 602, 600, 599, 598, 609,
	585, 586, 587, 588, 590, 0, 0, 468, 467, 589,
	682, 0, 0, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	547, 0, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 592, 0, 593, 0, 605, 0, 0, 0,
	0, 0, 583, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 424, 0, 0, 45, 573, 570, 571, 575,
	576, 577, 578, 0, 0, 0, 574, 579, 464, 465,
	549, 0, 0, 0, 0, 544, 562, 0, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 0, 0, 0, 0,
	0, 0, 0, 559, 560, 0, 0, 0, 0, 608,
	0, 561, 547, 0, 557, 558, 563, 546, 0, 0,
	0, 0, 0, 0, 592, 0, 593, 0, 0, 0,
	0, 0, 0, 606, 583, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 424, 0, 0, 45, 573, 570,
	571, 575, 576, 577, 578, 0, 0, 0, 574, 579,
	464, 465, 549, 0, 0, 0, 0, 544, 562, 0,
	0, 591, 0, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 560, 0, 0, 0,
	0, 608, 0, 561, 0, 0, 557, 558, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 0, 0, 0, 0,
	0, 610, 0, 595, 596, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 607, 603, 604,
	601, 602, 600, 599, 598, 609, 585, 586, 587, 588,
	590, 594, 0, 468, 467, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 0, 595, 596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 607,
	603, 604, 601, 602, 600, 599, 598, 609, 585, 586,
	587, 588, 590, 0, 0, 468, 467, 589, 946, 947,
	948, 0, 0, 0, 682, 0, 1138, 1128, 1127, 0,
	0, 0, 0, 0, 0, 592, 0, 593, 1129, 0,
	0, 0, 0, 0, 0, 583, 584, 0, 0, 0,
	0, 1130, 0, 0, 605, 424, 0, 0, 45, 573,
	570, 571, 575, 576, 577, 578, 0, 0, 0, 574,
	579, 464, 465, 0, 0, 0, 0, 0, 0, 562,
	0, 0, 591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 729, 0,
	0, 0, 0, 0, 0, 0, 559, 560, 0, 0,
	0, 0, 608, 0, 561, 731, 0, 557, 558, 563,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 593,
	0, 0, 0, 0, 0, 0, 606, 583, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 424, 0, 0,
	45, 573, 570, 571, 575, 576, 577, 578, 0, 0,
	0, 574, 579, 464, 465, 0, 0, 1135, 0, 0,
	0, 562, 0, 0, 591, 0, 569, 0, 1140, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 560,
	0, 0, 0, 0, 608, 0, 561, 0, 0, 557,
	558, 563, 0, 0, 0, 0, 1131, 1132, 1134, 592,
	0, 593, 1133, 0, 0, 732, 0, 0, 606, 583,
	584, 0, 0, 1453, 0, 0, 0, 0, 0, 875,
	0, 0, 45, 573, 570, 571, 575, 576, 577, 578,
	0, 0, 594, 574, 579, 464, 465, 0, 0, 0,
	0, 0, 0, 562, 0, 0, 591, 0, 569, 0,
	0, 0, 0, 0, 610, 0, 595, 596, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 560, 0, 0, 0, 0, 608, 0, 561, 0,
	0, 557, 558, 563, 0, 0, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 0, 0, 0, 0, 0, 0, 597,
	607, 603, 604, 601, 602, 600, 599, 598, 609, 585,
	586, 587, 588, 590, 594, 0, 468, 467, 589, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 1139,
	569, 0, 0, 0, 0, 0, 610, 0, 595, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 605, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 607, 603, 604, 601, 602, 600, 599, 598,
	609, 585, 586, 587, 588, 590, 594, 0, 468, 467,
	589, 79, 0, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 0,
	595, 596, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 607, 603, 604, 601, 602, 600,
	599, 598, 609, 585, 586, 587, 588, 590, 0, 0,
	468, 467, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 0, 122, 123, 0, 124, 125, 126, 128, 127,
	96, 97, 98, 102, 100, 99, 101, 73, 75, 605,
	71, 74, 80, 76, 77, 78, 92, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 93, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 0, 0,
	0, 0, 844, 682, 0, 1138, 1128, 1127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 0, 682, 0, 1138, 1128, 1127, 0, 0, 0,
	1130, 0, 0, 0, 0, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 682, 1130,
	1138, 1128, 1127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 1130, 730, 729, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 730, 729, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 0, 0, 0,
	0, 730, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 0, 731,
	0, 0, 0, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 1140, 1141, 0,
	0, 0, 0, 0, 0, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 1141, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1135, 0, 0, 0, 1131, 1132, 1134, 0, 0,
	0, 1133, 1140, 1141, 732, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 1131, 1132, 1134, 0, 0, 0,
	1133, 0, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	1131, 1132, 1134, 0, 0, 0, 1133, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1139,
}

var yyPact = [...]int16{
	564, -1000, -259, -1000, -1000, 1391, 433, 436, -1000, -1000,
	-1000, 937, 539, 533, 528, 250, 497, 941, 527, 949,
	550, 471, -1000, -212, -201, -1000, -97, 547, -1000, 1220,
	-1000, 4592, 4592, 4592, -1000, 305, 941, 941, 471, 132,
	471, 1405, 445, 1403, 748, -1000, 613, -1000, 1526, 611,
	-1000, 471, 949, 744, -1000, -1000, -1000, -1000, 227, 175,
	3230, 122, -149, -7, -1000, -1000, -1000, -1000, -1000, 1323,
	-1000, -1000, -1000, 1323, 82, 1390, 1323, 1390, -1000, 1323,
	1390, 41, 41, 41, 41, 41, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1387, 1386, -1000, 1323, 1323, 1323, 1323,
	1323, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1381, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1373, 99, 1373, 1329, 1329, -1000, -1000, 122,
	122, 1385, 949, 941, 1402, 1401, 949, -225, 949, 949,
	1579, -1000, -1000, -1000, 171, 949, 1509, 5738, 4592, 6887,
	949, -1000, 1508, 555, 949, 4972, -1000, 1463, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1377, 791, 941, 342, 301,
	1303, 506, 531, 466, 1080, 311, -1000, -1000, -1000, 856,
	-1000, 941, -1000, 1598, -1000, -1000, 310, -1000, 298, 742,
	938, 949, 1375, 181, 1374, 5561, 895, -1000, -274, -1000,
	-27, -1000, -1000, 828, 41, 1323, -1000, 41, 877, 41,
	41, -1000, -1000, 622, 1471, 622, 622, 622, 622, 928,
	928, -145, -145, -1000, -1000, -1000, 892, -1000, 890, 1373,
	-1000, -1000, -1000, 888, -1000, 949, 941, 1361, 1400, 949,
	949, 1524, 484, -1000, -1000, 1521, 1519, 1260, -1000, -1000,
	166, -1000, -1000, 445, 941, -1000, 607, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1393, -1000, 427, 553, 6121, 175, -1000, -1000, -1000, -1000,
	464, -1000, 1594, 1551, 357, -5, -208, 1079, -1000, -1000,
	1359, -1000, -1000, 8026, -1000, 1067, 1065, -1000, 1044, 1017,
	5, 941, -1000, -204, 109, -9, -1000, -1000, 1303, -1000,
	1358, 8026, 1516, -1000, 1487, 685, -1000, 5178, -1000, -245,
	-1000, -1000, 816, -1000, -245, -1000, -1000, -1000, 1303, -1000,
	1357, 1356, -1000, 1355, -1000, -1000, 1303, 1303, 1303, 606,
	-1000, -1000, -1000, -1000, -1000, 1257, 622, 41, 622, 1249,
	1245, 622, 622, -1000, -1000, 990, 677, -1000, -1000, -1000,
	-1000, 1216, -1000, 1201, -1000, 97, 96, -1000, 1244, 1301,
	-1000, 1197, 1300, 1399, 302, 949, 1354, 1352, 1314, 471,
	1314, 1545, 283, 949, 1579, 395, 1579, 445, 6504, 941,
	355, 941, -1000, -1000, 402, 4589, -1000, -1000, 1195, -1000,
	236, 1323, 435, 435, -206, 295, 287, -208, 1303, 1351,
	-1000, 464, 500, -1000, 8026, 205, 1303, 1303, 1303, 1303,
	7934, -1000, -1000, 601, -1000, -1000, -1000, 8449, 8449, 8449,
	8449, 8449, 8449, 8449, -1000, -1000, -1000, -1000, 14, -1000,
	-245, -1000, 957, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	605, 599, -1000, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
	1303, 8026, 1303, 1450, 1303, 1303, 1303, 1303, 1303, 1303,
	1303, 1303, 1303, 1303, 1303, 3492, 1303, 1303, 1303, 1303,
	-1000, -1000, -1000, -1000, -1000, -1000, -208, 1349, -1000, -1000,
	-1000, 742, -1000, 8026, 395, 579, 134, -1000, 1297, -1000,
	867, 1243, 5944, 1241, -1000, 8681, -1000, -1000, -1000, 891,
	-1000, 863, -1000, 860, 1237, 7404, 7588, 7588, 6504, -1000,
	-1000, 622, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41, 925, 41, -15, -23, -1000, 866, -1000, 834, 302,
	941, 949, 1231, 1296, -1000, 225, 1347, 395, 464, -1000,
	1563, 1606, -1000, 1314, 949, -1000, 481, 1547, -1000, -1000,
	1542, -1000, 1294, -1000, -1000, 1270, 1579, -1000, 1345, 941,
	-1000, -1000, 344, 941, -1000, -1000, -1000, -1000, -1000, 1239,
	464, 1504, -1000, -1000, -1000, 785, -1000, -1000, 757, 220,
	770, -1000, 941, -208, 1340, 8026, 464, 1185, 235, 8026,
	8026, 790, -1000, -1000, 334, 8357, 798, 701, 8449, 8449,
	8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449,
	8449, 8449, 8449, 3443, 953, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 976, -1000, 1314,
	936, 891, 891, 891, 1178, 7934, 526, 903, 903, 22,
	7934, 22, 22, 22, 22, 22, 83, -1000, -262, -1000,
	-1000, 5738, 6504, 7588, 7588, 2518, 8026, 7588, 7588, 7588,
	1530, 736, 526, 936, 1541, 891, 891, 891, 891, -1000,
	891, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 74,
	-1000, -1000, -1000, -1000, -1000, -1000, 7588, 7588, 7588, 7588,
	-1000, 941, 1303, 500, 1180, -163, 8026, 1338, 685, -1000,
	-1000, 1202, -245, -1000, -1000, -1000, -149, -1000, -1000, -1000,
	-1000, 891, 7588, 1159, 1178, -1000, 551, -1000, 589, 1159,
	551, 1159, 1303, -1000, 622, -1000, 622, -1000, -1000, 1182,
	1152, 1146, 1337, 1333, -231, 828, 302, 1174, 1172, 1555,
	1561, 1314, 1518, 1467, -1000, 891, 1513, 941, -1000, -1000,
	-1000, -1000, -1000, 200, 734, 941, 7149, 1233, -1000, 799,
	1332, 93, 410, 1395, 2125, 143, -1000, 967, 723, 924,
	722, 718, 706, 700, 699, 694, 691, 680, 679, 672,
	-1000, -1000, -1000, -1000, -1000, 1597, -1000, -1000, -1000, 1589,
	1331, 1330, 464, 500, 1168, 1239, -1000, -108, 334, 404,
	-1000, -1000, 805, -1000, -1000, 3223, 8449, 8449, 8449, -1000,
	-1000, -1000, -1000, 798, 8449, 8449, 8449, 3123, 3223, 3207,
	241, 951, 22, 12, 12, 20, 20, 20, 20, 20,
	367, 367, -1000, -123, -1000, 1323, -1000, -1000, -1000, 891,
	891, -1000, -1000, -1000, -1000, 8026, -1000, 891, -1000, -245,
	915, -1000, -1000, 899, 1303, -1000, 1159, 1159, 584, 1292,
	8541, 1323, -1000, 1323, 1329, -1000, -1000, 115, 1323, 112,
	-1000, -1000, -1000, -1000, 1329, -1000, -1000, -1000, -1000, -1000,
	1323, 1323, -1000, -1000, 1323, 1323, -1000, 1323, 1323, 652,
	1291, 1256, 1159, 7588, -1000, 688, -1000, 8026, 891, 949,
	-1000, -1000, -1000, -1000, -1000, -1000, 1159, 891, 1279, 1159,
	1159, 1165, -1000, 8026, 235, 1398, -1000, -1000, 575, -1000,
	1143, 1123, -1000, -1000, 1159, 7588, -257, -1000, -1000, -1000,
	958, -1000, -1000, 4206, -257, -257, 7588, -1000, -1000, -1000,
	-1000, -231, 302, 464, 1569, 1327, 1111, 1569, 1239, 1496,
	8026, 8026, 1563, -1000, 1314, -1000, -1000, 1530, -1000, -1000,
	766, -1000, 1314, 1226, 195, 130, 8026, -1000, 2780, -1000,
	7149, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1563, 8026, -1000, -1000, -1000, -1000, -1000, 941,
	3683, 941, 941, 941, 393, 8026, 965, -1000, -1000, -1000,
	-1000, -1000, 949, 1093, 4209, 799, 799, 4209, 799, 799,
	464, 464, 1326, 1325, 279, -1000, 941, -1000, -148, 2125,
	941, -1000, 820, -1000, -1000, 818, 787, 818, 818, 818,
	818, 818, 246, 778, 408, 435, 435, 941, 464, 1157,
	235, 1239, 1395, -1000, -1000, -1000, -1000, 3223, 3223, 3223,
	-1000, 3123, 3223, 2907, -1000, 8449, 8449, 94, -1000, -1000,
	526, -1000, 57, -1000, -245, -1000, -1000, 3809, 953, 8026,
	-1000, 273, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3809, 8449, 8449, 8449, 8449, -114,
	1214, 731, -1000, 8026, 417, -1000, -1000, -1000, -1000, -1000,
	-1000, 400, 941, 500, -1000, 1588, -181, 397, -1000, -1000,
	-1000, -1000, -1000, 1303, -1000, -1000, 587, -1000, -1000, 891,
	1569, 1033, 1142, 1239, 8026, 395, -231, 1239, -1000, -1000,
	1596, 657, 375, 1277, -1000, 412, 1555, 891, 1396, -1000,
	-1000, -138, 8026, 7149, 7349, 526, 7349, -1000, 7149, 1976,
	1555, 8957, 436, 898, 883, 1276, 382, -1000, 3057, 817,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 941, 1585, 1584, 1580, 1574,
	9002, 8026, 8026, 1540, -1000, -1000, 4209, -1000, -1000, -1000,
	-1000, -1000, 1114, 1100, 464, 464, 1324, 1303, 1096, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 742, 742,
	1063, 1057, 1239, -1000, 1395, -1000, -1000, 8449, 3223, 3223,
	-33, -1000, 899, -1000, 891, 1323, 891, 478, -1000, -1000,
	891, 2321, 2123, 1941, 309, 1303, -105, -1000, 526, 8026,
	949, -1000, 235, 435, 435, -1000, -1000, -1000, 135, 738,
	685, 685, 772, 13, -1000, 1560, 384, 5355, -1000, 1239,
	1569, 1239, 1395, 526, 1053, 1569, 1395, -1000, 1455, 8026,
	8026, 8026, -1000, 1496, -1000, 7588, -1000, -1000, -252, 526,
	2780, 2806, -1000, -1000, 243, 6662, -1000, 1496, 7149, 726,
	-1000, 728, -1000, 7349, 911, 949, 1068, -1000, 1085, 1321,
	-1000, -1000, -1000, 1511, 840, 635, 941, 190, 4592, -1000,
	-1000, 1273, 3440, 26, -1000, -1000, -1000, 671, 585, 886,
	-1000, 1468, -1000, -1000, 3683, 1500, -1000, -1000, -1000, -1000,
	-1000, 7349, -1000, 1263, 891, 734, 197, -1000, 348, 1051,
	1049, 464, 941, -1000, 2125, -1000, -1000, 365, 1239, 1395,
	-1000, 3223, -1000, -1000, -1000, -1000, -1000, 8449, -1000, -1000,
	8449, -1000, 8449, -1000, 8449, -1000, 8449, 8449, 891, 885,
	526, 1320, -1000, -1000, -1000, 685, -1000, 685, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 116, -1000, 1558, 891, -1000,
	1395, 1239, -1000, -1000, -1000, 1239, -1000, 1444, 526, 526,
	-1000, -1000, 1253, 8026, 6279, -1000, -1000, -1000, -1000, 2481,
	7297, 448, 2336, 238, 949, -1000, 238, 1163, 883, 949,
	-1000, -1000, 936, 883, 883, 883, 883, 883, -1000, 1424,
	1422, -1000, 1449, 1426, 1460, 949, 1043, 840, 614, 1303,
	-1000, 950, -1000, -1000, -1000, 1511, 1539, -1000, 3823, 1273,
	26, 1272, -1000, -42, -46, 7066, 6504, 622, -1000, -1000,
	-1000, -1000, -1000, 941, 2008, -1000, 128, 193, 159, -1000,
	162, 1239, 1239, 1041, 891, -1000, 949, 1395, -1000, 2556,
	2556, 2556, 2556, 2556, 114, -1000, -1000, 941, -1000, -1000,
	-1000, 583, 8026, -1000, -1000, -1000, 1395, -1000, 1569, 883,
	526, -1000, -1000, 5130, -1000, -1000, 8026, -1000, 8026, 7349,
	-1000, 1081, 1303, -1000, 1569, 883, 1155, -1000, 1247, -1000,
	669, 1321, 1319, 1397, 933, -1000, -1000, -1000, -1000, 1420,
	-1000, 1416, -1000, -1000, -1000, -1000, -142, 519, 513, 510,
	941, -1000, 1314, -1000, 1272, 26, -28, -1000, -1000, -1000,
	-1000, 526, 597, -1000, 1269, -1000, 7349, -1000, -1000, 165,
	-1000, 1395, 1395, -1000, -1000, 1307, -1000, -1000, -1000, -1000,
	-1000, -1000, 891, 183, -167, 1038, 6504, 1009, -1000, 526,
	-1000, 1567, 1265, 446, 7149, 8378, 8976, 1278, 936, 1303,
	-1000, 1019, 941, 1563, 1155, -1000, 1569, 936, 8026, -1000,
	-1000, 8026, 1305, -1000, 8026, -1000, -1000, -1000, -1000, 1304,
	1303, 1303, 1303, 1032, -1000, -1000, -1000, -1000, -53, -61,
	-1000, 8026, 2066, -1000, -1000, -1000, -1000, 941, -1000, 1442,
	-119, -185, -1000, -1000, -1000, 891, 8026, 1565, 1557, -1000,
	198, 726, -1000, -1000, 1490, 1121, 1259, -1000, -1000, 7496,
	891, 1036, 578, 1032, 1555, -1000, 1563, -1000, 526, 526,
	395, 526, -195, 395, 395, 395, 882, 941, -1000, -1000,
	-1000, 526, 5896, 1030, -1000, 1436, -1000, -1000, -1000, -1000,
	8026, 8026, 5513, 276, -1000, 1303, -1000, -1000, 1275, 941,
	941, -1000, -1000, 1555, 1026, 1022, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1013, 1013, 1013, 614, -1000,
	-1000, -1000, -140, 526, 1263, 425, 1592, -1000, 1303, -1000,
	1314, 570, -1000, -1000, -1000, -1000, -195, -1000, -1000, -1000,
	-142, -182, -1000, 936, 1259, 891, 941, -1000, -1000, -192,
	1248, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1863, 4, 40, 1862, 1859, 1858, 1856, 1854, 1852,
	1849, 1848, 1843, 1839, 31, 22, 53, 29, 48, 1836,
	1835, 1834, 1832, 1831, 82, 1830, 1829, 1820, 1819, 77,
	1818, 1817, 1813, 1812, 73, 97, 93, 138, 1282, 26,
	35, 39, 45, 1811, 25, 1806, 1801, 57, 1800, 42,
	1798, 1790, 234, 1789, 1787, 6, 50, 94, 106, 72,
	1786, 1784, 90, 1507, 1782, 1779, 81, 1766, 1763, 102,
	15, 71, 3, 23, 9, 1761, 339, 1, 1757, 88,
	1755, 1754, 1748, 1747, 43, 1745, 58, 68, 7, 62,
	1742, 21, 76, 44, 14, 10, 2, 54, 28, 1739,
	16, 41, 17, 1738, 66, 1736, 111, 49, 63, 91,
	0, 46, 83, 1735, 1733, 1732, 694, 98, 30, 13,
	55, 79, 1731, 69, 101, 56, 99, 96, 1730, 100,
	1729, 1720, 1715, 1714, 1713, 1879, 824, 117, 74, 51,
	1708, 1704, 92, 344, 340, 89, 342, 1027, 75, 1703,
	1702, 1700, 1698, 107, 1697, 70, 95, 27, 603, 1696,
	1692, 1688, 1687, 1681, 1680, 1678, 103, 1677, 86, 84,
	142, 170, 47, 1670, 1668, 1667, 1666, 85, 1665, 1664,
	1662, 60, 1661, 1660, 104, 67, 120, 113, 114, 1659,
	1658, 80, 78, 1657, 110, 112, 1656, 105, 65, 24,
	121, 59, 1655, 1654, 1653, 8, 5, 1649, 1647, 1646,
	1645, 1644, 1643, 64, 1640, 87, 1636, 11, 1629, 1628,
	52, 1627, 1622, 1620, 1618, 1616, 445, 910, 1615, 122,
	118, 1612, 115,
}

var yyR1 = [...]uint8{
	0, 222, 223, 223, 1, 1, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 20, 20, 20, 20, 20, 20,
	20, 225, 225, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 27, 27, 7, 8, 8, 8, 228, 228,
	47, 47, 93, 93, 9, 9, 9, 9, 10, 10,
	202, 202, 201, 203, 203, 11, 11, 11, 11, 11,
	196, 196, 196, 196, 196, 12, 12, 199, 199, 199,
	14, 14, 14, 14, 15, 15, 16, 16, 16, 18,
	18, 98, 98, 102, 102, 102, 103, 103, 103, 103,
	214, 214, 122, 122, 224, 224, 229, 229, 229, 229,
	229, 229, 229, 194, 194, 194, 194, 195, 195, 195,
	195, 197, 197, 198, 198, 198, 198, 198, 198, 200,
	200, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 13, 13, 28, 28, 71, 71, 108, 108, 175,
	175, 175, 176, 176, 176, 176, 176, 176, 178, 178,
	179, 179, 114, 114, 180, 180, 23, 160, 161, 161,
	161, 161, 161, 161, 161, 161, 147, 147, 147, 125,
	125, 125, 125, 125, 125, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 186, 186, 186, 186, 186, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	188, 189, 190, 182, 182, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 137,
	137, 137, 137, 137, 137, 181, 181, 177, 177, 177,
	177, 129, 129, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 128, 128, 128, 128, 128, 128, 128,
	133, 133, 130, 130, 130, 130, 130, 130, 130, 130,
	126, 126, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 134, 134, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 146, 146, 135, 135, 144,
	144, 145, 145, 145, 136, 136, 136, 143, 143, 143,
	140, 140, 141, 141, 142, 142, 142, 138, 138, 138,
	139, 139, 139, 149, 171, 171, 171, 173, 173, 174,
	174, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 159, 159, 191, 191, 192,
	192, 193, 193, 170, 170, 170, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 158, 158,
	168, 168, 169, 169, 166, 166, 166, 167, 153, 153,
	153, 153, 153, 154, 154, 155, 155, 155, 155, 150,
	150, 151, 151, 152, 152, 184, 184, 184, 218, 218,
	218, 218, 218, 218, 219, 219, 185, 185, 156, 156,
	157, 157, 164, 164, 164, 164, 230, 230, 162, 162,
	162, 163, 163, 163, 231, 24, 25, 25, 26, 26,
	26, 31, 31, 31, 29, 29, 30, 30, 36, 36,
	35, 35, 37, 37, 37, 37, 113, 113, 113, 112,
	112, 215, 215, 215, 215, 215, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 205, 205, 204, 204, 206,
	206, 206, 206, 206, 206, 206, 206, 54, 54, 91,
	91, 91, 94, 94, 43, 43, 43, 43, 44, 44,
	45, 45, 46, 46, 120, 120, 119, 119, 119, 118,
	118, 48, 48, 48, 50, 49, 49, 49, 49, 51,
	51, 53, 53, 52, 52, 55, 55, 55, 55, 56,
	56, 92, 92, 38, 38, 38, 38, 38, 38, 38,
	38, 105, 105, 58, 58, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 68, 68, 68, 68, 68, 68, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 34, 34,
	69, 69, 69, 76, 70, 70, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 66, 66, 66, 66, 66, 66,
	66, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 232, 232, 67, 67, 67, 67,
	32, 32, 32, 32, 32, 121, 121, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 124,
	124, 124, 124, 124, 124, 124, 124, 80, 80, 33,
	33, 78, 78, 79, 107, 107, 81, 81, 77, 77,
	77, 207, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 59, 59, 82, 82, 83, 83, 216, 216,
	217, 84, 84, 85, 85, 86, 87, 87, 87, 88,
	88, 88, 88, 89, 89, 89, 61, 61, 61, 61,
	61, 61, 90, 90, 90, 90, 95, 95, 72, 72,
	74, 74, 73, 75, 96, 96, 100, 97, 97, 101,
	101, 101, 101, 101, 21, 22, 99, 99, 99, 115,
	115, 115, 106, 106, 104, 104, 110, 111, 111, 111,
	111, 116, 116, 117, 117, 208, 208, 208, 209, 209,
	209, 210, 210, 211, 212, 212, 213, 221, 221, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 226, 227,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 4, 1, 1, 0, 1, 0, 3, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 4, 4, 0, 1,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 9, 6, 6, 8, 8, 5,
	8, 7, 4, 0, 2, 4, 6, 2, 4, 2,
	1, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 2, 1, 1, 2, 0, 4, 3, 4, 3,
	3, 3, 3, 3, 3, 3, 2, 4, 6, 2,
	3, 2, 3, 1, 3, 0, 2, 0, 2, 2,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 1, 1,
	0, 1, 1, 3, 3, 2, 2, 2, 1, 1,
	1, 1, 4, 5, 4, 4, 4, 1, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 3, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 5,
	5, 8, 8, 13, 11, 1, 1, 2, 2, 10,
	8, 9, 7, 7, 5, 0, 1, 1, 0, 1,
	1, 1, 2, 2, 1, 2, 0, 3, 0, 1,
	1, 3, 0, 4, 1, 3, 2, 1, 1, 2,
	1, 1, 1, 1, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 3, 6, 4, 7, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 0, 4, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 2, 1,
	2, 0, 3, 1, 1, 3, 4, 4, 4, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 4, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 1, 4, 5, 5, 5, 5, 6,
	4, 4, 4, 6, 6, 8, 6, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 9, 7, 5, 4,
	4, 3, 3, 3, 1, 3, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 2, 2, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 0, 2, 1, 3,
	5, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -222, -1, -19, -20, -23, 126, 127, -223, 391,
	-160, 58, -218, -219, 276, -180, 135, 148, 168, 169,
	361, 133, 373, 374, 150, 376, 79, -104, 138, -161,
	-147, -110, 63, 36, 61, 134, 134, 134, 136, 213,
	136, -110, -110, -77, 139, 61, -116, 63, -52, -116,
	61, 133, -106, 139, 376, 373, 374, 341, 133, 60,
	59, -148, -125, -129, -126, -131, -130, -132, -110, -127,
	-128, 249, 353, 246, 250, 247, 252, 253, 254, 120,
	251, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 255, 267, 33, 155, 239, 240, 241, 244,
	243, 245, 242, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 231, 232, 234, 235, 236, 238, 237, -148,
	-148, -110, 56, 212, -110, -110, -106, 214, -106, 56,
	-194, 19, 192, 193, 205, 56, 81, 123, 25, 123,
	-106, -52, 81, -52, 305, -164, -230, 356, 37, -147,
	-149, -153, -150, -151, -152, -165, -154, 142, 140, 150,
	389, 144, 145, 276, -158, 146, 134, 151, 73, 81,
	-186, 142, -189, 56, 284, 290, 140, 151, 150, 389,
	71, 143, 25, 363, 365, 31, 32, -142, 392, 278,
	-140, 287, -135, 58, -135, -134, 248, -136, 58, -135,
	-136, -135, -136, -138, 250, -138, -138, -138, -138, 58,
	58, -135, -135, -135, -135, -135, 58, -144, 58, -133,
	233, -144, -145, 58, -145, 56, 57, -52, -110, 56,
	56, -52, -214, 386, 387, -52, -52, -197, -195, 8,
	9, 10, 206, -52, 26, -111, -117, -110, 298, 147,
	-109, -116, 131, 193, 364, 80, 25, 27, 284, 290,
	192, 84, 120, 16, 85, 199, 373, 374, 119, 76,
	342, 126, 52, 334, 335, 332, 197, 344, 345, 333,
	291, 204, 20, 31, 386, 10, 28, 153, 24, 113,
	128, 194, 89, 88, 156, 160, 161, 26, 154, 75,
	200, 202, 19, 55, 146, 11, 363, 13, 14, 378,
	365, 139, 138, 100, 377, 134, 50, 8, 122, 29,
	387, 97, 46, 151, 203, 48, 98, 17, 336, 337,
	34, 351, 162, 115, 53, 40, 379, 81, 380, 73,
	56, 305, 198, 79, 15, 51, 163, 381, 148, 201,
	385, 99, 129, 341, 49, 195, 382, 132, 196, 6,
	347, 33, 152, 47, 170, 133, 292, 383, 87, 137,
	74, 169, 5, 150, 9, 384, 54, 57, 338, 339,
	340, 38, 86, 12, 149, 355, 77, -125, -117, -109,
	-52, 26, 131, -52, -162, 59, -111, 71, -109, 36,
	58, -185, 56, 81, -156, -110, 151, -158, 61, 134,
	-184, 373, 374, -226, 58, -158, -158, 61, 134, 151,
	61, 151, 73, 19, -110, 9, 151, 151, -185, 63,
	-52, 58, -182, 364, 16, 58, -187, 58, -188, 63,
	64, 65, 110, 66, 73, -137, 72, -58, 279, -66,
	332, 335, 334, 280, 74, 75, -110, 350, 349, -116,
	-190, 65, 393, -141, 288, 65, -138, -135, -138, 65,
	61, -138, -138, -139, 120, 119, 33, -139, -139, -139,
	-139, -146, 63, -146, -143, 355, 356, -143, 65, 65,
	-144, 65, -52, -110, 58, 56, -52, -52, 25, 136,
	25, -175, 25, 56, 59, 206, -194, -110, 123, 57,
	-114, 142, -153, 150, 131, 90, -111, -230, -169, -166,
	-110, 151, 10, 9, 19, 146, 140, 150, 389, -184,
	61, 58, -38, -57, 81, -63, 31, 26, 9, 76,
	-226, -62, -58, -77, -207, -75, -76, 120, 121, 109,
	110, 117, 82, 122, -66, -64, -65, -67, -210, 179,
	63, 64, -110, 62, 72, 65, 66, 67, 68, 73,
	-116, 310, -73, 48, 49, 342, 343, 344, 345, 351,
	346, 85, 38, 40, 255, 279, 280, 332, 340, 339,
	338, 336, 337, 334, 335, 388, 139, 333, 115, 341,
	277, 61, 61, 61, 61, -184, 150, -156, -110, 375,
	-186, 389, -137, -226, 58, -38, 25, 31, -59, 65,
	110, -187, 58, -188, -177, 388, 65, 66, -177, -226,
	-135, 58, -135, 58, 58, -226, -226, -226, 123, 60,
	-139, -138, -139, 60, 60, -139, -139, 61, 61, 120,
	60, 59, 60, 239, 239, 60, 59, 60, 59, 58,
	57, 56, -168, -169, -66, -110, -52, 58, 58, -2,
	-3, -4, 6, -226, -106, -2, -176, 19, 176, 177,
	-52, -195, -91, -110, 151, -197, -194, -111, -110, -225,
	134, 151, -110, 142, -153, -163, -111, 63, 65, 60,
	59, -135, -167, 282, -135, -155, 172, 173, 33, 174,
	-155, 375, 151, 151, -184, -226, 58, -169, -227, 80,
	79, 97, 207, 60, -38, -60, 100, 81, 98, 99,
	84, 106, 105, 116, 109, 110, 111, 112, 113, 114,
	115, 107, 108, 388, 119, 90, 91, 92, 93, 94,
	95, 96, 101, 102, 103, 104, -105, -226, -76, -226,
	-226, -226, -57, -2, -70, -226, -38, 124, 125, -63,
	-226, -63, -63, -63, -63, -63, -63, -211, 278, -177,
	63, 123, 123, -226, -226, -226, -226, -226, -226, -226,
	-226, -80, -38, -226, 41, -226, -226, -226, -226, -232,
	-226, -232, -232, -232, -232, -232, -232, -124, 120, 250,
	155, 241, -127, -126, 256, 255, -226, -226, -226, -226,
	-184, 58, -185, -38, -91, 60, 58, 365, 59, 65,
	60, -187, 63, 60, 281, 122, -125, -227, 60, 60,
	60, -36, 24, -35, -70, -37, -38, 111, -116, -35,
	-38, -35, -111, -139, -138, 63, -138, 289, 289, 65,
	65, -168, -110, -52, 60, 58, 58, -91, -169, -84,
	15, -26, 5, -24, -231, -2, -52, 137, 21, 6,
	8, 9, 10, 19, -108, 59, 25, -197, -224, 58,
	-110, 150, -110, -171, -173, 355, -172, 57, 147, 71,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 61,
	-166, -87, 27, 28, -185, 56, 73, 175, -185, 56,
	-156, -184, 58, -38, -169, 60, -181, 174, -38, -38,
	-68, 73, 81, 74, 75, -63, 21, 22, 23, -69,
	-73, -76, 69, 100, 98, 99, 84, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -129, 240, -124, -127, -121, 61, 63, 61,
	-77, -110, -227, -227, -227, 59, -227, -2, -62, 63,
	-110, -62, -110, 392, -111, -111, -35, -35, -38, -123,
	120, 246, 155, 241, 235, 265, 266, 286, 239, 287,
	228, 220, 225, 238, 236, 222, 237, 221, 234, 231,
	244, 243, 245, 256, 247, 252, 254, 253, 251, -38,
	-37, -37, -35, -29, 24, -78, -79, 86, -77, 19,
	-227, -227, -227, -227, -227, 248, -35, -36, -35, -35,
	-35, -157, -110, -226, -227, 60, 361, 362, -38, 58,
	-59, 60, -142, -227, -35, 59, -227, -227, -113, -112,
	25, -110, 63, 123, -227, -227, -226, -139, -139, 60,
	60, 60, 58, 58, -92, 377, -168, 60, 60, -88,
	17, 16, -5, -3, -226, 21, 24, -31, 44, 45,
	-25, -227, 25, -157, 194, -107, 86, -110, -198, -200,
	215, -17, -14, -6, -8, -7, -10, -9, -11, -12,
	-13, -21, -3, 139, -15, -16, -27, 10, 9, 20,
	33, 198, 199, 204, 200, 149, -28, -22, 8, 341,
	160, 161, 56, -229, -110, 109, 90, 63, -147, 59,
	58, 58, 373, 374, 140, -170, 56, -172, 355, 58,
	357, 61, -159, 90, 63, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 9, 10, 58, 58, -169,
	-227, 60, -171, 348, 73, 74, 75, -63, -63, -63,
	-69, -63, -63, -63, -34, 156, 80, 355, -227, -227,
	-38, -227, -212, -213, 63, -227, -227, 59, 57, 59,
	-135, -135, -135, -145, 226, -135, 226, -145, -135, -135,
	-135, -135, -135, -135, 25, 59, 11, 59, 11, -227,
	-35, -81, -79, 89, -38, -227, -116, -227, -227, -227,
	-227, 60, 59, -38, -181, 56, 60, -183, 60, 60,
	-227, -37, -215, 390, -112, 111, -117, -215, -215, -36,
	-92, -168, -169, -56, 12, 58, 60, -56, -171, -89,
	19, 34, -38, -85, -86, -38, -84, -2, -29, 70,
	-2, -178, 57, 195, 215, -38, 391, -200, 215, -198,
	-84, -38, -24, -24, -24, -202, -110, -201, -24, -221,
	-220, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, -110, -110, -110, -196, 40, 201, 202, 203,
	-38, -110, -226, -52, 60, -229, -110, -229, -229, -229,
	-229, -229, -169, -169, 58, 58, 151, -110, -174, -172,
	-110, 65, -191, 56, 77, 65, -191, -191, -191, -191,
	-191, -192, 190, 191, 65, -193, -192, 65, -155, -155,
	-157, -169, 60, -181, -171, -170, -34, 80, -63, -63,
	239, 393, 59, -177, -123, 120, -121, -38, -138, 61,
	-123, -63, -63, -63, -63, 352, -84, 88, -38, 87,
	143, -110, -227, 10, 9, 361, 362, 60, 216, 367,
	368, 162, 369, 174, 370, 371, -226, 123, -227, -56,
	60, 60, -171, -38, -91, -92, -171, 9, 100, 59,
	18, 59, -87, -88, -227, -30, 47, -179, 355, -38,
	-198, -199, -200, -200, -198, 391, 88, -88, 87, -18,
	-14, -15, -17, 215, -104, 11, -47, -52, -40, -41,
	-42, -43, -54, -76, -226, -52, 59, -203, -120, 196,
	25, -97, -122, 217, -101, 300, 299, -111, 310, -99,
	298, 250, 297, -191, 59, -110, 11, 11, 11, 11,
	-200, 215, -71, -70, -71, -108, 19, 60, 60, -169,
	-169, 58, -226, 60, 59, -185, -185, 60, 60, -171,
	-170, -63, 289, -213, -227, -227, -227, 59, -227, -227,
	59, -227, 19, -227, 59, -227, 19, -226, -33, 347,
	-38, -52, -181, -155, -155, 355, -59, 16, -59, -59,
	-59, 65, 368, 162, 370, 16, -227, 163, -84, 111,
	-171, -56, -171, -170, 60, -56, -170, 42, -38, -38,
	-86, -89, -35, 389, 391, -200, 88, 88, -89, -198,
	89, 89, -199, -53, 29, -52, -52, -47, -228, 59,
	11, 57, 33, 59, -48, -50, -49, -51, 46, 50,
	52, 47, 48, 49, 53, -120, -40, -226, -119, 163,
	-118, 25, -116, 63, -201, -110, 197, -125, 59, -97,
	217, -98, -102, 301, 303, 90, 123, -115, -110, 63,
	31, 33, -220, 29, -199, -227, -107, 194, -208, 208,
	81, 60, 60, -169, -110, -172, 143, -171, -170, -63,
	-63, -63, -63, -63, -63, -227, 63, 58, -59, -59,
	372, -116, 16, -227, -170, -171, -171, 43, -39, 11,
	-38, 88, -200, 391, -15, -18, 139, -16, 139, 391,
	88, -93, 163, -52, -93, 57, -40, -52, -96, -100,
	-77, -41, -42, -42, -41, -42, 46, 46, 46, 51,
	46, 51, 46, -49, -116, -227, -55, 54, 138, 55,
	-226, -118, 19, -101, -98, 59, 302, 304, 305, 56,
	77, -38, -111, -139, -157, 88, 215, 195, -209, 209,
	208, -171, -171, 60, -227, -52, -170, -227, -227, -227,
	-227, -227, -32, 100, 355, -157, 123, -216, -217, -38,
	-170, -56, -40, 88, 89, -38, -38, -61, 33, 38,
	-2, -226, -226, -56, -40, -56, -39, 59, 90, -45,
	-44, 56, 57, -46, 56, -44, 46, 46, -205, 355,
	134, 134, 134, -94, -110, -2, -102, -103, 306, 303,
	309, 90, -199, 211, 210, -170, -170, 58, -227, 353,
	53, 358, 60, -111, -227, -84, 59, -82, 13, 139,
	-198, -18, -18, -95, 56, -96, -72, -74, -73, -226,
	-2, -90, -110, -94, -84, -56, -56, -100, -38, -38,
	58, -38, 58, -226, -226, -226, -227, 59, 303, 307,
	308, -38, 391, -157, 43, 354, 359, -227, -217, -83,
	14, 16, 391, 30, -95, 59, -227, -227, -227, 59,
	123, -227, -88, -84, -91, -204, -206, 378, 379, 380,
	381, 382, 383, 384, 385, -91, -91, -91, -119, -110,
	88, 60, 43, -38, -70, 88, 151, -74, 38, -2,
	-226, -110, -110, -88, 60, 60, 59, -227, -227, -227,
	-55, 355, 139, 9, -72, -2, 123, -206, -205, 358,
	-96, -227, -110, 359,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 824, 1, 3,
	6, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 822, 429, 430, 431, 434, 0, 0, 825, 0,
	169, 213, 213, 213, 826, 0, 0, 0, 822, 0,
	822, 0, 748, 0, 0, -2, 0, 832, 0, 543,
	831, 822, 0, 0, 435, 432, 433, 165, 0, 442,
	0, 176, 344, 340, 180, 181, 182, 183, 184, 327,
	262, 290, 291, 327, 314, 334, 327, 334, 297, 327,
	334, 347, 347, 347, 347, 347, 305, 306, 307, 308,
	309, 310, 311, 0, 0, 282, 327, 327, 327, 327,
	327, 288, 289, 316, 317, 318, 319, 320, 321, 322,
	323, 0, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 329, 280, 329, 331, 331, 278, 279, 177,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 167, 444, 0, 447, 170,
	171, 172, 173, 174, 175, 0, 436, 438, 0, 425,
	0, 0, 0, 0, 0, 0, 398, 399, 186, 0,
	188, 0, 190, 0, 192, 193, 0, 195, 197, 436,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 346,
	342, 341, 261, 0, 347, 327, 315, 347, 0, 347,
	347, 298, 299, 350, 0, 350, 350, 350, 350, 0,
	0, 337, 337, 285, 286, 287, 0, 273, 0, 329,
	281, 275, 276, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 149, 0, 121, 117,
	118, 119, 116, 0, 0, 749, 0, 827, 828, 829,
	-2, 833, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 22, 544, 834,
	0, 823, 162, 0, 0, 0, 448, 450, 830, 446,
	0, 408, 0, 0, 0, 439, 386, 0, 394, -2,
	0, 426, 427, 841, 1005, 0, 0, 389, 391, 0,
	425, 438, 187, 0, 0, 0, 194, 196, 0, 200,
	201, 841, 0, 233, 0, 0, 214, 0, 217, -2,
	220, 221, 0, 223, 257, 226, 227, 228, 0, 230,
	327, 327, 253, 0, 563, 564, 0, 0, 0, 0,
	231, 232, 345, 179, 343, 0, 350, 347, 350, 0,
	0, 350, 350, 300, 351, 0, 0, 301, 302, 303,
	304, 0, 325, 0, 283, 0, 0, 284, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 438, 29, 163, 0, 0, 449, 445, 0, 402,
	327, 327, 0, 0, 0, 0, 0, 425, 0, 0,
	393, 0, 0, 553, 841, 559, 561, 0, 0, 0,
	841, 606, 607, 608, 609, 610, 611, 841, 841, 841,
	841, 841, 841, 841, 638, 639, 640, 641, 0, 643,
	-2, 753, 748, 755, 756, 757, 758, 759, 760, 761,
	0, 0, 803, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 674, 684, 684,
	684, 684, 684, 684, 684, 0, 0, 0, 0, 0,
	842, 387, 388, 390, 392, 396, 425, 0, 439, 212,
	189, 436, 191, 841, 0, 0, 0, 234, 0, 762,
	0, 0, 0, 0, 219, 0, 222, 224, 225, 0,
	249, 0, 251, 0, 0, -2, 841, 841, 0, 328,
	292, 350, 294, 335, 336, 295, 296, 352, 348, 349,
	347, 0, 347, 0, 0, 324, 0, 332, 0, 0,
	0, 0, 0, 400, 401, 327, 0, 0, 0, -2,
	771, 0, 454, 0, 0, -2, 0, 0, 150, 151,
	147, 122, 120, 509, 510, 0, 0, 750, 104, 0,
	31, 32, 439, 438, 30, 443, 451, 452, 453, 354,
	0, 776, 406, 407, 405, 436, 415, 416, 0, 0,
	436, 437, 438, 425, 0, 841, 0, 0, 255, 841,
	841, 0, 558, 1006, 556, 841, 0, 0, 841, 841,
	841, 841, 841, 841, 841, 841, 841, 841, 841, 841,
	841, 841, 841, 0, 0, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 560, 0, 577, 0,
	0, 0, 553, 36, 0, 841, 604, 0, 0, 629,
	841, 630, 631, 632, 633, 634, 635, 642, 0, 752,
	754, 0, 0, 841, 841, 841, 841, 841, 841, 841,
	464, 0, 738, 0, 0, 0, 0, 0, 0, 676,
	0, 677, 678, 679, 680, 681, 682, 683, 729, 0,
	731, 732, 733, 734, 735, 736, 841, -2, 841, 841,
	397, 0, 0, 0, 0, 0, 841, 209, 0, 763,
	215, 0, 257, 218, 258, 259, 344, 229, 250, 252,
	254, 0, 841, 0, 0, 470, 476, 472, 0, 0,
	476, 0, 0, 293, 350, 326, 350, 338, 339, 0,
	0, 0, 0, 0, 551, 1005, 0, 0, 0, 779,
	0, 0, 458, 461, 456, 36, 0, 0, 153, 154,
	155, 156, 157, 0, 744, 0, 0, 0, 23, 106,
	0, 0, 439, 383, 355, 0, 357, 0, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 404, 777, 778, 409, 0, 417, 418, 410, 0,
	0, 0, 0, 0, 0, 354, 424, 0, 554, 555,
	557, 581, 0, 583, 585, 565, 841, 841, 841, 569,
	600, 601, 602, 0, 841, 841, 841, 598, 573, 0,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 626, 0, 637, 327, 627, 695, 696, 0,
	0, 748, 579, 580, 603, 841, 802, 36, 624, 257,
	0, 625, 636, 0, 749, 751, 0, 0, 0, 0,
	-2, 327, 700, 327, 331, 703, 704, 705, 327, 708,
	710, 711, 712, 713, 331, 715, 716, 717, 718, 719,
	327, 327, 722, 723, 327, 327, 726, 327, 327, 0,
	0, 0, 0, 841, 465, 746, 741, 841, 0, 0,
	671, 672, 673, 675, 685, 730, 0, 0, 469, 0,
	0, 0, 440, 841, 255, 202, 205, 206, 0, 235,
	0, 0, 260, 644, 0, 841, 481, 650, 473, 477,
	0, 479, 480, 0, 481, 481, -2, 312, 313, 330,
	333, 551, 0, 0, 549, 0, 0, 549, 354, 783,
	841, 841, 771, 38, 0, 459, 460, 464, 462, 463,
	455, 37, 0, 158, 0, 0, 841, 511, 19, 123,
	0, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 771, 841, 82, 83, 454, 454, 454, 0,
	454, 0, 0, 0, 70, 841, 0, 814, 42, 43,
	143, 144, 0, 0, -2, 106, 106, -2, 106, 106,
	0, 0, 0, 0, 0, 353, 0, 358, 0, 0,
	0, 361, 0, 376, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 354, 383, 256, 582, 584, 586, 566, 567, 568,
	570, 598, 574, 0, 571, 841, 841, 0, 562, 578,
	605, -2, 0, 844, 257, 651, 652, 0, 0, 841,
	697, 347, 701, 702, 706, 707, 709, 714, 720, 721,
	724, 725, 727, 728, 0, 841, 841, 841, 841, 0,
	771, 0, 742, 841, 0, 669, 670, 686, 687, 688,
	689, 0, 0, 0, 198, 0, 0, 0, 211, 216,
	645, 471, 646, 0, 478, 474, 0, 647, 648, 0,
	549, 0, 0, 354, 841, 0, 551, 354, 13, 33,
	0, 0, 780, 772, 773, 776, 779, 36, 466, 457,
	-2, 160, 841, 148, 0, 745, 0, 126, 0, 0,
	779, 0, 824, 0, 0, 58, -2, 60, 0, 0,
	847, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 65, 66, 67, 0, 0, 0, 0, 0,
	0, -2, -2, 147, 105, 107, -2, 108, 109, 110,
	111, 112, 0, 0, 0, 0, 0, 384, 0, 359,
	364, 362, 365, 377, 378, 366, 367, 368, 369, 370,
	371, 372, 379, 380, 373, 374, 381, 382, 436, 436,
	0, 0, 354, 423, 383, 422, 572, 841, 599, 575,
	0, 843, 0, 846, 0, 327, 0, 0, 698, 699,
	0, 0, 0, 0, 0, 0, 739, 668, 747, 841,
	0, 441, 255, 0, 0, 207, 208, 210, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 649, 354,
	549, 354, 383, 550, 0, 549, 383, 784, 0, 841,
	841, 841, 775, 783, 39, 841, 467, 17, 0, 159,
	18, 0, 77, 124, 0, 0, 127, 783, 0, 88,
	86, 82, 89, 0, 0, 0, 0, 50, 0, 488,
	490, 491, 492, 524, 0, 526, 0, 0, 0, 64,
	525, 54, 0, 0, 807, 102, 103, 0, 0, 0,
	-2, 0, 818, 815, 0, 68, 71, 72, 73, 74,
	75, 0, 141, 146, 0, 744, 0, 24, 835, 0,
	0, 0, 0, 356, 0, 411, 412, 0, 354, 383,
	420, 576, 628, 845, 653, 657, 654, 841, 656, 658,
	841, 660, 841, 662, 841, 664, 841, 841, 0, 0,
	743, 0, 199, 203, 204, 0, 237, 0, 239, 240,
	241, 242, 243, 244, 245, 0, 482, 0, 0, 475,
	383, 354, 10, 8, 552, 354, 12, 0, 781, 782,
	774, 34, 486, 841, 0, 78, 128, 125, 140, 0,
	0, 0, 0, 52, 0, 542, -2, 0, 0, 0,
	48, 49, 0, 0, 0, 0, 0, 0, 531, 0,
	0, 534, 0, 0, 0, 0, 0, 0, 545, 0,
	527, 0, 529, 530, 61, 524, 0, 62, 0, 55,
	0, 57, 91, 0, 0, 841, 0, 350, 819, 820,
	821, 817, 848, 0, 0, 142, 0, 0, 838, 836,
	0, 354, 354, 0, 0, 360, 0, 383, 421, 0,
	0, 0, 0, 0, 690, 667, 740, 0, 236, 238,
	247, 0, 841, 484, 7, 11, 383, 785, 549, 0,
	161, 20, 79, 0, 84, 85, 841, 87, 841, 0,
	90, 0, 0, 541, 549, 0, 549, 51, 486, 804,
	0, 489, 520, 522, 0, 517, 532, 533, 535, 0,
	537, 0, 539, 540, 493, 494, 495, 0, 0, 0,
	0, 528, 0, 808, 56, 0, 0, 94, 95, 809,
	810, 811, 0, 813, 69, 76, 0, 148, 26, 0,
	837, 383, 383, 25, 385, 0, 419, 655, 659, 661,
	663, 665, 0, 0, 0, 0, 0, 0, 768, 770,
	9, 764, 487, 0, 0, 0, 0, 796, 0, 0,
	-2, 0, 0, 771, 549, 47, 549, 0, 841, 514,
	521, 841, 0, 515, 841, 516, 536, 538, 507, 0,
	0, 0, 0, 0, 512, -2, 92, 93, 0, 0,
	99, 841, 0, 839, 840, 27, 28, 0, 666, 0,
	0, 0, 414, 248, 483, 0, 841, 766, 0, 80,
	0, 0, 88, 40, 0, 796, 786, 798, 800, 841,
	36, 0, 792, 0, 779, 46, 771, 805, 806, 518,
	0, 523, 0, 0, 0, 0, 526, 0, 96, 97,
	98, 812, 0, 0, 691, 0, 694, 485, 769, 35,
	841, 841, 0, 0, 41, 0, 801, -2, 0, 0,
	0, 53, 45, 779, 0, 0, 497, 499, 500, 501,
	502, 503, 504, 505, 506, 0, 0, 0, 545, 513,
	21, 413, 692, 767, 765, 0, 0, 799, 0, -2,
	0, 794, 793, 44, 519, 496, 0, 546, 547, 548,
	495, 0, 81, 0, 789, 36, 0, 498, 508, 0,
	797, -2, 795, 693,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 391,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 392, 3, 393, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:421
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:426
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:427
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:435
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:440
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:460
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:480
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:501
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:517
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:534
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:554
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:569
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:580
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:592
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:603
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:619
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:647
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:685
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:691
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:705
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:719
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:739
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:757
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:775
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:784
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:799
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:807
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:814
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:824
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:841
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:853
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:865
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:869
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:875
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:881
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:889
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:894
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:895
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:908
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:912
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:918
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:930
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:936
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:940
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:953
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:957
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:963
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:972
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:985
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:992
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:999
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1007
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1029
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1033
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1039
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1046
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1060
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1064
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1068
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1075
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1083
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1093
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1097
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1125
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1130
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1135
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1146
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1157
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1161
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1167
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1171
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1189
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1193
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1218
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1219
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1223
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1224
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1245
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1251
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1264
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1280
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1289
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1311
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1327
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1339
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1349
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1354
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1361
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.exprs = nil
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1368
		{
			yyVAL.empty = struct{}{}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1370
		{
			yyVAL.empty = struct{}{}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.bytes = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1377
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1381
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1386
		{
			yyVAL.bytes = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1390
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1394
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1398
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1406
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1411
		{
			yyVAL.expr = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1415
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1420
		{
			yyVAL.expr = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1424
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1429
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1433
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1438
		{
			yyVAL.bytes = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1442
		{
			yyVAL.bytes = nil
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1448
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1455
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1461
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1465
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1470
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1474
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1478
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1482
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1486
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1490
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1496
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1506
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1512
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1523
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1529
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1542
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1547
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1552
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1557
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1563
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1568
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1573
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1578
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1583
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1588
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1593
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1598
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1603
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1612
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1622
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1627
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1632
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1639
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1646
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1654
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1659
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1664
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1669
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1675
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1681
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1688
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1695
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1707
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1711
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1723
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1741
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1745
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1761
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1765
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1769
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1781
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1797
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.sequence = &Sequence{}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1806
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1811
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1816
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1821
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1826
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1831
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1836
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1841
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1846
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1851
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1856
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1861
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1866
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1873
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1898
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1902
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.bytes = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2008
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2012
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2102
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2194
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.optVal = nil
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2219
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2231
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2235
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2241
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2249
		{
			yyVAL.optVal = nil
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2257
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2266
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2270
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2279
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2283
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2297
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2301
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2337
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2342
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2360
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2370
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2376
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2380
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2389
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2401
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2405
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2409
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2413
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2417
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2429
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2440
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2444
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2460
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.indexPartition = nil
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2484
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2488
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2494
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2498
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2506
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2510
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2526
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2548
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2569
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2575
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2580
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2594
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2599
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2606
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 411:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2613
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 412:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2620
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 413:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2629
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 414:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2640
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 419:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 420:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2679
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 421:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2690
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 423:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2712
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2771
		{
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2784
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2812
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2821
		{
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2822
		{
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2840
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2844
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2853
		{
			setAllowComments(yylex, true)
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.bytes2 = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.str = UnionStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.str = UnionAllStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.str = UnionDistinctStr
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.str = SQLCacheStr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2899
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2903
		{
			yyVAL.str = DistinctStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2908
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2912
		{
			yyVAL.str = StraightJoinHint
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2917
		{
			yyVAL.selectExprs = nil
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2937
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2945
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2962
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.overExpr = nil
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2978
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3023
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.strs = []string{}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3086
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3090
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3146
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3165
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3183
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.str = JoinStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.str = JoinStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.str = JoinStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.str = StraightJoinStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.str = LeftJoinStr
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.str = LeftJoinStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.str = RightJoinStr
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.str = RightJoinStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.str = NaturalJoinStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3231
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.indexHints = nil
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3277
		{
			yyVAL.expr = nil
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.columns = nil
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3290
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3296
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3330
		{
			yyVAL.str = ""
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3340
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3350
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3354
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3358
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3366
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3370
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3374
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3417
		{
			yyVAL.str = IsNullStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.str = IsNotNullStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.str = IsTrueStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.str = IsNotTrueStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.str = IsFalseStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.str = IsNotFalseStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.str = EqualStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.str = LessThanStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.str = GreaterThanStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.str = LessEqualStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.str = GreaterEqualStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.str = NotEqualStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.str = PosixRegexStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.expr = nil
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3498
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3506
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3540
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3628
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3636
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3654
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3658
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3666
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3682
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 649:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3734
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 661:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 663:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 665:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 666:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 667:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3799
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3831
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3867
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3871
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3903
		{
			yyVAL.str = ""
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.str = BooleanModeStr
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 693:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = QueryExpansionStr
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3943
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3965
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4075
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4079
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4083
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.expr = nil
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.str = string("")
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4123
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4136
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4139
		{
			yyVAL.expr = nil
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4143
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4178
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4187
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4203
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.expr = &NullVal{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4222
		{
			yyVAL.exprs = nil
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4226
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.expr = nil
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4241
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.orderBy = nil
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4276
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4281
		{
			yyVAL.str = AscScr
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4285
		{
			yyVAL.str = AscScr
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.str = DescScr
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.limit = nil
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4298
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4302
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4306
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4311
		{
			yyVAL.str = ""
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.str = ForUpdateStr
		}
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.str = ShareModeStr
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4332
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4336
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4340
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4349
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 791:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4353
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4360
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4364
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4368
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 795:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4372
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.updateExprs = nil
		}
	case 797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4387
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4397
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4413
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4423
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4427
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4439
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4443
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4449
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4453
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4457
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4466
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4472
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4485
		{
			yyVAL.bytes = []byte("charset")
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4500
		{
			yyVAL.expr = &Default{}
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4507
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4510
		{
			yyVAL.str = ""
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.str = IgnoreStr
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4523
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4527
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4531
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4537
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4542
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4555
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4559
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4563
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4569
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4594
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4605
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4612
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4622
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4795
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4804
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
