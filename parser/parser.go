// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const POSIX_REGEX = 57435
const POSIX_REGEX_CI = 57436
const POSIX_NOT_REGEX = 57437
const POSIX_NOT_REGEX_CI = 57438
const SHIFT_LEFT = 57439
const SHIFT_RIGHT = 57440
const DIV = 57441
const MOD = 57442
const UNARY = 57443
const COLLATE = 57444
const BINARY = 57445
const UNDERSCORE_BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const MATERIALIZED = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const PRIMARY = 57464
const COLUMN = 57465
const CONSTRAINT = 57466
const REFERENCES = 57467
const SPATIAL = 57468
const FULLTEXT = 57469
const FOREIGN = 57470
const KEY_BLOCK_SIZE = 57471
const POLICY = 57472
const WHILE = 57473
const UNIQUE = 57474
const KEY = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const TYPE = 57491
const STATUS = 57492
const VARIABLES = 57493
const RESTRICT = 57494
const CASCADE = 57495
const NO = 57496
const ACTION = 57497
const PERMISSIVE = 57498
const RESTRICTIVE = 57499
const PUBLIC = 57500
const CURRENT_USER = 57501
const SESSION_USER = 57502
const PAD_INDEX = 57503
const FILLFACTOR = 57504
const IGNORE_DUP_KEY = 57505
const STATISTICS_NORECOMPUTE = 57506
const STATISTICS_INCREMENTAL = 57507
const ALLOW_ROW_LOCKS = 57508
const ALLOW_PAGE_LOCKS = 57509
const DISTANCE = 57510
const M = 57511
const EUCLIDEAN = 57512
const COSINE = 57513
const BEFORE = 57514
const AFTER = 57515
const EACH = 57516
const ROW = 57517
const SCROLL = 57518
const CURSOR = 57519
const OPEN = 57520
const CLOSE = 57521
const FETCH = 57522
const PRIOR = 57523
const FIRST = 57524
const LAST = 57525
const DEALLOCATE = 57526
const INSTEAD = 57527
const OF = 57528
const DEFERRABLE = 57529
const INITIALLY = 57530
const IMMEDIATE = 57531
const DEFERRED = 57532
const CONCURRENTLY = 57533
const SQL = 57534
const SECURITY = 57535
const BEGIN = 57536
const START = 57537
const TRANSACTION = 57538
const COMMIT = 57539
const ROLLBACK = 57540
const BIT = 57541
const TINYINT = 57542
const SMALLINT = 57543
const SMALLSERIAL = 57544
const MEDIUMINT = 57545
const INT = 57546
const INTEGER = 57547
const SERIAL = 57548
const BIGINT = 57549
const BIGSERIAL = 57550
const INTNUM = 57551
const REAL = 57552
const DOUBLE = 57553
const PRECISION = 57554
const FLOAT_TYPE = 57555
const DECIMAL = 57556
const NUMERIC = 57557
const SMALLMONEY = 57558
const MONEY = 57559
const TIME = 57560
const TIMESTAMP = 57561
const DATETIME = 57562
const YEAR = 57563
const DATETIMEOFFSET = 57564
const DATETIME2 = 57565
const SMALLDATETIME = 57566
const CHAR = 57567
const VARCHAR = 57568
const VARYING = 57569
const BOOL = 57570
const CHARACTER = 57571
const VARBINARY = 57572
const NCHAR = 57573
const NVARCHAR = 57574
const NTEXT = 57575
const UUID = 57576
const TEXT = 57577
const TINYTEXT = 57578
const MEDIUMTEXT = 57579
const LONGTEXT = 57580
const CITEXT = 57581
const BLOB = 57582
const TINYBLOB = 57583
const MEDIUMBLOB = 57584
const LONGBLOB = 57585
const JSON = 57586
const JSONB = 57587
const ENUM = 57588
const GEOMETRY = 57589
const POINT = 57590
const LINESTRING = 57591
const POLYGON = 57592
const GEOMETRYCOLLECTION = 57593
const MULTIPOINT = 57594
const MULTILINESTRING = 57595
const MULTIPOLYGON = 57596
const VECTOR = 57597
const VARIADIC = 57598
const ARRAY = 57599
const NOW = 57600
const GETDATE = 57601
const BPCHAR = 57602
const TEXT_PATTERN_OPS = 57603
const NULLX = 57604
const AUTO_INCREMENT = 57605
const APPROXNUM = 57606
const SIGNED = 57607
const UNSIGNED = 57608
const ZEROFILL = 57609
const ZONE = 57610
const AUTOINCREMENT = 57611
const DATABASES = 57612
const TABLES = 57613
const VSCHEMA_TABLES = 57614
const EXTENDED = 57615
const FULL = 57616
const PROCESSLIST = 57617
const NAMES = 57618
const CHARSET = 57619
const GLOBAL = 57620
const SESSION = 57621
const ISOLATION = 57622
const LEVEL = 57623
const READ = 57624
const WRITE = 57625
const ONLY = 57626
const REPEATABLE = 57627
const COMMITTED = 57628
const UNCOMMITTED = 57629
const SERIALIZABLE = 57630
const NEW = 57631
const CONCAT_NULL_YIELDS_NULL = 57632
const CURSOR_CLOSE_ON_COMMIT = 57633
const QUOTED_IDENTIFIER = 57634
const ARITHABORT = 57635
const FMTONLY = 57636
const NOCOUNT = 57637
const NOEXEC = 57638
const NUMERIC_ROUNDABORT = 57639
const ANSI_DEFAULTS = 57640
const ANSI_NULL_DFLT_OFF = 57641
const ANSI_NULL_DFLT_ON = 57642
const ANSI_NULLS = 57643
const ANSI_PADDING = 57644
const ANSI_WARNINGS = 57645
const FORCEPLAN = 57646
const SHOWPLAN_ALL = 57647
const SHOWPLAN_TEXT = 57648
const SHOWPLAN_XML = 57649
const IMPLICIT_TRANSACTIONS = 57650
const REMOTE_PROC_TRANSACTIONS = 57651
const XACT_ABORT = 57652
const CURRENT_TIMESTAMP = 57653
const DATABASE = 57654
const CURRENT_DATE = 57655
const CURRENT_TIME = 57656
const LOCALTIME = 57657
const LOCALTIMESTAMP = 57658
const UTC_DATE = 57659
const UTC_TIME = 57660
const UTC_TIMESTAMP = 57661
const REPLACE = 57662
const CONVERT = 57663
const CAST = 57664
const SUBSTR = 57665
const SUBSTRING = 57666
const GROUP_CONCAT = 57667
const SEPARATOR = 57668
const INHERIT = 57669
const LEAD = 57670
const LAG = 57671
const MATCH = 57672
const AGAINST = 57673
const BOOLEAN = 57674
const LANGUAGE = 57675
const WITH = 57676
const WITHOUT = 57677
const PARSER = 57678
const QUERY = 57679
const EXPANSION = 57680
const UNUSED = 57681
const VIRTUAL = 57682
const STORED = 57683
const GENERATED = 57684
const ALWAYS = 57685
const IDENTITY = 57686
const SEQUENCE = 57687
const INCREMENT = 57688
const MINVALUE = 57689
const CACHE = 57690
const CYCLE = 57691
const OWNED = 57692
const NONE = 57693
const CLUSTERED = 57694
const NONCLUSTERED = 57695
const REPLICATION = 57696
const COLUMNSTORE = 57697
const INCLUDE = 57698
const HOLDLOCK = 57699
const NOLOCK = 57700
const NOWAIT = 57701
const PAGLOCK = 57702
const ROWLOCK = 57703
const TABLELOCK = 57704
const DEFINER = 57705
const INVOKER = 57706
const TYPECAST = 57707
const CHECK = 57708
const OVER = 57709

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	133, 411,
	-2, 149,
	-1, 406,
	61, 381,
	-2, 378,
	-1, 436,
	122, 808,
	-2, 240,
	-1, 456,
	122, 807,
	-2, 802,
	-1, 555,
	122, 808,
	-2, 240,
	-1, 577,
	274, 817,
	-2, 715,
	-1, 627,
	274, 817,
	-2, 451,
	-1, 661,
	5, 36,
	-2, 14,
	-1, 667,
	5, 36,
	-2, 16,
	-1, 805,
	274, 817,
	-2, 451,
	-1, 969,
	122, 810,
	-2, 806,
	-1, 979,
	274, 817,
	-2, 310,
	-1, 1055,
	274, 817,
	-2, 451,
	-1, 1116,
	60, 99,
	-2, 198,
	-1, 1119,
	60, 99,
	-2, 198,
	-1, 1178,
	5, 37,
	-2, 582,
	-1, 1254,
	5, 36,
	-2, 15,
	-1, 1269,
	194, 63,
	-2, 505,
	-1, 1310,
	60, 99,
	-2, 169,
	-1, 1450,
	89, 804,
	-2, 792,
	-1, 1540,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1704,
	5, 36,
	-2, 763,
	-1, 1729,
	5, 36,
	-2, 59,
	-1, 1802,
	5, 37,
	-2, 764,
	-1, 1833,
	5, 36,
	-2, 766,
	-1, 1857,
	5, 37,
	-2, 767,
}

const yyPrivate = 57344

const yyLast = 9434

var yyAct = [...]int16{
	557, 538, 1634, 767, 1811, 1068, 1759, 567, 1722, 1652,
	1760, 768, 31, 1417, 1696, 1030, 1756, 674, 41, 42,
	1562, 1087, 1635, 1099, 1727, 1447, 1576, 1575, 856, 1560,
	1622, 1714, 65, 65, 65, 1444, 128, 131, 132, 1550,
	1430, 1564, 1627, 1429, 1084, 1273, 883, 1441, 1270, 1438,
	1426, 1248, 1174, 913, 59, 696, 1243, 898, 31, 978,
	1237, 1435, 398, 27, 1063, 1127, 953, 209, 655, 529,
	618, 1335, 1166, 58, 1015, 926, 1012, 470, 828, 654,
	860, 44, 871, 1226, 193, 549, 1048, 228, 66, 968,
	565, 536, 61, 60, 795, 401, 515, 157, 407, 832,
	243, 137, 49, 1309, 537, 433, 126, 127, 395, 787,
	45, 147, 244, 435, 176, 441, 1357, 149, 195, 152,
	459, 966, 9, 1227, 1326, 1812, 1813, 1814, 1815, 1816,
	1817, 234, 724, 725, 726, 727, 728, 729, 730, 723,
	45, 133, 734, 135, 522, 65, 45, 211, 212, 213,
	214, 146, 392, 723, 523, 191, 734, 1027, 1531, 734,
	1691, 34, 619, 1064, 402, 722, 721, 731, 732, 724,
	725, 726, 727, 728, 729, 730, 723, 390, 421, 734,
	239, 240, 709, 51, 602, 702, 1123, 405, 408, 409,
	814, 233, 452, 605, 1859, 237, 1792, 241, 242, 251,
	248, 541, 726, 727, 728, 729, 730, 723, 384, 431,
	734, 230, 387, 1855, 52, 53, 188, 1494, 1748, 46,
	45, 47, 191, 192, 45, 1132, 45, 45, 1131, 45,
	194, 1511, 1504, 490, 154, 252, 253, 45, 1381, 1382,
	1723, 45, 664, 1847, 1112, 1102, 1101, 179, 425, 427,
	1414, 504, 1169, 1088, 254, 1791, 1103, 1371, 713, 406,
	1035, 1036, 186, 1747, 174, 482, 483, 1155, 463, 1104,
	1497, 465, 175, 468, 469, 54, 173, 445, 45, 1782,
	1783, 456, 455, 47, 449, 1663, 1664, 1781, 1662, 474,
	475, 476, 477, 489, 33, 1481, 443, 493, 494, 1577,
	461, 1578, 722, 721, 731, 732, 724, 725, 726, 727,
	728, 729, 730, 723, 1733, 845, 734, 1732, 844, 34,
	1734, 32, 45, 46, 1534, 47, 45, 45, 197, 762,
	182, 852, 177, 187, 210, 717, 446, 720, 448, 447,
	184, 183, 1365, 735, 736, 737, 738, 739, 740, 741,
	503, 718, 719, 716, 742, 743, 744, 745, 722, 721,
	731, 732, 724, 725, 726, 727, 728, 729, 730, 723,
	517, 1024, 734, 199, 1110, 202, 1354, 646, 645, 226,
	478, 1190, 1188, 223, 1109, 1787, 481, 1675, 524, 392,
	1463, 172, 1258, 134, 38, 1741, 1740, 164, 516, 163,
	1678, 167, 168, 171, 408, 409, 733, 165, 173, 1679,
	1595, 1299, 1692, 1570, 512, 502, 129, 139, 249, 604,
	733, 34, 1440, 733, 1676, 1257, 1592, 904, 1083, 1336,
	1337, 1105, 1106, 1108, 1341, 452, 1510, 1107, 1512, 670,
	671, 914, 139, 733, 1356, 1628, 681, 1262, 1830, 1565,
	170, 1320, 704, 664, 138, 1112, 1102, 1101, 703, 415,
	424, 423, 418, 682, 172, 1383, 514, 1103, 39, 34,
	857, 180, 414, 403, 733, 507, 416, 181, 34, 171,
	1104, 173, 733, 509, 508, 46, 878, 1567, 521, 1601,
	684, 1126, 657, 815, 171, 408, 409, 1124, 1125, 661,
	880, 667, 525, 675, 1376, 227, 679, 607, 683, 513,
	1854, 620, 392, 699, 603, 713, 601, 34, 1503, 662,
	445, 662, 1785, 1132, 50, 455, 1614, 210, 516, 28,
	169, 864, 633, 1594, 496, 1422, 606, 687, 608, 443,
	615, 632, 40, 634, 172, 1726, 637, 638, 617, 153,
	189, 694, 190, 430, 658, 1725, 1336, 1337, 676, 1746,
	1724, 173, 672, 150, 1387, 454, 453, 517, 130, 1300,
	1301, 1302, 37, 1113, 185, 701, 1389, 656, 36, 35,
	733, 55, 455, 45, 1563, 1110, 48, 140, 141, 510,
	1439, 45, 662, 694, 43, 1109, 708, 480, 386, 666,
	142, 6, 7, 1851, 677, 484, 678, 1805, 685, 487,
	1694, 675, 140, 141, 673, 1515, 404, 1384, 412, 413,
	65, 1260, 705, 1653, 1655, 142, 763, 1580, 812, 752,
	753, 392, 1393, 1176, 1172, 1052, 733, 766, 765, 831,
	630, 166, 1105, 1106, 1108, 145, 472, 471, 1107, 697,
	698, 700, 657, 849, 1404, 640, 839, 933, 1262, 710,
	675, 516, 711, 710, 899, 900, 712, 713, 1373, 862,
	810, 931, 932, 930, 823, 712, 1735, 854, 1712, 712,
	800, 877, 1579, 1738, 801, 879, 711, 710, 1146, 662,
	1145, 1144, 516, 1143, 1198, 789, 790, 791, 792, 793,
	794, 808, 1142, 712, 604, 1141, 1654, 1220, 516, 33,
	841, 840, 843, 641, 1140, 850, 711, 710, 835, 835,
	835, 443, 818, 1139, 927, 1138, 711, 710, 863, 855,
	1137, 848, 1121, 712, 34, 748, 1119, 656, 711, 710,
	1135, 1085, 455, 712, 45, 1462, 1016, 400, 711, 710,
	906, 958, 957, 963, 963, 712, 1016, 45, 1207, 901,
	148, 965, 1118, 143, 905, 712, 392, 392, 1385, 1386,
	1388, 1390, 1391, 662, 974, 400, 911, 902, 903, 874,
	399, 1117, 958, 1017, 1113, 830, 836, 838, 897, 420,
	568, 967, 970, 1049, 662, 1156, 1157, 1158, 1253, 907,
	1613, 1505, 400, 908, 824, 400, 1612, 1509, 1406, 1327,
	1031, 721, 731, 732, 724, 725, 726, 727, 728, 729,
	730, 723, 952, 1565, 734, 1508, 801, 949, 951, 34,
	1328, 1051, 1421, 34, 1050, 711, 710, 1327, 1050, 1507,
	1454, 959, 1375, 419, 961, 964, 411, 711, 710, 1405,
	1506, 837, 712, 1133, 657, 826, 253, 929, 1328, 46,
	462, 1567, 835, 835, 712, 1031, 835, 835, 835, 711,
	710, 813, 959, 1086, 969, 1009, 1010, 1116, 203, 1338,
	1082, 1584, 1072, 825, 1026, 664, 712, 1329, 462, 1325,
	711, 710, 1182, 1610, 1181, 835, 835, 835, 835, 462,
	467, 918, 920, 921, 466, 1039, 26, 712, 1041, 919,
	516, 34, 847, 1583, 711, 710, 846, 614, 928, 1056,
	835, 1057, 488, 486, 485, 796, 458, 1425, 1129, 975,
	976, 712, 1175, 1065, 960, 1011, 764, 411, 927, 656,
	46, 1538, 47, 411, 455, 33, 46, 456, 47, 47,
	971, 973, 46, 206, 47, 1136, 208, 410, 411, 21,
	798, 16, 1025, 764, 1028, 1029, 1019, 1020, 1021, 1022,
	34, 1023, 32, 46, 17, 47, 24, 46, 1151, 47,
	1115, 46, 954, 1567, 955, 842, 34, 1043, 1051, 479,
	426, 956, 18, 19, 1033, 731, 732, 724, 725, 726,
	727, 728, 729, 730, 723, 639, 1162, 734, 600, 664,
	857, 1042, 599, 1045, 1046, 872, 713, 1840, 1839, 1053,
	598, 1054, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 597, 763, 526, 34, 558, 962, 556, 560,
	561, 562, 563, 799, 1544, 1080, 559, 564, 872, 1838,
	1050, 68, 797, 392, 1753, 713, 713, 803, 802, 1216,
	1826, 411, 657, 516, 34, 1780, 713, 1804, 713, 1216,
	1749, 1187, 691, 1682, 1547, 713, 1396, 1251, 967, 691,
	1597, 1191, 691, 1596, 1546, 1254, 417, 1218, 733, 1206,
	1545, 1308, 1543, 1152, 872, 1522, 1240, 662, 1238, 14,
	1250, 691, 1477, 835, 1269, 662, 1295, 1296, 1297, 1210,
	1547, 1263, 1216, 1476, 1473, 1472, 1223, 1310, 1116, 1116,
	1310, 1116, 1116, 516, 516, 1234, 1222, 1241, 1264, 1321,
	1060, 1236, 928, 1324, 1233, 835, 1228, 1231, 1232, 1170,
	1171, 1235, 1230, 253, 1225, 1547, 835, 656, 691, 1467,
	1031, 516, 455, 1252, 1631, 69, 1543, 1178, 1179, 1180,
	664, 969, 1112, 1102, 1101, 1344, 691, 1466, 691, 1397,
	1204, 691, 1346, 392, 1103, 1059, 1307, 392, 1323, 1303,
	1306, 1265, 1266, 1267, 20, 1271, 1058, 1104, 1044, 713,
	1040, 1316, 1317, 126, 1203, 851, 22, 23, 1355, 25,
	1209, 827, 1359, 1342, 1343, 45, 1347, 664, 1211, 1212,
	820, 1213, 1214, 817, 1216, 1215, 609, 1377, 1340, 1345,
	1349, 1311, 1312, 1313, 1314, 1315, 1224, 691, 1153, 691,
	1067, 872, 1066, 1372, 1702, 621, 1350, 972, 713, 1703,
	675, 1360, 1845, 627, 628, 629, 1358, 872, 1034, 1362,
	691, 912, 1623, 1364, 691, 690, 1409, 1400, 1366, 411,
	1623, 664, 528, 253, 1330, 1331, 1332, 1333, 1334, 1202,
	1423, 733, 392, 650, 649, 643, 644, 643, 642, 1416,
	611, 969, 57, 56, 1420, 647, 665, 1757, 665, 1256,
	1711, 1216, 1110, 1832, 636, 1395, 857, 1428, 1200, 1455,
	1711, 1114, 1109, 873, 501, 1401, 635, 1408, 1044, 500,
	631, 1310, 501, 411, 411, 706, 1711, 1201, 1800, 516,
	516, 972, 1547, 747, 749, 750, 751, 1661, 1427, 1424,
	1572, 1436, 1552, 1555, 1556, 1557, 1553, 501, 1554, 1558,
	1044, 1261, 1715, 1716, 664, 1757, 1199, 1407, 627, 1105,
	1106, 1108, 1044, 1183, 872, 1107, 691, 45, 45, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 816, 781,
	648, 783, 784, 785, 786, 788, 788, 788, 788, 788,
	788, 788, 714, 804, 805, 806, 807, 1468, 1469, 1120,
	1464, 652, 651, 1775, 392, 1773, 411, 1453, 1744, 1611,
	1378, 30, 1715, 1716, 505, 1474, 1475, 199, 884, 1412,
	1482, 1470, 896, 1154, 1479, 1319, 1394, 1318, 1239, 1359,
	769, 1516, 886, 229, 1552, 1555, 1556, 1557, 1553, 780,
	1554, 1558, 1500, 1150, 1410, 1501, 1502, 1569, 1499, 65,
	1149, 1122, 1062, 392, 1061, 1038, 909, 155, 627, 876,
	1582, 853, 809, 707, 660, 659, 665, 1519, 662, 1528,
	626, 811, 1523, 531, 1521, 625, 1529, 45, 1524, 1433,
	623, 516, 1599, 610, 527, 1588, 1541, 1590, 491, 833,
	1536, 224, 432, 1559, 1589, 1568, 1539, 1540, 428, 397,
	1573, 1113, 222, 1571, 231, 232, 1827, 885, 216, 215,
	1586, 204, 835, 11, 1128, 1718, 1219, 653, 492, 1591,
	236, 235, 1418, 136, 1419, 45, 45, 1261, 1646, 1644,
	1600, 1721, 1720, 1647, 1645, 45, 1566, 1643, 1642, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 1790, 1598,
	665, 1077, 1078, 1483, 1603, 1484, 1485, 958, 1636, 1486,
	1487, 1489, 1491, 1493, 1621, 1525, 782, 1460, 910, 396,
	1585, 770, 915, 916, 1648, 974, 1556, 1557, 1242, 1530,
	473, 1244, 1632, 392, 613, 1514, 1798, 1587, 899, 900,
	385, 392, 250, 1630, 1618, 662, 1245, 1440, 1670, 1638,
	1639, 1637, 1641, 1081, 1640, 612, 1074, 499, 1649, 1075,
	1629, 1032, 1660, 497, 1615, 1633, 1668, 1657, 1659, 495,
	144, 1013, 1031, 866, 1658, 867, 868, 869, 1465, 1018,
	870, 669, 769, 520, 1797, 977, 1008, 1693, 865, 45,
	1055, 1704, 1069, 45, 45, 1616, 1433, 959, 45, 45,
	45, 45, 45, 1513, 1070, 857, 1796, 1755, 1238, 1073,
	1650, 662, 45, 1700, 1348, 1459, 1566, 1728, 1458, 1669,
	1457, 1708, 1729, 1684, 1456, 1710, 1037, 1148, 1685, 1848,
	1261, 1533, 1719, 1403, 1261, 1419, 245, 246, 247, 1609,
	1380, 1379, 662, 1699, 519, 518, 1698, 1147, 1730, 1739,
	422, 1707, 45, 1709, 859, 392, 861, 1542, 680, 1617,
	875, 8, 882, 958, 1636, 1758, 1765, 1728, 1, 1763,
	1272, 1761, 958, 1636, 45, 1418, 13, 1418, 12, 1695,
	1750, 238, 45, 1173, 1752, 761, 553, 1677, 1593, 662,
	539, 1766, 1810, 1437, 1770, 1268, 1767, 1298, 1398, 1339,
	457, 178, 1402, 1651, 1433, 1031, 1742, 1743, 1221, 1433,
	1433, 1433, 1433, 1433, 429, 15, 1413, 1255, 1055, 1786,
	1789, 668, 498, 1433, 1322, 881, 693, 161, 1794, 1768,
	151, 1769, 686, 1807, 675, 1799, 388, 675, 675, 675,
	29, 1822, 1683, 10, 1134, 162, 1626, 1686, 1687, 1688,
	1689, 1809, 198, 959, 1818, 1819, 1820, 160, 1808, 159,
	1821, 1824, 959, 158, 156, 1835, 1836, 1833, 1761, 1829,
	460, 1831, 196, 201, 1837, 225, 64, 62, 63, 67,
	1442, 1581, 506, 1047, 1177, 1433, 746, 662, 1731, 1449,
	1764, 1844, 664, 1433, 1112, 1102, 1101, 1247, 1850, 1849,
	1761, 1795, 1533, 1261, 1533, 1852, 1103, 1478, 1754, 958,
	1636, 1856, 1858, 1853, 1205, 779, 1014, 540, 662, 1104,
	917, 552, 551, 200, 665, 550, 205, 1701, 1208, 207,
	1566, 715, 665, 1745, 1432, 1537, 1551, 1549, 1751, 1548,
	1717, 1713, 1431, 1496, 1217, 1690, 217, 218, 219, 220,
	221, 1076, 1411, 1100, 858, 1079, 1518, 664, 1520, 1112,
	1102, 1101, 5, 1111, 1098, 664, 4, 1112, 1102, 1101,
	1779, 1103, 3, 1097, 1846, 1096, 1095, 1093, 1094, 1103,
	1091, 1246, 1249, 1092, 1104, 1090, 1626, 1419, 1071, 1418,
	663, 2, 1104, 0, 0, 1793, 0, 1259, 0, 959,
	0, 0, 0, 0, 0, 1801, 1802, 1803, 0, 1806,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 0, 1110, 0, 0, 0, 0, 664,
	0, 1112, 1102, 1101, 1109, 0, 0, 664, 1602, 1112,
	1102, 1101, 0, 1103, 0, 0, 664, 1674, 1112, 1102,
	1101, 1103, 0, 1533, 464, 0, 1104, 0, 0, 0,
	1103, 1841, 1842, 1843, 1104, 0, 754, 755, 756, 757,
	758, 759, 760, 1104, 0, 0, 0, 0, 1392, 0,
	1619, 1105, 1106, 1108, 1620, 0, 0, 1107, 0, 1110,
	0, 0, 0, 1857, 0, 1363, 0, 1110, 0, 1109,
	1261, 1418, 1626, 0, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 1374,
	0, 0, 0, 0, 0, 0, 0, 0, 1671, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1533, 0,
	0, 0, 0, 0, 1492, 713, 1105, 1106, 1108, 0,
	1399, 0, 1107, 0, 1105, 1106, 1108, 1680, 1681, 0,
	1107, 1110, 1262, 0, 0, 0, 0, 0, 1415, 1110,
	0, 1109, 1471, 1490, 0, 0, 0, 0, 1110, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 722,
	721, 731, 732, 724, 725, 726, 727, 728, 729, 730,
	723, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 713, 0, 0, 0, 1105, 1106,
	1108, 0, 1495, 1113, 1107, 0, 1105, 1106, 1108, 0,
	0, 0, 1107, 0, 1262, 1105, 1106, 1108, 0, 922,
	0, 1107, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 0, 722, 721,
	731, 732, 724, 725, 726, 727, 728, 729, 730, 723,
	0, 1672, 734, 0, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1561, 0, 1498, 1113, 0,
	0, 0, 533, 0, 0, 0, 1113, 532, 0, 622,
	624, 0, 0, 0, 578, 0, 579, 0, 0, 0,
	0, 0, 0, 0, 569, 570, 0, 1526, 1527, 1249,
	0, 0, 1665, 0, 411, 0, 0, 456, 558, 555,
	556, 560, 561, 562, 563, 0, 1823, 0, 559, 564,
	450, 451, 535, 1666, 1672, 0, 0, 530, 547, 0,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 664, 0, 1112, 1102, 1101, 0, 1113, 692,
	695, 0, 0, 0, 544, 545, 1103, 1113, 0, 0,
	594, 0, 546, 713, 0, 542, 543, 548, 0, 1104,
	0, 0, 0, 1434, 0, 0, 0, 0, 1434, 1434,
	1434, 1434, 1434, 0, 592, 0, 0, 0, 1673, 0,
	0, 0, 1561, 0, 1656, 0, 1788, 0, 0, 0,
	0, 0, 0, 0, 0, 1672, 0, 722, 721, 731,
	732, 724, 725, 726, 727, 728, 729, 730, 723, 0,
	0, 734, 554, 1624, 0, 0, 0, 1159, 1160, 1161,
	819, 437, 438, 439, 0, 1163, 1164, 1165, 0, 442,
	440, 450, 451, 0, 0, 0, 0, 733, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 1705, 1706,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 1667, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 754, 1109, 0, 0, 0, 0, 665,
	692, 664, 0, 1112, 1102, 1101, 0, 580, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 1697, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 1104, 596,
	0, 581, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 1106, 1108, 1762, 0, 665, 1107, 0, 0,
	91, 0, 0, 33, 0, 0, 0, 1262, 0, 0,
	0, 0, 566, 0, 0, 1776, 1777, 1778, 0, 0,
	0, 0, 0, 0, 0, 0, 1121, 0, 34, 0,
	1119, 0, 0, 0, 583, 593, 589, 590, 587, 588,
	586, 585, 584, 595, 571, 572, 573, 574, 576, 0,
	0, 454, 453, 575, 0, 0, 1118, 0, 0, 0,
	0, 0, 0, 0, 1771, 0, 0, 1772, 0, 0,
	1774, 0, 0, 1304, 0, 1117, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 0, 76, 1784, 591, 0,
	0, 1762, 0, 1109, 1834, 0, 0, 0, 0, 0,
	0, 0, 444, 449, 0, 1697, 0, 0, 0, 0,
	0, 0, 0, 0, 769, 0, 0, 0, 0, 0,
	0, 92, 0, 1762, 0, 665, 0, 0, 0, 0,
	0, 1352, 1353, 1113, 0, 0, 0, 0, 0, 0,
	1105, 1106, 1108, 0, 1351, 733, 1107, 0, 1828, 769,
	0, 0, 0, 0, 0, 446, 0, 448, 447, 0,
	0, 0, 0, 1367, 1368, 1369, 1370, 0, 722, 721,
	731, 732, 724, 725, 726, 727, 728, 729, 730, 723,
	0, 1260, 734, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 0, 119, 120, 0, 121, 122, 123,
	125, 124, 93, 94, 95, 99, 97, 96, 98, 70,
	72, 0, 68, 71, 77, 73, 74, 75, 89, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	90, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	722, 721, 731, 732, 724, 725, 726, 727, 728, 729,
	730, 723, 0, 0, 734, 0, 0, 0, 1488, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1184, 1185, 0, 1186, 0, 0, 0, 0,
	1189, 0, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 1167, 1192, 1193, 1168, 0, 1194, 1195, 0, 1196,
	1197, 0, 0, 722, 721, 731, 732, 724, 725, 726,
	727, 728, 729, 730, 723, 1480, 69, 734, 722, 721,
	731, 732, 724, 725, 726, 727, 728, 729, 730, 723,
	1532, 0, 734, 722, 721, 731, 732, 724, 725, 726,
	727, 728, 729, 730, 723, 0, 0, 734, 370, 359,
	0, 318, 372, 288, 306, 380, 308, 309, 345, 266,
	328, 0, 303, 285, 0, 0, 0, 291, 259, 298,
	260, 289, 320, 0, 286, 0, 361, 331, 0, 0,
	0, 378, 0, 336, 0, 0, 0, 0, 0, 323,
	363, 326, 354, 317, 346, 275, 335, 373, 304, 341,
	374, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 340, 368, 300, 272,
	383, 0, 344, 258, 338, 0, 264, 267, 379, 366,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 322,
	327, 351, 314, 0, 0, 0, 733, 0, 0, 0,
	0, 0, 1604, 0, 1605, 292, 1606, 334, 1607, 1608,
	0, 271, 265, 0, 319, 796, 0, 0, 274, 0,
	293, 352, 0, 255, 357, 364, 316, 0, 0, 367,
	313, 312, 0, 0, 0, 0, 0, 0, 305, 394,
	349, 381, 371, 324, 362, 290, 299, 0, 297, 0,
	798, 0, 333, 347, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 256, 294, 355, 358, 279, 343, 268,
	301, 350, 302, 325, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 0, 119, 120, 0, 121, 122, 123, 125,
	124, 733, 950, 799, 0, 0, 0, 0, 0, 1451,
	0, 68, 797, 0, 0, 0, 733, 803, 802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 0, 0, 0, 0, 0, 262,
	283, 365, 0, 0, 0, 0, 1452, 1450, 1446, 1445,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 1184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 282, 276, 277, 329, 330, 375, 376, 377,
	353, 273, 0, 280, 281, 0, 360, 0, 0, 0,
	332, 0, 0, 0, 382, 69, 0, 0, 0, 0,
	0, 884, 307, 257, 311, 896, 0, 0, 0, 0,
	0, 0, 269, 270, 0, 886, 315, 310, 337, 339,
	348, 356, 0, 287, 321, 370, 359, 0, 318, 372,
	288, 306, 380, 308, 309, 345, 266, 328, 0, 303,
	285, 0, 0, 0, 291, 259, 298, 260, 289, 320,
	0, 286, 0, 361, 331, 0, 0, 0, 378, 0,
	336, 0, 0, 0, 0, 0, 323, 363, 326, 354,
	317, 346, 275, 335, 373, 304, 341, 374, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 340, 368, 300, 272, 383, 0, 344,
	258, 338, 0, 264, 267, 379, 366, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 322, 327, 351, 314,
	0, 0, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 0, 292, 0, 334, 0, 0, 0, 271, 265,
	0, 319, 0, 0, 0, 274, 0, 293, 352, 0,
	255, 357, 364, 316, 0, 0, 367, 313, 312, 0,
	0, 0, 0, 0, 0, 305, 394, 349, 381, 371,
	324, 362, 290, 299, 0, 297, 0, 0, 0, 333,
	347, 0, 0, 0, 0, 0, 369, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 0, 263,
	256, 294, 355, 358, 279, 343, 268, 301, 350, 302,
	325, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1574, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 0, 1112, 1102, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1130, 0, 0, 0, 0,
	261, 0, 0, 0, 0, 0, 262, 283, 365, 0,
	0, 0, 0, 1452, 1450, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 1737, 1736, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 282,
	276, 277, 329, 330, 375, 376, 377, 353, 273, 0,
	280, 281, 0, 360, 0, 0, 0, 332, 0, 0,
	0, 382, 0, 0, 0, 1110, 0, 0, 0, 307,
	257, 311, 0, 0, 0, 1109, 0, 0, 0, 269,
	270, 0, 0, 315, 310, 337, 339, 348, 356, 0,
	287, 321, 370, 359, 0, 318, 372, 288, 306, 380,
	308, 309, 345, 266, 328, 0, 303, 285, 0, 0,
	0, 291, 259, 298, 260, 289, 320, 0, 286, 0,
	361, 331, 1105, 1106, 1108, 378, 0, 336, 1107, 0,
	0, 0, 0, 323, 363, 326, 354, 317, 346, 275,
	335, 373, 304, 341, 374, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 368, 300, 272, 383, 0, 344, 258, 338, 0,
	264, 267, 379, 366, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 322, 327, 351, 314, 0, 0, 0,
	0, 0, 0, 1361, 0, 0, 0, 0, 0, 292,
	0, 334, 0, 0, 0, 271, 265, 0, 319, 0,
	0, 0, 274, 0, 293, 352, 0, 255, 357, 364,
	316, 0, 0, 367, 313, 312, 0, 0, 981, 0,
	0, 0, 305, 394, 349, 381, 371, 324, 362, 290,
	299, 0, 297, 0, 0, 0, 333, 347, 0, 0,
	0, 0, 0, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 256, 294, 355,
	358, 279, 343, 268, 301, 350, 302, 325, 284, 0,
	990, 996, 994, 0, 0, 991, 0, 0, 989, 0,
	0, 998, 0, 0, 997, 983, 993, 995, 992, 987,
	0, 982, 0, 1000, 999, 1001, 980, 1003, 0, 0,
	0, 1007, 1004, 1006, 1005, 0, 1002, 0, 0, 0,
	0, 0, 0, 1451, 0, 984, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 616, 986, 988, 456, 0,
	436, 437, 438, 439, 0, 0, 0, 261, 0, 442,
	440, 450, 451, 262, 283, 365, 0, 0, 0, 0,
	1452, 1450, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 282, 276, 277, 329,
	330, 375, 376, 377, 353, 273, 0, 280, 281, 0,
	360, 0, 0, 0, 332, 0, 0, 0, 382, 0,
	0, 0, 0, 0, 0, 0, 307, 257, 311, 0,
	0, 0, 0, 0, 0, 0, 269, 270, 0, 0,
	315, 310, 337, 339, 348, 356, 0, 287, 321, 370,
	359, 0, 318, 372, 288, 306, 380, 308, 309, 345,
	266, 328, 0, 303, 285, 0, 0, 0, 291, 259,
	298, 260, 289, 320, 0, 286, 0, 361, 331, 0,
	91, 0, 378, 0, 336, 0, 0, 0, 0, 0,
	323, 363, 326, 354, 317, 346, 275, 335, 373, 304,
	341, 374, 0, 0, 0, 456, 0, 47, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 340, 368, 300,
	272, 383, 0, 344, 258, 338, 0, 264, 267, 379,
	366, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	322, 327, 351, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 449, 1229, 0, 292, 0, 334, 0,
	0, 0, 271, 265, 0, 319, 76, 0, 0, 274,
	0, 293, 352, 0, 255, 357, 364, 316, 0, 0,
	367, 313, 312, 0, 0, 0, 0, 0, 0, 305,
	394, 349, 381, 371, 324, 362, 290, 299, 0, 297,
	0, 92, 0, 333, 347, 446, 0, 448, 447, 0,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 256, 294, 355, 358, 279, 343,
	268, 301, 350, 302, 325, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 0, 119, 120, 0, 121, 122, 123,
	125, 124, 93, 94, 95, 99, 97, 96, 98, 70,
	72, 0, 68, 71, 77, 73, 74, 75, 89, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	90, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	434, 0, 0, 456, 261, 436, 437, 438, 439, 0,
	262, 283, 365, 0, 442, 440, 450, 451, 393, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 282, 276, 277, 329, 330, 375, 376,
	377, 353, 273, 0, 280, 281, 0, 360, 0, 0,
	0, 332, 0, 0, 0, 382, 69, 0, 0, 0,
	0, 0, 0, 307, 257, 311, 0, 0, 0, 0,
	0, 0, 0, 269, 270, 0, 0, 315, 310, 337,
	339, 348, 356, 0, 287, 321, 370, 359, 0, 318,
	372, 288, 306, 380, 308, 309, 345, 266, 328, 0,
	303, 285, 0, 0, 0, 291, 259, 298, 260, 289,
	320, 0, 286, 0, 361, 331, 0, 0, 0, 378,
	0, 336, 0, 0, 0, 0, 0, 323, 363, 326,
	354, 317, 346, 275, 335, 373, 304, 341, 374, 0,
	0, 0, 34, 0, 688, 0, 689, 0, 0, 0,
	0, 0, 0, 0, 340, 368, 300, 272, 383, 0,
	344, 258, 338, 0, 264, 267, 379, 366, 295, 296,
	0, 0, 0, 0, 0, 0, 0, 322, 327, 351,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 0, 334, 0, 444, 449, 271,
	265, 0, 319, 0, 0, 0, 274, 0, 293, 352,
	0, 255, 357, 364, 316, 0, 0, 367, 313, 312,
	0, 0, 0, 0, 0, 0, 305, 394, 349, 381,
	371, 324, 362, 290, 299, 0, 297, 0, 0, 0,
	333, 347, 0, 0, 0, 0, 0, 369, 0, 0,
	446, 0, 448, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 453, 0,
	263, 256, 294, 355, 358, 279, 343, 268, 301, 350,
	302, 325, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 664, 0, 1112, 1102, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 0, 0, 0, 0, 0, 262, 283, 365,
	0, 0, 0, 0, 0, 393, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 1825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	282, 276, 277, 329, 330, 375, 376, 377, 353, 273,
	0, 280, 281, 0, 360, 0, 0, 0, 332, 0,
	0, 0, 382, 0, 0, 0, 1110, 0, 0, 0,
	307, 257, 311, 0, 0, 0, 1109, 0, 0, 0,
	269, 270, 0, 0, 315, 310, 337, 339, 348, 356,
	0, 287, 321, 370, 359, 0, 318, 372, 288, 306,
	380, 308, 309, 345, 266, 328, 0, 303, 285, 0,
	0, 0, 291, 259, 298, 260, 289, 320, 0, 286,
	0, 361, 331, 1105, 1106, 1108, 378, 0, 336, 1107,
	0, 0, 0, 0, 323, 363, 326, 354, 317, 346,
	275, 335, 373, 304, 341, 374, 0, 389, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 391,
	0, 340, 368, 300, 272, 383, 0, 344, 258, 338,
	0, 264, 267, 379, 366, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 322, 327, 351, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 0, 334, 0, 0, 0, 271, 265, 0, 319,
	0, 0, 0, 274, 0, 293, 352, 0, 255, 357,
	364, 316, 0, 0, 367, 313, 312, 0, 0, 0,
	0, 0, 0, 305, 394, 349, 381, 371, 324, 362,
	290, 299, 0, 297, 0, 0, 0, 333, 347, 0,
	0, 0, 0, 0, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 256, 294,
	355, 358, 279, 343, 268, 301, 350, 302, 325, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 0, 1112, 1102, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 0,
	0, 0, 0, 0, 262, 283, 365, 0, 0, 0,
	0, 0, 393, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 1625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 282, 276, 277,
	329, 330, 375, 376, 377, 353, 273, 0, 280, 281,
	0, 360, 0, 0, 0, 332, 0, 0, 0, 382,
	0, 0, 0, 1110, 0, 0, 0, 307, 257, 311,
	0, 0, 0, 1109, 0, 0, 0, 269, 270, 0,
	0, 315, 310, 337, 339, 348, 356, 0, 287, 321,
	370, 359, 0, 318, 372, 288, 306, 380, 308, 309,
	345, 266, 328, 0, 303, 285, 0, 0, 0, 291,
	259, 298, 260, 289, 320, 0, 286, 0, 361, 331,
	1105, 1106, 1108, 378, 0, 336, 1107, 0, 0, 0,
	0, 323, 363, 326, 354, 317, 346, 275, 335, 373,
	304, 341, 374, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 368,
	300, 272, 383, 0, 344, 258, 338, 0, 264, 267,
	379, 366, 295, 296, 0, 0, 0, 0, 0, 0,
	0, 322, 327, 351, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 292, 0, 334,
	0, 0, 0, 271, 265, 0, 319, 0, 0, 0,
	274, 0, 293, 352, 0, 255, 357, 364, 316, 0,
	0, 367, 313, 312, 0, 0, 0, 0, 0, 0,
	305, 394, 349, 381, 371, 324, 362, 290, 299, 0,
	297, 0, 0, 0, 333, 347, 0, 0, 0, 0,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 256, 294, 355, 358, 279,
	343, 268, 301, 350, 302, 325, 284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 664, 0,
	1112, 1102, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 0, 0, 0, 0,
	0, 262, 283, 365, 0, 0, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	1535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 282, 276, 277, 329, 330, 375,
	376, 377, 353, 273, 0, 280, 281, 0, 360, 0,
	0, 0, 332, 0, 0, 0, 382, 0, 0, 0,
	1110, 0, 0, 0, 307, 257, 311, 0, 0, 0,
	1109, 0, 0, 0, 269, 270, 0, 0, 315, 310,
	337, 339, 348, 356, 0, 287, 321, 370, 359, 0,
	318, 372, 288, 306, 380, 308, 309, 345, 266, 328,
	0, 303, 285, 0, 0, 0, 291, 259, 298, 260,
	289, 320, 0, 286, 0, 361, 331, 1105, 1106, 1108,
	378, 0, 336, 1107, 0, 0, 0, 0, 323, 363,
	326, 354, 317, 346, 275, 335, 373, 304, 341, 374,
	0, 0, 0, 456, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 340, 368, 300, 272, 383,
	0, 344, 258, 338, 0, 264, 267, 379, 366, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 322, 327,
	351, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 0, 334, 0, 0, 0,
	271, 265, 0, 319, 0, 0, 0, 274, 0, 293,
	352, 0, 255, 357, 364, 316, 0, 0, 367, 313,
	312, 0, 0, 0, 0, 0, 0, 305, 394, 349,
	381, 371, 324, 362, 290, 299, 0, 297, 0, 0,
	0, 333, 347, 0, 0, 0, 0, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 256, 294, 355, 358, 279, 343, 268, 301,
	350, 302, 325, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 664, 0, 1112, 1102, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 0, 0, 0, 0, 0, 262, 283,
	365, 0, 0, 0, 0, 0, 393, 0, 0, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 282, 276, 277, 329, 330, 375, 376, 377, 353,
	273, 0, 280, 281, 0, 360, 0, 0, 0, 332,
	0, 0, 0, 382, 0, 0, 0, 1110, 0, 0,
	0, 307, 257, 311, 0, 0, 0, 1109, 0, 0,
	0, 269, 270, 0, 0, 315, 310, 337, 339, 348,
	356, 0, 287, 321, 370, 359, 0, 318, 372, 288,
	306, 380, 308, 309, 345, 266, 328, 0, 303, 285,
	0, 0, 0, 291, 259, 298, 260, 289, 320, 0,
	286, 0, 361, 331, 1105, 1106, 1108, 378, 0, 336,
	1107, 0, 0, 0, 0, 323, 363, 326, 354, 317,
	346, 275, 335, 373, 304, 341, 374, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 368, 300, 272, 383, 0, 344, 258,
	338, 0, 264, 267, 379, 366, 295, 296, 511, 0,
	0, 0, 0, 0, 0, 322, 327, 351, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 0, 334, 0, 0, 0, 271, 265, 0,
	319, 0, 0, 0, 274, 0, 293, 352, 0, 255,
	357, 364, 316, 0, 0, 367, 313, 312, 0, 0,
	0, 0, 0, 0, 305, 394, 349, 381, 371, 324,
	362, 290, 299, 0, 297, 0, 0, 0, 333, 347,
	0, 0, 0, 0, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 256,
	294, 355, 358, 279, 343, 268, 301, 350, 302, 325,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	0, 0, 0, 0, 0, 262, 283, 365, 0, 0,
	0, 0, 0, 393, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 282, 276,
	277, 329, 330, 375, 376, 377, 353, 273, 0, 280,
	281, 0, 360, 0, 0, 0, 332, 0, 0, 0,
	382, 0, 0, 0, 0, 0, 0, 0, 307, 257,
	311, 0, 0, 0, 0, 0, 0, 0, 269, 270,
	0, 0, 315, 310, 337, 339, 348, 356, 0, 287,
	321, 370, 359, 0, 318, 372, 288, 306, 380, 308,
	309, 345, 266, 328, 0, 303, 285, 0, 0, 0,
	291, 259, 298, 260, 289, 320, 0, 286, 0, 361,
	331, 0, 0, 0, 378, 0, 336, 0, 0, 0,
	0, 0, 323, 363, 326, 354, 317, 346, 275, 335,
	373, 304, 341, 374, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	368, 300, 272, 383, 0, 344, 258, 338, 0, 264,
	267, 379, 366, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 322, 327, 351, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 0,
	334, 0, 0, 0, 271, 265, 0, 319, 0, 0,
	0, 274, 0, 293, 352, 0, 255, 357, 364, 316,
	0, 0, 367, 313, 312, 0, 0, 0, 0, 0,
	0, 305, 394, 349, 381, 371, 324, 362, 290, 299,
	0, 297, 0, 0, 0, 333, 347, 0, 0, 0,
	0, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 256, 294, 355, 358,
	279, 343, 268, 301, 350, 302, 325, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 0, 0, 0,
	0, 0, 262, 283, 365, 0, 0, 0, 0, 0,
	393, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 282, 276, 277, 329, 330,
	375, 376, 377, 353, 273, 0, 280, 281, 0, 360,
	0, 0, 0, 332, 0, 0, 0, 382, 0, 0,
	0, 0, 0, 0, 0, 307, 257, 311, 0, 0,
	0, 0, 0, 0, 0, 269, 270, 0, 0, 315,
	310, 337, 339, 348, 356, 0, 287, 321, 370, 359,
	0, 318, 372, 288, 306, 380, 308, 309, 345, 266,
	328, 0, 303, 285, 0, 0, 0, 291, 259, 298,
	260, 289, 320, 0, 286, 0, 361, 331, 0, 0,
	0, 378, 0, 336, 0, 0, 0, 0, 0, 323,
	363, 326, 354, 317, 346, 275, 335, 373, 304, 341,
	374, 0, 0, 0, 46, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 340, 368, 300, 272,
	383, 0, 344, 258, 338, 0, 264, 267, 379, 366,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 322,
	327, 351, 314, 0, 0, 664, 0, 1112, 1102, 1101,
	0, 0, 0, 0, 0, 292, 0, 334, 0, 1103,
	0, 271, 265, 0, 319, 0, 0, 0, 274, 0,
	293, 352, 1104, 255, 357, 364, 316, 0, 0, 367,
	313, 312, 0, 0, 0, 0, 0, 0, 305, 0,
	349, 381, 371, 324, 362, 290, 299, 0, 297, 0,
	0, 0, 333, 347, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 256, 294, 355, 358, 279, 343, 268,
	301, 350, 302, 325, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 664, 0, 1112, 1102, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 261, 0, 0, 0, 0, 0, 262,
	283, 365, 0, 0, 1105, 1106, 1108, 0, 0, 0,
	1107, 0, 0, 0, 342, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 282, 276, 277, 329, 330, 375, 376, 377,
	353, 273, 0, 280, 281, 0, 360, 0, 0, 0,
	332, 0, 0, 0, 382, 0, 0, 0, 0, 0,
	0, 0, 307, 257, 311, 534, 0, 0, 0, 0,
	0, 0, 269, 270, 0, 0, 315, 310, 337, 339,
	348, 356, 533, 287, 321, 1110, 0, 532, 0, 0,
	0, 0, 0, 0, 578, 1109, 579, 0, 0, 0,
	0, 0, 0, 0, 569, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 456, 558, 555,
	556, 560, 561, 562, 563, 0, 0, 0, 559, 564,
	450, 451, 535, 0, 0, 0, 1113, 530, 547, 0,
	577, 0, 1105, 1106, 1108, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 0, 0, 0, 544, 545, 0, 0, 0, 0,
	594, 0, 546, 0, 0, 979, 543, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 990, 996, 994, 0, 0, 991, 0, 0,
	989, 0, 0, 998, 1113, 0, 997, 983, 993, 995,
	992, 987, 0, 982, 0, 1000, 999, 1001, 980, 1003,
	0, 0, 0, 1007, 1004, 1006, 1005, 580, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 581, 582, 0, 0, 0, 0, 0, 986, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 593, 589, 590, 587, 588,
	586, 585, 584, 595, 571, 572, 573, 574, 576, 0,
	534, 454, 453, 575, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 829, 0, 533, 0, 0,
	0, 0, 532, 0, 0, 0, 0, 0, 0, 578,
	0, 579, 0, 0, 0, 0, 0, 0, 591, 569,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 456, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 0, 559, 564, 450, 451, 535, 0, 0,
	0, 0, 530, 547, 0, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 544,
	545, 834, 0, 0, 0, 594, 0, 546, 0, 0,
	542, 543, 548, 0, 0, 0, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 533, 0, 0, 0, 0, 532,
	0, 0, 0, 0, 0, 0, 578, 0, 579, 0,
	0, 0, 0, 0, 0, 0, 569, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 411, 554, 713, 456,
	558, 555, 556, 560, 561, 562, 563, 0, 0, 0,
	559, 564, 450, 451, 535, 0, 0, 0, 0, 530,
	547, 0, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 544, 545, 0, 0,
	0, 0, 594, 0, 546, 0, 0, 542, 543, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 581, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	593, 589, 590, 587, 588, 586, 585, 584, 595, 571,
	572, 573, 574, 576, 0, 0, 454, 453, 575, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 581, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 593, 589, 590,
	587, 588, 586, 585, 584, 595, 571, 572, 573, 574,
	576, 0, 534, 454, 453, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	0, 0, 0, 0, 532, 0, 0, 0, 0, 0,
	0, 578, 0, 579, 0, 0, 0, 0, 0, 0,
	591, 569, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 456, 558, 555, 556, 560, 561,
	562, 563, 0, 0, 0, 559, 564, 450, 451, 535,
	0, 0, 0, 0, 530, 547, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 545, 834, 0, 0, 0, 594, 0, 546,
	0, 0, 542, 543, 548, 664, 0, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 533, 0, 0, 0, 0,
	532, 0, 0, 0, 0, 0, 0, 578, 0, 579,
	0, 0, 0, 0, 0, 0, 0, 569, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 0, 554,
	456, 558, 555, 556, 560, 561, 562, 563, 0, 0,
	0, 559, 564, 450, 451, 535, 0, 0, 0, 0,
	530, 547, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 544, 545, 0,
	0, 0, 0, 594, 0, 546, 0, 0, 542, 543,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 581, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 593, 589, 590, 587, 588, 586, 585, 584,
	595, 571, 572, 573, 574, 576, 0, 0, 454, 453,
	575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	0, 0, 596, 0, 581, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 593, 589,
	590, 587, 588, 586, 585, 584, 595, 571, 572, 573,
	574, 576, 0, 534, 454, 453, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	533, 0, 0, 0, 0, 532, 0, 0, 0, 0,
	0, 0, 578, 0, 579, 0, 0, 0, 0, 0,
	0, 591, 569, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 456, 558, 555, 556, 560,
	561, 562, 563, 0, 0, 0, 559, 564, 450, 451,
	535, 0, 0, 0, 0, 530, 547, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 545, 0, 0, 0, 0, 594, 0,
	546, 0, 0, 542, 543, 548, 0, 0, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 0, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 578, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 569, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 411, 0,
	554, 456, 558, 555, 556, 560, 561, 562, 563, 0,
	0, 0, 559, 564, 450, 451, 535, 0, 0, 0,
	0, 0, 547, 0, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 544, 545,
	0, 0, 0, 0, 594, 0, 546, 0, 0, 542,
	543, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 0, 0, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 581,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 593, 589, 590, 587, 588, 586, 585,
	584, 595, 571, 572, 573, 574, 576, 0, 0, 454,
	453, 575, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 0,
	0, 0, 0, 596, 0, 581, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 593,
	589, 590, 587, 588, 586, 585, 584, 595, 571, 572,
	573, 574, 576, 0, 0, 454, 453, 575, 923, 924,
	925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 569, 570, 0, 0, 0,
	0, 0, 591, 0, 0, 411, 0, 0, 456, 558,
	555, 556, 560, 561, 562, 563, 0, 0, 0, 559,
	564, 450, 451, 0, 0, 0, 0, 0, 0, 547,
	0, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 544, 545, 0, 0, 0,
	0, 594, 0, 546, 0, 0, 542, 543, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 578, 0,
	579, 0, 0, 0, 0, 592, 0, 0, 569, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 456, 558, 555, 556, 560, 561, 562, 563, 0,
	0, 0, 559, 564, 450, 451, 0, 0, 0, 0,
	0, 0, 547, 554, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 544, 545,
	0, 0, 0, 0, 594, 0, 546, 0, 0, 542,
	543, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 0, 0, 0,
	596, 0, 581, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 566, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 593, 589, 590, 587,
	588, 586, 585, 584, 595, 571, 572, 573, 574, 576,
	0, 580, 454, 453, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 581, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 593,
	589, 590, 587, 588, 586, 585, 584, 595, 571, 572,
	573, 574, 576, 34, 0, 454, 453, 575, 0, 578,
	0, 579, 0, 0, 0, 0, 0, 0, 0, 569,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 852,
	0, 0, 456, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 591, 559, 564, 450, 451, 0, 0, 0,
	0, 0, 0, 547, 0, 577, 0, 0, 0, 0,
	0, 76, 0, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 544,
	545, 0, 0, 0, 0, 594, 0, 546, 0, 0,
	542, 543, 548, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 0, 119,
	120, 0, 121, 122, 123, 125, 124, 93, 94, 95,
	99, 97, 96, 98, 70, 72, 0, 68, 71, 77,
	73, 74, 75, 89, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 90, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 0, 0, 0, 0, 821,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 581, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 583,
	593, 589, 590, 587, 588, 586, 585, 584, 595, 571,
	572, 573, 574, 576, 0, 0, 454, 453, 575, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591,
}

var yyPact = [...]int16{
	476, -1000, -263, -1000, -1000, 1445, 827, 392, -1000, -1000,
	-1000, 909, 446, 445, 439, 259, 407, 772, 456, 891,
	454, 386, -1000, -189, -155, -1000, -62, 449, -1000, 1223,
	-1000, 3977, 3977, 3977, -1000, 360, 772, 772, 386, 183,
	386, 1457, 398, 682, 1585, 523, -1000, -1000, 386, 891,
	679, -1000, -1000, -1000, -1000, 262, 197, 258, 191, -156,
	45, -1000, -1000, -1000, -1000, -1000, 1349, -1000, -1000, -1000,
	1349, 131, 1443, 1349, 1443, -1000, 1349, 1443, 88, 88,
	88, 88, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1441, 1440, -1000, 1349, 1349, 1349, 1349, 1349, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1434, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1423,
	150, 1423, 1365, 1365, -1000, -1000, 191, 191, 1438, 891,
	772, 1455, 1454, 891, -200, 891, 891, 1668, 891, -1000,
	-1000, -1000, 215, 1556, 3977, 6613, 891, -1000, 1554, 468,
	891, 4728, -1000, 1523, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1431, 724, 772, 323, 126, 1256, 331, 411, 326,
	1025, 312, -1000, -1000, -1000, 770, -1000, 772, -1000, 1681,
	-1000, -1000, 311, -1000, 310, 666, 927, 891, 1430, 193,
	1424, 4192, 861, -1000, -267, -1000, 16, -1000, -1000, 834,
	88, 1349, -1000, 88, 839, 88, 88, -1000, -1000, 528,
	1537, 528, 528, 528, 528, 926, 926, -86, -86, -1000,
	-1000, -1000, 859, -1000, 858, 1423, -1000, -1000, -1000, 857,
	-1000, 891, 772, 1420, 1452, 891, 891, 1584, 399, -1000,
	-1000, 1578, 1572, 1253, -1000, -1000, 212, -1000, 423, -1000,
	772, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1347, -1000, 334, 459, 5859, 197,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 417, -1000, 1675,
	1604, 343, 5, -181, 973, -1000, -1000, 1416, -1000, -1000,
	8204, -1000, 971, 959, -1000, 951, 947, 35, 772, -1000,
	-178, 124, 8, -1000, -1000, 1256, -1000, 1415, 8204, 1570,
	-1000, 1543, 852, -1000, 3807, -1000, -220, -1000, -1000, -1000,
	-220, -1000, -1000, -1000, 1256, -1000, 1412, 1407, -1000, 1402,
	-1000, -1000, 1256, 1256, 1256, 518, -1000, -1000, -1000, -1000,
	-1000, -1000, 1250, 528, 88, 528, 1246, 1234, 528, 528,
	-1000, -1000, 944, 594, -1000, -1000, -1000, -1000, 1218, -1000,
	1216, -1000, 143, 142, -1000, 1225, 1311, -1000, 1214, 1334,
	1451, 220, 891, 1397, 1396, 1338, 386, 1338, 1602, 266,
	891, 1668, 408, 1668, 423, 772, 313, 772, -1000, -1000,
	349, 4351, -1000, -1000, 1195, -1000, 315, 1349, 480, 480,
	-186, 308, 302, -181, 1256, 1395, -1000, 417, 607, -1000,
	8204, 254, 1256, 1256, 1256, 1256, -1000, -1000, 506, -1000,
	-1000, -1000, 8740, 8740, 8740, 8740, 8740, 8740, 8740, -1000,
	-1000, -1000, -1000, 55, -1000, -220, -1000, 900, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 516, 515, -1000, 7869, 1256,
	1256, 1256, 1256, 1256, 1256, 1256, 1256, 8204, 1256, 1515,
	1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
	1256, 806, 1256, 1256, 1256, 1256, -1000, -1000, -1000, -1000,
	-1000, -1000, -181, 1394, -1000, -1000, -1000, 666, -1000, 8204,
	408, 811, 132, -1000, 1309, 1153, 2327, 1150, -1000, 9022,
	-1000, 996, -1000, 823, -1000, 795, 1141, 7301, 7753, 7753,
	6236, -1000, -1000, 528, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 88, 922, 88, 33, 30, -1000, 851, -1000,
	847, 220, 772, 891, 1135, 1297, -1000, 273, 1393, 408,
	417, -1000, 1630, 1689, -1000, 1338, 891, -1000, 395, 1607,
	-1000, -1000, 1601, -1000, 1295, -1000, -1000, 1278, 1668, 1391,
	772, -1000, -1000, 337, 772, -1000, -1000, -1000, -1000, -1000,
	1351, 417, 1551, -1000, -1000, -1000, 721, -1000, -1000, 705,
	255, 694, -1000, 772, -181, 1388, 8204, 417, 1191, 270,
	8204, 8204, 828, -1000, 570, 8647, 788, 574, 8740, 8740,
	8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740,
	8740, 8740, 8740, 2846, 921, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 930, -1000, 1338,
	886, 996, 974, 974, 41, 41, 41, 41, 41, 41,
	100, -1000, -265, -1000, -1000, 5482, 6236, 996, 1178, 583,
	7869, 7753, 7753, 6966, 8204, 7753, 7753, 7753, 1587, 661,
	583, 886, 1600, 996, 996, 996, 996, -1000, 996, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 127, -1000, -1000,
	-1000, -1000, -1000, -1000, 7753, 7753, 7753, 7753, -1000, 772,
	1256, 607, 1188, -97, 8204, 1387, 840, -1000, 1130, -220,
	-1000, -1000, -1000, -156, -1000, -1000, -1000, -1000, 996, 7753,
	1129, 1178, -1000, 768, -1000, 513, 1129, 768, 1129, 1256,
	-1000, 528, -1000, 528, -1000, -1000, 1126, 1115, 1070, 1386,
	1384, -210, 834, 220, 1172, 1170, 1615, 1628, 1338, 1575,
	1497, -1000, 996, 1568, 772, -1000, -1000, -1000, -1000, -1000,
	237, 656, 772, 6709, 1245, -1000, 673, 1383, 128, 352,
	1448, 3144, 170, -1000, 792, 651, 892, 641, 636, 634,
	625, 616, 613, 604, 602, 601, 599, -1000, -1000, -1000,
	-1000, -1000, 1678, -1000, -1000, -1000, 1657, 1382, 1375, 417,
	607, 1168, 1351, -1000, -77, 570, 579, -1000, -1000, 722,
	-1000, -1000, 2729, 8740, 8740, 8740, -1000, -1000, -1000, -1000,
	788, 8740, 8740, 8740, 2636, 2729, 2714, 889, 706, 41,
	92, 92, 38, 38, 38, 38, 38, 24, 24, -1000,
	-99, -1000, 1349, -1000, -1000, -1000, 996, 996, -1000, 512,
	-1000, -1000, -220, 873, -1000, -1000, 869, 1256, 511, -1000,
	-1000, -1000, 8204, -1000, 996, 1129, 1129, 835, 1294, 9051,
	1349, -1000, 1349, 1365, -1000, -1000, 160, 1349, 159, -1000,
	-1000, -1000, -1000, 1365, -1000, -1000, -1000, -1000, -1000, 1349,
	1349, -1000, -1000, 1349, 1349, -1000, 1349, 1349, 669, 1287,
	1258, 1129, 7753, -1000, 671, -1000, 8204, 996, 891, -1000,
	-1000, -1000, -1000, -1000, -1000, 1129, 996, 1293, 1129, 1129,
	1155, -1000, 8204, 270, 1450, -1000, -1000, 647, -1000, 1066,
	1056, -1000, -1000, 1129, 7753, -261, -1000, -1000, -1000, 925,
	-1000, -1000, 3974, -261, -261, 7753, -1000, -1000, -1000, -1000,
	-210, 220, 417, 1636, 1360, 1036, 1636, 1351, 1552, 8204,
	8204, 1630, -1000, 1338, -1000, -1000, 1587, -1000, -1000, 728,
	-1000, 1338, 1232, 233, 181, 8204, -1000, 2296, -1000, 6709,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1630,
	-1000, -1000, -1000, 772, 3080, 772, 772, 772, 371, 8320,
	8204, -1000, -1000, -1000, 891, 1031, 2467, 673, 673, 2467,
	673, 673, 417, 417, 1359, 1357, 301, -1000, 772, -1000,
	-128, 3144, 772, -1000, 824, -1000, -1000, 753, 822, 753,
	753, 753, 753, 753, 242, 814, 369, 480, 480, 772,
	417, 1112, 270, 1351, 1448, -1000, -1000, -1000, -1000, 2729,
	2729, 2729, -1000, 2636, 2729, 2564, -1000, 8740, 8740, 141,
	-1000, -1000, 5482, 57, -1000, -220, 6236, 583, -1000, -1000,
	-1000, 3584, 921, 8204, -1000, 281, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3584, 8740,
	8740, 8740, 8740, -91, 1281, 580, -1000, 8204, 756, -1000,
	-1000, -1000, -1000, -1000, -1000, 362, 772, 607, -1000, 1671,
	-119, 405, -1000, -1000, -1000, -1000, -1000, 1256, -1000, -1000,
	510, -1000, -1000, 996, 1636, 1016, 1109, 1351, 8204, 408,
	-210, 1351, -1000, -1000, 1664, 555, 790, 1288, -1000, 637,
	1615, 996, 1362, -1000, -1000, -101, 8204, 6709, 5699, 583,
	5699, -1000, 6709, 447, 1615, 392, 916, 885, 1272, 397,
	-1000, 2843, 781, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 772, 1653,
	1649, 1647, 1644, 6857, 254, 659, 179, 1599, -1000, -1000,
	2467, -1000, -1000, -1000, -1000, -1000, 1107, 1089, 417, 417,
	1353, 1256, 1055, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 666, 666, 1053, 1042, 1351, -1000, 1448, -1000,
	-1000, 8740, 2729, 2729, 10, -1000, -1000, 869, -1000, -1000,
	996, 1349, 996, 607, -1000, -1000, 996, 2699, 2094, 2025,
	198, 1256, -73, -1000, 583, 8204, 891, -1000, 270, 480,
	480, -1000, -1000, -1000, 167, 785, 774, 760, 742, 72,
	-1000, 1627, 455, 5105, -1000, 1351, 1636, 1351, 1448, 583,
	1035, 1636, 1448, -1000, 1513, 8204, 8204, 8204, -1000, 1552,
	-1000, 7753, -1000, -1000, -225, 583, 2296, 2445, -1000, -1000,
	236, 5322, -1000, 1552, 912, 891, 1033, -1000, 1051, 1378,
	-1000, -1000, -1000, 1562, 879, 424, 772, 219, 3977, -1000,
	-1000, 1271, 3220, 2, -1000, -1000, -1000, 593, 505, 850,
	-1000, 1527, -1000, -1000, 3080, 1548, -1000, -1000, -1000, -1000,
	-1000, 5699, 6709, 5699, 656, 235, -1000, 329, 1023, 1020,
	417, 772, -1000, 3144, -1000, -1000, 347, 1351, 1448, -1000,
	2729, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8740, -1000,
	8740, -1000, 8740, -1000, 8740, 8740, 996, 830, 583, 1341,
	-1000, -1000, -1000, 741, -1000, 735, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 158, -1000, 1619, 996, -1000, 1448, 1351,
	-1000, -1000, -1000, 1351, -1000, 1511, 583, 583, -1000, -1000,
	1249, 8204, 4945, -1000, -1000, -1000, -1000, 285, 891, -1000,
	285, 1097, 885, 891, -1000, -1000, 886, 885, 885, 885,
	885, 885, -1000, 1482, 1481, -1000, 1473, 1472, 1518, 891,
	1015, 879, 569, 1256, -1000, 920, -1000, -1000, -1000, 1562,
	1595, -1000, 3597, 1271, 2, 1268, -1000, -10, -15, 2206,
	6236, 528, -1000, -1000, -1000, -1000, -1000, 772, 1980, 1963,
	1899, 176, 232, 195, -1000, 205, 1351, 1351, 1013, 996,
	-1000, 891, 1448, -1000, 2263, 2263, 2263, 2263, 61, -1000,
	-1000, 772, -1000, -1000, -1000, 488, 8204, -1000, -1000, -1000,
	1448, -1000, 1636, 885, 583, -1000, -1000, 1201, 1256, -1000,
	1636, 885, 1086, -1000, 1241, -1000, 589, 1378, 1346, 1449,
	1286, -1000, -1000, -1000, -1000, 1476, -1000, 1475, -1000, -1000,
	-1000, -1000, -111, 427, 422, 412, 772, -1000, 1338, -1000,
	1268, 2, 15, -1000, -1000, -1000, -1000, 583, 587, -1000,
	-1000, -1000, 5699, 3437, 596, 5699, -1000, -1000, 189, -1000,
	1448, 1448, -1000, -1000, 1340, -1000, -1000, -1000, -1000, -1000,
	996, 210, -136, 1010, 6236, 995, -1000, 583, -1000, 1634,
	1263, 1289, 886, 1256, -1000, 1003, 772, 1630, 1086, -1000,
	1636, 886, 8204, -1000, -1000, 8204, 1337, -1000, 8204, -1000,
	-1000, -1000, -1000, 1335, 1256, 1256, 1256, 1006, -1000, -1000,
	-1000, -1000, -12, -24, -1000, 8204, 384, 6709, 174, 1971,
	-1000, -1000, -1000, -1000, 772, -1000, 1495, -95, -159, -1000,
	-1000, -1000, 996, 8204, 1632, 1608, -1000, 1546, 1231, 1259,
	-1000, -1000, 7418, 996, 1008, 485, 1006, 1615, -1000, 1630,
	-1000, 583, 583, 408, 583, -249, 408, 408, 408, 798,
	772, -1000, -1000, -1000, 583, -1000, 1891, 5699, 4568, 1000,
	-1000, 1453, -1000, -1000, -1000, -1000, 8204, 8204, 298, -1000,
	1256, -1000, -1000, 1255, 772, 772, -1000, -1000, 1615, 989,
	958, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 956, 956,
	956, 569, -1000, 1154, 1826, -1000, -1000, -108, 583, 1262,
	1660, -1000, 1256, -1000, 1338, 481, -1000, -1000, -1000, -1000,
	-249, -1000, -1000, -1000, -111, 372, -1000, -141, 886, 1259,
	996, 772, -1000, -1000, -1000, -161, 1257, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1931, 3, 23, 1930, 1928, 1925, 1923, 1920, 1918,
	1917, 1916, 1915, 1913, 1912, 1906, 1904, 1903, 1902, 80,
	1895, 1894, 1893, 76, 1892, 1891, 1885, 1883, 72, 157,
	78, 99, 851, 30, 29, 43, 40, 1882, 31, 1881,
	1880, 50, 1879, 39, 1877, 1876, 61, 1875, 1874, 9,
	60, 69, 104, 1871, 1867, 91, 1463, 1865, 1862, 85,
	1861, 1860, 75, 11, 6, 7, 10, 1857, 201, 1,
	1856, 74, 1855, 1854, 1848, 1841, 28, 1837, 51, 57,
	5, 56, 1830, 17, 64, 42, 24, 16, 2, 47,
	27, 1829, 22, 35, 26, 1828, 63, 1826, 102, 44,
	82, 108, 0, 25, 86, 1823, 1822, 1821, 90, 89,
	41, 20, 49, 66, 1820, 59, 94, 54, 92, 88,
	1819, 93, 1818, 1817, 1816, 1815, 1813, 1792, 878, 115,
	67, 77, 1812, 1810, 84, 386, 383, 87, 380, 1389,
	73, 1804, 1803, 1799, 1797, 97, 1785, 55, 95, 15,
	450, 1784, 1783, 1780, 1776, 1772, 1770, 1767, 96, 1766,
	79, 68, 65, 500, 46, 1765, 1764, 1762, 1761, 70,
	1757, 1756, 1755, 53, 1754, 1748, 98, 62, 114, 105,
	113, 1741, 1740, 124, 71, 1739, 101, 112, 1737, 100,
	21, 13, 253, 48, 1735, 1733, 1732, 8, 4, 1730,
	1728, 1727, 1726, 1725, 1723, 52, 1721, 83, 1719, 14,
	1718, 1716, 45, 1710, 1708, 1701, 1700, 1698, 790, 182,
	1697, 103, 119, 1696, 109,
}

var yyR1 = [...]uint8{
	0, 214, 215, 215, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 15, 15, 15, 15, 15, 15,
	15, 217, 217, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 22, 22, 7, 8, 8, 8, 220, 220,
	41, 41, 85, 85, 9, 9, 9, 9, 10, 10,
	194, 194, 193, 195, 195, 11, 11, 11, 11, 11,
	188, 188, 188, 188, 188, 12, 12, 191, 191, 191,
	13, 13, 13, 13, 90, 90, 94, 94, 94, 95,
	95, 95, 95, 206, 206, 114, 114, 216, 216, 221,
	221, 221, 221, 221, 221, 221, 186, 186, 186, 186,
	187, 187, 187, 187, 189, 189, 190, 190, 190, 190,
	190, 190, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 100, 100, 167, 167, 167, 168, 168, 168,
	168, 168, 168, 170, 170, 171, 171, 106, 106, 172,
	172, 18, 152, 153, 153, 153, 153, 153, 153, 153,
	153, 139, 139, 139, 117, 117, 117, 117, 117, 117,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 178,
	178, 178, 178, 178, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 180, 181, 182, 174, 174, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 129, 129, 129, 129, 129, 129, 173, 173,
	169, 169, 169, 169, 121, 121, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 120, 120, 125, 125, 122, 122, 122, 122, 122,
	122, 122, 122, 118, 118, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 126, 126, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 138, 138,
	127, 127, 136, 136, 137, 137, 137, 128, 128, 128,
	135, 135, 135, 132, 132, 133, 133, 134, 134, 134,
	130, 130, 130, 131, 131, 131, 141, 163, 163, 163,
	165, 165, 166, 166, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 151, 151,
	183, 183, 184, 184, 185, 185, 162, 162, 162, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 150, 150, 160, 160, 161, 161, 158, 158, 158,
	159, 145, 145, 145, 145, 145, 146, 146, 147, 147,
	147, 147, 142, 142, 143, 143, 144, 144, 176, 176,
	176, 210, 210, 210, 210, 210, 210, 211, 211, 177,
	177, 148, 148, 149, 149, 156, 156, 156, 156, 222,
	222, 154, 154, 154, 155, 155, 155, 223, 19, 20,
	20, 21, 21, 21, 25, 25, 25, 23, 23, 24,
	24, 30, 30, 29, 29, 31, 31, 31, 31, 105,
	105, 105, 104, 104, 207, 207, 207, 207, 207, 33,
	33, 34, 34, 35, 35, 36, 36, 36, 197, 197,
	196, 196, 198, 198, 198, 198, 198, 198, 48, 48,
	83, 83, 83, 86, 86, 37, 37, 37, 37, 38,
	38, 39, 39, 40, 40, 112, 112, 111, 111, 111,
	110, 110, 42, 42, 42, 44, 43, 43, 43, 43,
	45, 45, 47, 47, 46, 46, 49, 49, 49, 49,
	50, 50, 84, 84, 32, 32, 32, 32, 32, 32,
	32, 97, 97, 52, 52, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	61, 61, 61, 61, 61, 61, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 28, 28, 62,
	62, 62, 68, 63, 63, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 59, 59, 59, 59, 59, 59, 59,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 224, 224, 60, 60, 60, 60, 26, 26,
	26, 26, 26, 113, 113, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 116,
	116, 116, 116, 116, 116, 72, 72, 27, 27, 70,
	70, 71, 99, 99, 73, 73, 69, 69, 69, 199,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	74, 74, 75, 75, 208, 208, 209, 76, 76, 77,
	77, 78, 79, 79, 79, 80, 80, 80, 80, 81,
	81, 81, 54, 54, 54, 54, 54, 54, 82, 82,
	82, 82, 87, 87, 64, 64, 66, 66, 65, 67,
	88, 88, 92, 89, 89, 93, 93, 93, 93, 93,
	16, 17, 91, 91, 91, 107, 107, 107, 98, 98,
	96, 96, 102, 103, 103, 103, 103, 108, 108, 109,
	109, 200, 200, 200, 201, 201, 201, 202, 202, 203,
	204, 204, 205, 213, 213, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 218, 219,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 5, 9, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 4, 2,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 0, 3, 0, 2, 2, 0, 2, 2,
	2, 2, 2, 0, 2, 0, 3, 0, 1, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 4, 2, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	6, 6, 8, 8, 5, 8, 7, 4, 0, 2,
	4, 6, 2, 4, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 3, 3, 2, 2, 3,
	4, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 5, 5, 8, 8, 13, 11, 1, 1,
	2, 2, 10, 8, 9, 7, 7, 5, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 4, 8,
	1, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 0, 4, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 4, 4, 4, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 4, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 6, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 2, 1, 4, 5, 5, 5, 5, 6, 4,
	4, 4, 6, 6, 6, 6, 6, 8, 6, 8,
	6, 8, 6, 8, 9, 7, 5, 4, 4, 3,
	3, 3, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 2, 2, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 0, 2, 1, 3, 5, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 1, 3, 1, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 5, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 2, 0, 2, 2, 0, 1, 4,
	1, 3, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -214, -1, -14, -15, -18, 125, 126, -215, 385,
	-152, 58, -210, -211, 272, -172, 134, 147, 165, 166,
	357, 132, 369, 370, 149, 372, 79, -96, 137, -153,
	-139, -102, 63, 36, 61, 133, 133, 133, 135, 209,
	135, -102, -102, 138, -46, -108, 61, 63, 132, -98,
	138, 372, 369, 370, 337, 132, 60, 59, -140, -117,
	-121, -118, -123, -122, -124, -102, -119, -120, 245, 349,
	242, 246, 243, 248, 249, 250, 119, 247, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 251,
	263, 33, 154, 235, 236, 237, 240, 239, 241, 238,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 216,
	217, 218, 219, 220, 221, 222, 223, 224, 225, 227,
	228, 230, 231, 232, 234, 233, -140, -140, -102, 56,
	208, -102, -102, -98, 210, -98, 56, -186, 56, 19,
	189, 190, 202, 81, 25, 122, -98, -46, 81, -46,
	301, -156, -222, 352, 37, -139, -141, -145, -142, -143,
	-144, -157, -146, 141, 139, 149, 383, 143, 144, 272,
	-150, 145, 133, 150, 73, 81, -178, 141, -181, 56,
	280, 286, 139, 150, 149, 383, 71, 142, 25, 359,
	361, 31, 32, -134, 386, 274, -132, 283, -127, 58,
	-127, -126, 244, -128, 58, -127, -128, -127, -128, -130,
	246, -130, -130, -130, -130, 58, 58, -127, -127, -127,
	-127, -127, 58, -136, 58, -125, 229, -136, -137, 58,
	-137, 56, 57, -46, -102, 56, 56, -46, -206, 380,
	381, -46, -46, -189, -187, 8, 9, 10, -46, 203,
	26, -117, -109, -108, -101, 130, 190, 360, 80, 25,
	27, 280, 286, 189, 83, 119, 16, 84, 196, 369,
	370, 118, 76, 338, 125, 52, 330, 331, 328, 194,
	340, 341, 329, 287, 201, 20, 31, 380, 10, 28,
	152, 24, 112, 127, 191, 87, 88, 155, 26, 153,
	75, 197, 199, 19, 55, 145, 11, 359, 13, 14,
	374, 361, 138, 137, 99, 373, 133, 50, 8, 121,
	29, 381, 96, 46, 150, 200, 48, 97, 17, 332,
	333, 34, 347, 159, 114, 53, 40, 375, 81, 376,
	73, 56, 301, 195, 79, 15, 51, 160, 377, 147,
	198, 98, 128, 337, 49, 192, 378, 131, 193, 6,
	343, 33, 151, 47, 132, 288, 86, 136, 74, 166,
	5, 149, 9, 54, 57, 334, 335, 336, 38, 85,
	12, 148, 351, 77, -46, 26, 130, -46, -154, 59,
	-103, 71, -102, 294, 146, -101, 36, 58, -177, 56,
	81, -148, -102, 150, -150, 61, 133, -176, 369, 370,
	-218, 58, -150, -150, 61, 133, 150, 61, 150, 73,
	19, -102, 9, 150, 150, -177, 63, -46, 58, -174,
	360, 16, 58, -179, 58, -180, 63, 64, 65, 66,
	73, -129, 72, -52, 275, -59, 328, 331, 330, 276,
	74, 75, -102, 346, 345, -108, 61, -182, 65, 387,
	-133, 284, 65, -130, -127, -130, 65, 61, -130, -130,
	-131, 119, 118, 33, -131, -131, -131, -131, -138, 63,
	-138, -135, 351, 352, -135, 65, 65, -136, 65, -46,
	-102, 58, 56, -46, -46, 25, 135, 25, -167, 25,
	56, 59, 203, -186, -102, 57, -106, 141, -145, 149,
	130, 89, -103, -222, -161, -158, -102, 150, 10, 9,
	19, 145, 139, 149, 383, -176, 61, 58, -32, -51,
	81, -56, 31, 26, 9, 76, -55, -52, -69, -199,
	-67, -68, 119, 120, 108, 109, 116, 82, 121, -59,
	-57, -58, -60, -202, 176, 63, 64, -102, 62, 72,
	65, 66, 67, 68, 73, -108, 306, -65, -218, 48,
	49, 338, 339, 340, 341, 347, 342, 84, 38, 40,
	251, 275, 276, 328, 336, 335, 334, 332, 333, 330,
	331, 382, 138, 329, 114, 337, 273, 61, 61, 61,
	61, -176, 149, -148, -102, 371, -178, 383, -129, -218,
	58, -32, 25, 31, 65, -179, 58, -180, -169, 382,
	-169, -218, -127, 58, -127, 58, 58, -218, -218, -218,
	122, 60, -131, -130, -131, 60, 60, -131, -131, 61,
	61, 119, 60, 59, 60, 235, 235, 60, 59, 60,
	59, 58, 57, 56, -160, -161, -59, -102, -46, 58,
	58, -2, -3, -4, 6, -218, -98, -2, -168, 19,
	173, 174, -46, -187, -83, -102, 150, -189, -186, -102,
	-217, 133, 150, -102, 141, -145, -155, -103, 63, 65,
	60, 59, -127, -159, 278, -127, -147, 169, 170, 33,
	171, -147, 371, 150, 150, -176, -218, 58, -161, -219,
	80, 79, 96, 60, -32, -53, 99, 81, 97, 98,
	83, 105, 104, 115, 108, 109, 110, 111, 112, 113,
	114, 106, 107, 382, 118, 89, 90, 91, 92, 93,
	94, 95, 100, 101, 102, 103, -97, -218, -68, -218,
	-218, -218, 123, 124, -56, -56, -56, -56, -56, -56,
	-56, -203, 274, -169, 63, 122, 122, -2, -63, -32,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -72,
	-32, -218, 41, -218, -218, -218, -218, -224, -218, -224,
	-224, -224, -224, -224, -224, -116, 119, 246, 154, 237,
	-119, -118, 252, 251, -218, -218, -218, -218, -176, 58,
	-177, -32, -83, 60, 58, 361, 59, 60, -179, 63,
	60, 277, 121, -117, -219, 60, 60, 60, -30, 24,
	-29, -63, -31, -32, 110, -108, -29, -32, -29, -103,
	-131, -130, 63, -130, 285, 285, 65, 65, -160, -102,
	-46, 60, 58, 58, -83, -161, -76, 15, -21, 5,
	-19, -223, -2, -46, 136, 21, 6, 8, 9, 10,
	19, -100, 59, 25, -189, -216, 58, -102, 149, -102,
	-163, -165, 351, -164, 57, 146, 71, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 61, -158, -79, 27,
	28, -177, 56, 73, 172, -177, 56, -148, -176, 58,
	-32, -161, 60, -173, 171, -32, -32, -61, 73, 81,
	74, 75, -56, 21, 22, 23, -62, -65, -68, 69,
	99, 97, 98, 83, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -121,
	236, -116, -119, -113, 61, 63, 61, -69, -102, -108,
	-219, -55, 63, -102, -55, -102, 386, -103, -109, -101,
	-103, -219, 59, -219, -2, -29, -29, -32, -115, 119,
	242, 154, 237, 231, 261, 262, 282, 235, 283, 224,
	216, 221, 234, 232, 218, 233, 217, 230, 227, 240,
	239, 241, 252, 243, 248, 250, 249, 247, -32, -31,
	-31, -29, -23, 24, -70, -71, 85, -69, 19, -219,
	-219, -219, -219, -219, 244, -29, -30, -29, -29, -29,
	-149, -102, -218, -219, 60, 357, 358, -32, 58, 65,
	60, -134, -219, -29, 59, -219, -219, -105, -104, 25,
	-102, 63, 122, -219, -219, -218, -131, -131, 60, 60,
	60, 58, 58, -84, 373, -160, 60, 60, -80, 17,
	16, -5, -3, -218, 21, 24, -25, 44, 45, -20,
	-219, 25, -149, 191, -99, 85, -102, -190, -192, 211,
	-6, -8, -7, -10, -9, -11, -12, -13, -16, -3,
	-22, 10, 9, 20, 33, 195, 196, 201, 197, 148,
	138, -17, 8, 337, 56, -221, -102, 108, 89, 63,
	-139, 59, 58, 58, 369, 370, 139, -162, 56, -164,
	351, 58, 353, 61, -151, 89, 63, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 9, 10, 58,
	58, -161, -219, 60, -163, 344, 73, 74, 75, -56,
	-56, -56, -62, -56, -56, -56, -28, 155, 80, 351,
	-219, -219, 122, -204, -205, 63, 122, -32, -219, -219,
	-219, 59, 57, 59, -127, -127, -127, -137, 222, -127,
	222, -137, -127, -127, -127, -127, -127, -127, 25, 59,
	11, 59, 11, -219, -29, -73, -71, 87, -32, -219,
	-108, -219, -219, -219, -219, 60, 59, -32, -173, 56,
	60, -175, 60, 60, -219, -31, -207, 384, -104, 110,
	-109, -207, -207, -30, -84, -160, -161, -50, 12, 58,
	60, -50, -163, -81, 19, 34, -32, -77, -78, -32,
	-76, -2, -23, 70, -2, -170, 57, 192, 211, -32,
	385, -192, 211, -190, -76, -19, -19, -19, -194, -102,
	-193, -19, -213, -212, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 326, 327, -102, -102, -102, -188, 40,
	198, 199, 200, -51, -56, -32, -51, -46, 60, -221,
	-102, -221, -221, -221, -221, -221, -161, -161, 58, 58,
	150, -102, -166, -164, -102, 65, -183, 56, 77, 65,
	-183, -183, -183, -183, -183, -184, 187, 188, 65, -185,
	-184, 65, -147, -147, -149, -161, 60, -173, -163, -162,
	-28, 80, -56, -56, 235, -103, 387, 59, -169, -103,
	-115, 119, -113, -32, -130, 61, -115, -56, -56, -56,
	-56, 348, -76, 88, -32, 86, 142, -102, -219, 10,
	9, 357, 358, 60, 212, 363, 364, 159, 365, 171,
	366, 367, -218, 122, -219, -50, 60, 60, -163, -32,
	-83, -84, -163, 9, 99, 59, 18, 59, -79, -80,
	-219, -24, 47, -171, 351, -32, -190, -191, -192, -192,
	-190, 385, 88, -80, -96, 11, -41, -46, -34, -35,
	-36, -37, -48, -68, -218, -46, 59, -195, -112, 193,
	25, -89, -114, 213, -93, 296, 295, -103, 306, -91,
	294, 246, 293, -183, 59, -102, 11, 11, 11, 11,
	-192, 211, 86, 211, -100, 19, 60, 60, -161, -161,
	58, -218, 60, 59, -177, -177, 60, 60, -163, -162,
	-56, 285, -205, -219, -219, -219, -219, -219, 59, -219,
	19, -219, 59, -219, 19, -218, -27, 343, -32, -46,
	-173, -147, -147, 351, 65, 16, 65, 65, 65, 65,
	364, 159, 366, 16, -219, 160, -76, 110, -163, -50,
	-163, -162, 60, -50, -162, 42, -32, -32, -78, -81,
	-29, 383, 385, -192, 88, 88, -81, -47, 29, -46,
	-46, -41, -220, 59, 11, 57, 33, 59, -42, -44,
	-43, -45, 46, 50, 52, 47, 48, 49, 53, -112,
	-34, -218, -111, 160, -110, 25, -108, 63, -193, -102,
	194, -117, 59, -89, 213, -90, -94, 297, 299, 89,
	122, -107, -102, 63, 31, 33, -212, 29, -191, -190,
	-191, -99, 191, -200, 204, 81, 60, 60, -161, -102,
	-164, 142, -163, -162, -56, -56, -56, -56, -56, -219,
	63, 58, 65, 65, 368, -108, 16, -219, -162, -163,
	-163, 43, -33, 11, -32, 88, -192, -85, 160, -46,
	-85, 57, -34, -46, -88, -92, -69, -35, -36, -36,
	-35, -36, 46, 46, 46, 51, 46, 51, 46, -43,
	-108, -219, -49, 54, 137, 55, -218, -110, 19, -93,
	-90, 59, 298, 300, 301, 56, 77, -32, -103, -131,
	-102, 88, 385, 385, 88, 211, 192, -201, 205, 204,
	-163, -163, 60, -219, -46, -162, -219, -219, -219, -219,
	-26, 99, 351, -149, 122, -208, -209, -32, -162, -50,
	-34, -54, 33, 38, -2, -218, -218, -50, -34, -50,
	-33, 59, 89, -39, -38, 56, 57, -40, 56, -38,
	46, 46, -197, 351, 133, 133, 133, -86, -102, -2,
	-94, -95, 302, 299, 305, 89, 88, 87, 87, -191,
	207, 206, -162, -162, 58, -219, 349, 53, 354, 60,
	-103, -219, -76, 59, -74, 13, -87, 56, -88, -64,
	-66, -65, -218, -2, -82, -102, -86, -76, -50, -50,
	-92, -32, -32, 58, -32, 58, -218, -218, -218, -219,
	59, 299, 303, 304, -32, 138, -190, 211, 385, -149,
	43, 350, 355, -219, -209, -75, 14, 16, 30, -87,
	59, -219, -219, -219, 59, 122, -219, -80, -76, -83,
	-196, -198, 374, 375, 376, 377, 378, 379, -83, -83,
	-83, -111, -102, 385, -191, 88, 60, 43, -32, -63,
	150, -66, 38, -2, -218, -102, -102, -80, 60, 60,
	59, -219, -219, -219, -49, 88, 88, 351, 9, -64,
	-2, 122, -198, -197, 138, 354, -88, -219, -102, 355,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 800, 1, 3,
	6, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 798, 412, 413, 414, 417, 0, 0, 801, 0,
	154, 198, 198, 198, 802, 0, 0, 0, 798, 0,
	798, 0, 0, 0, 0, 524, 807, 808, 798, 0,
	0, 418, 415, 416, 150, 0, 425, 0, 161, 327,
	323, 165, 166, 167, 168, 169, 310, 245, 273, 274,
	310, 297, 317, 310, 317, 280, 310, 317, 330, 330,
	330, 330, 330, 288, 289, 290, 291, 292, 293, 294,
	0, 0, 265, 310, 310, 310, 310, 310, 271, 272,
	299, 300, 301, 302, 303, 304, 305, 306, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 312,
	263, 312, 314, 314, 261, 262, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 152, 427, 0, 430, 155, 156, 157, 158, 159,
	160, 0, 419, 421, 0, 408, 0, 0, 0, 0,
	0, 0, 381, 382, 171, 0, 173, 0, 175, 0,
	177, 178, 0, 180, 182, 419, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 329, 325, 324, 244, 0,
	330, 310, 298, 330, 0, 330, 330, 281, 282, 333,
	0, 333, 333, 333, 333, 0, 0, 320, 320, 268,
	269, 270, 0, 256, 0, 312, 264, 258, 259, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	94, 0, 134, 0, 114, 110, 111, 112, 0, 109,
	0, 22, 525, 809, 810, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 0, 799, 147, 0, 0, 0,
	431, 433, 803, 804, 805, 806, 429, 0, 391, 0,
	0, 0, 422, 369, 0, 377, -2, 0, 409, 410,
	817, 975, 0, 0, 372, 374, 0, 408, 421, 172,
	0, 0, 0, 179, 181, 0, 185, 186, 817, 0,
	216, 0, 0, 199, 0, 202, -2, 205, 206, 207,
	240, 209, 210, 211, 0, 213, 310, 310, 236, 0,
	543, 544, 0, 0, 0, 0, -2, 214, 215, 328,
	164, 326, 0, 333, 330, 333, 0, 0, 333, 333,
	283, 334, 0, 0, 284, 285, 286, 287, 0, 308,
	0, 266, 0, 0, 267, 0, 0, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 798, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 421, 29, 148,
	0, 0, 432, 428, 0, 385, 310, 310, 0, 0,
	0, 0, 0, 408, 0, 0, 376, 0, 0, 534,
	817, 539, 541, 0, 0, 0, 585, 586, 587, 588,
	589, 590, 817, 817, 817, 817, 817, 817, 817, 617,
	618, 619, 620, 0, 622, -2, 731, 726, 733, 734,
	735, 736, 737, 738, 739, 0, 0, 779, 817, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 652, 662, 662, 662, 662, 662, 662,
	662, 0, 0, 0, 0, 0, 818, 370, 371, 373,
	375, 379, 408, 0, 422, 197, 174, 419, 176, 817,
	0, 0, 0, 217, 0, 0, 0, 0, 204, 0,
	208, 0, 232, 0, 234, 0, 0, -2, 817, 817,
	0, 311, 275, 333, 277, 318, 319, 278, 279, 335,
	331, 332, 330, 0, 330, 0, 0, 307, 0, 315,
	0, 0, 0, 0, 0, 383, 384, 310, 0, 0,
	0, -2, 747, 0, 437, 0, 0, -2, 0, 0,
	135, 136, 132, 115, 113, 490, 491, 0, 0, 97,
	0, 31, 32, 422, 421, 30, 426, 434, 435, 436,
	337, 0, 752, 389, 390, 388, 419, 398, 399, 0,
	0, 419, 420, 421, 408, 0, 817, 0, 0, 238,
	817, 817, 0, 976, 537, 817, 0, 0, 817, 817,
	817, 817, 817, 817, 817, 817, 817, 817, 817, 817,
	817, 817, 817, 0, 0, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 540, 0, 557, 0,
	0, 0, 0, 0, 608, 609, 610, 611, 612, 613,
	614, 621, 0, 730, 732, 0, 0, 36, 0, 583,
	817, 817, 817, 817, 817, 817, 817, 817, 447, 0,
	716, 0, 0, 0, 0, 0, 0, 654, 0, 655,
	656, 657, 658, 659, 660, 661, 707, 0, 709, 710,
	711, 712, 713, 714, 817, -2, 817, 817, 380, 0,
	0, 0, 0, 0, 817, 194, 0, 200, 0, 240,
	203, 241, 242, 327, 212, 233, 235, 237, 0, 817,
	0, 0, 453, 459, 455, 0, 0, 459, 0, 0,
	276, 333, 309, 333, 321, 322, 0, 0, 0, 0,
	0, 532, 975, 0, 0, 0, 755, 0, 0, 441,
	444, 439, 36, 0, 0, 138, 139, 140, 141, 142,
	0, 722, 0, 0, 0, 23, 99, 0, 0, 422,
	366, 338, 0, 340, 0, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 386, 387, 753,
	754, 392, 0, 400, 401, 393, 0, 0, 0, 0,
	0, 0, 337, 407, 0, 535, 536, 538, 560, 0,
	562, 564, 545, 817, 817, 817, 549, 579, 580, 581,
	0, 817, 817, 817, 577, 553, 0, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 605,
	0, 616, 310, 606, 673, 674, 0, 0, 726, 0,
	559, 603, 240, 0, 604, 615, 0, 727, 0, -2,
	729, 582, 817, 778, 36, 0, 0, 0, 0, -2,
	310, 678, 310, 314, 681, 682, 683, 310, 686, 688,
	689, 690, 691, 314, 693, 694, 695, 696, 697, 310,
	310, 700, 701, 310, 310, 704, 310, 310, 0, 0,
	0, 0, 817, 448, 724, 719, 817, 0, 0, 649,
	650, 651, 653, 663, 708, 0, 0, 452, 0, 0,
	0, 423, 817, 238, 187, 190, 191, 0, 218, 0,
	0, 243, 623, 0, 817, 464, 629, 456, 460, 0,
	462, 463, 0, 464, 464, -2, 295, 296, 313, 316,
	532, 0, 0, 530, 0, 0, 530, 337, 759, 817,
	817, 747, 38, 0, 442, 443, 447, 445, 446, 438,
	37, 0, 143, 0, 0, 817, 492, 19, 116, 0,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 747,
	437, 437, 437, 0, 437, 0, 0, 0, 70, 817,
	817, 790, 42, 43, 0, 0, -2, 99, 99, -2,
	99, 99, 0, 0, 0, 0, 0, 336, 0, 341,
	0, 0, 0, 344, 0, 359, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 337, 366, 239, 561, 563, 565, 546,
	547, 548, 550, 577, 554, 0, 551, 817, 817, 0,
	542, 558, 0, 0, 820, 240, 0, 584, -2, 630,
	631, 0, 0, 817, 675, 330, 679, 680, 684, 685,
	687, 692, 698, 699, 702, 703, 705, 706, 0, 817,
	817, 817, 817, 0, 747, 0, 720, 817, 0, 647,
	648, 664, 665, 666, 667, 0, 0, 0, 183, 0,
	0, 0, 196, 201, 624, 454, 625, 0, 461, 457,
	0, 626, 627, 0, 530, 0, 0, 337, 817, 0,
	532, 337, 13, 33, 0, 0, 756, 748, 749, 752,
	755, 36, 449, 440, -2, 145, 817, 133, 0, 723,
	0, 119, 0, 0, 755, 800, 0, 0, 58, -2,
	60, 0, 0, 823, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 65, 66, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 534, 132, 98, 100,
	-2, 101, 102, 103, 104, 105, 0, 0, 0, 0,
	0, 367, 0, 342, 347, 345, 348, 360, 361, 349,
	350, 351, 352, 353, 354, 355, 362, 363, 356, 357,
	364, 365, 419, 419, 0, 0, 337, 406, 366, 405,
	552, 817, 578, 555, 0, 727, 819, 0, 822, 728,
	0, 310, 0, 0, 676, 677, 0, 0, 0, 0,
	0, 0, 717, 646, 725, 817, 0, 424, 238, 0,
	0, 192, 193, 195, 0, 0, 0, 0, 0, 0,
	229, 0, 0, 0, 628, 337, 530, 337, 366, 531,
	0, 530, 366, 760, 0, 817, 817, 817, 751, 759,
	39, 817, 450, 17, 0, 144, 18, 0, 77, 117,
	0, 0, 120, 759, 0, 0, 0, 50, 0, 471,
	473, 474, 475, 505, 0, 507, 0, 0, 0, 64,
	506, 54, 0, 0, 783, 95, 96, 0, 0, 0,
	-2, 0, 794, 791, 0, 68, 71, 72, 73, 74,
	75, 0, 0, 0, 722, 0, 24, 811, 0, 0,
	0, 0, 339, 0, 394, 395, 0, 337, 366, 403,
	556, 607, 821, 632, 635, 633, 634, 636, 817, 638,
	817, 640, 817, 642, 817, 817, 0, 0, 721, 0,
	184, 188, 189, 0, 220, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 465, 0, 0, 458, 366, 337,
	10, 8, 533, 337, 12, 0, 757, 758, 750, 34,
	469, 817, 0, 78, 121, 118, 131, 52, 0, 523,
	-2, 0, 0, 0, 48, 49, 0, 0, 0, 0,
	0, 0, 512, 0, 0, 515, 0, 0, 0, 0,
	0, 0, 526, 0, 508, 0, 510, 511, 61, 505,
	0, 62, 0, 55, 0, 57, 84, 0, 0, 817,
	0, 333, 795, 796, 797, 793, 824, 0, 0, 0,
	0, 0, 0, 814, 812, 0, 337, 337, 0, 0,
	343, 0, 366, 404, 0, 0, 0, 0, 668, 645,
	718, 0, 219, 221, 230, 0, 817, 467, 7, 11,
	366, 761, 530, 0, 146, 20, 79, 0, 0, 522,
	530, 0, 530, 51, 469, 780, 0, 472, 501, 503,
	0, 498, 513, 514, 516, 0, 518, 0, 520, 521,
	476, 477, 478, 0, 0, 0, 0, 509, 0, 784,
	56, 0, 0, 87, 88, 785, 786, 787, 0, 789,
	69, 76, 0, 0, 82, 0, 133, 26, 0, 813,
	366, 366, 25, 368, 0, 402, 637, 639, 641, 643,
	0, 0, 0, 0, 0, 0, 744, 746, 9, 740,
	470, 772, 0, 0, -2, 0, 0, 747, 530, 47,
	530, 0, 817, 495, 502, 817, 0, 496, 817, 497,
	517, 519, 488, 0, 0, 0, 0, 0, 493, -2,
	85, 86, 0, 0, 92, 817, 0, 0, 0, 0,
	815, 816, 27, 28, 0, 644, 0, 0, 0, 397,
	231, 466, 0, 817, 742, 0, 40, 0, 772, 762,
	774, 776, 817, 36, 0, 768, 0, 755, 46, 747,
	781, 782, 499, 0, 504, 0, 0, 0, 0, 507,
	0, 89, 90, 91, 788, 80, 0, 0, 0, 0,
	669, 0, 672, 468, 745, 35, 817, 817, 0, 41,
	0, 777, -2, 0, 0, 0, 53, 45, 755, 0,
	0, 480, 482, 483, 484, 485, 486, 487, 0, 0,
	0, 526, 494, 0, 0, 21, 396, 670, 743, 741,
	0, 775, 0, -2, 0, 770, 769, 44, 500, 479,
	0, 527, 528, 529, 478, 0, 83, 0, 0, 765,
	36, 0, 481, 489, 81, 0, 773, -2, 771, 671,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 113, 105, 3,
	58, 60, 110, 108, 59, 109, 122, 111, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 385,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 386, 3, 387, 115, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 116,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 106, 107, 112, 114, 117,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:409
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:414
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:415
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:423
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:428
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:448
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:468
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:489
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:505
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:522
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:542
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:557
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:568
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:580
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:591
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:621
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:635
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:662
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:679
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:693
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:707
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:727
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:745
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:763
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:772
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:787
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:795
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:802
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:808
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:812
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:818
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:822
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:829
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:841
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:853
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:857
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:863
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:869
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:873
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:877
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:882
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:883
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:896
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:906
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:910
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:914
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:918
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:924
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:928
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:945
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:951
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:966
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:973
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:980
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:987
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1005
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1009
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1013
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1027
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1044
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1048
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1052
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1077
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1085
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1120
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1132
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.str = SessionStr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1152
		{
			yyVAL.str = GlobalStr
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1157
		{
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1158
		{
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1162
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1163
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1164
		{
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1165
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1166
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1167
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1168
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1219
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1223
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1261
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1273
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1282
		{
			yyVAL.empty = struct{}{}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.empty = struct{}{}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.bytes = nil
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1291
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1295
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1300
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1304
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1308
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1316
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1320
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1325
		{
			yyVAL.expr = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.expr = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1343
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1347
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1352
		{
			yyVAL.bytes = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1356
		{
			yyVAL.bytes = nil
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1375
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1379
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1384
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1388
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1392
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1400
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1404
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1415
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1420
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1426
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1443
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1456
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1461
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1466
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1471
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1477
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1482
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1487
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1492
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1497
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1502
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1507
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1512
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1517
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1526
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1536
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1541
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1546
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1553
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1560
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1568
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1573
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1578
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1583
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1589
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1595
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1601
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1608
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1614
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1620
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1624
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1628
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1632
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1636
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1642
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1646
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1650
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1654
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1658
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1662
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1666
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1670
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1674
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1686
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1702
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1707
		{
			yyVAL.sequence = &Sequence{}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1711
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1716
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1721
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1726
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1731
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1736
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1741
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1746
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1751
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1756
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1761
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1766
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1771
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1778
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1794
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1798
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1803
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1812
		{
			yyVAL.bytes = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2057
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2115
		{
			yyVAL.optVal = nil
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2154
		{
			yyVAL.optVal = nil
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2158
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2162
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2175
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2215
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2219
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2228
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2232
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2236
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2242
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2255
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2275
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2285
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2290
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2294
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2298
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2302
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2334
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2349
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2359
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2365
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2369
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.indexPartition = nil
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2389
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2407
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2423
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2427
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2459
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2499
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2504
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2511
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 394:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2518
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 395:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2525
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 396:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 397:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2556
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 402:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 403:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 404:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
			}
		}
	case 405:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2605
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 406:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2616
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2652
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2660
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2664
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2674
		{
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2675
		{
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2679
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2683
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2688
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2695
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2725
		{
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2726
		{
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2757
		{
			setAllowComments(yylex, true)
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2767
		{
			yyVAL.bytes2 = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2771
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.str = UnionStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.str = UnionAllStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.str = UnionDistinctStr
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2794
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2798
		{
			yyVAL.str = SQLCacheStr
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.str = ""
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.str = DistinctStr
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2812
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.str = StraightJoinHint
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.selectExprs = nil
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2831
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2866
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.overExpr = nil
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2899
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2903
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2913
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2923
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2936
		{
			yyVAL.strs = []string{}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2946
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2950
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2992
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3024
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3028
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.empty = struct{}{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3061
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.str = JoinStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.str = JoinStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.str = JoinStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3099
		{
			yyVAL.str = StraightJoinStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.str = LeftJoinStr
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.str = LeftJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.str = RightJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3117
		{
			yyVAL.str = RightJoinStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = NaturalJoinStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3127
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3156
		{
			yyVAL.indexHints = nil
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3164
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.expr = nil
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.columns = nil
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3208
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3222
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3226
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3232
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3236
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3246
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3262
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3266
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3270
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3278
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3282
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3290
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.str = IsNullStr
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.str = IsNotNullStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.str = IsTrueStr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.str = IsNotTrueStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3321
		{
			yyVAL.str = IsFalseStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.str = IsNotFalseStr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3331
		{
			yyVAL.str = EqualStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.str = LessThanStr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.str = GreaterThanStr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3343
		{
			yyVAL.str = LessEqualStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.str = GreaterEqualStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.str = NotEqualStr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.str = PosixRegexStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3367
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3371
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.expr = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3416
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3420
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3424
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3428
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3432
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3436
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3440
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3444
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3448
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3452
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3456
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3504
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3508
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3516
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3524
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3546
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3554
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3626
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 633:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 634:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 636:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 637:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 639:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3654
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 641:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 643:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 644:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 645:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3678
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3682
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3714
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3768
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3776
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.str = ""
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.str = BooleanModeStr
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 671:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.str = QueryExpansionStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3826
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.expr = nil
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3992
		{
			yyVAL.str = string("")
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4002
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4012
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.expr = nil
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4061
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4066
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.expr = &NullVal{}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.exprs = nil
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.expr = nil
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.orderBy = nil
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4139
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4143
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.str = AscScr
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.str = AscScr
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.str = DescScr
		}
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.limit = nil
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4184
		{
			yyVAL.str = ""
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.str = ForUpdateStr
		}
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.str = ShareModeStr
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4213
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4218
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4222
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 767:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4226
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4233
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4241
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 771:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4250
		{
			yyVAL.updateExprs = nil
		}
	case 773:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4254
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4270
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4280
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4286
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4296
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4300
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4306
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4316
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4322
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4326
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4330
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4351
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4358
		{
			yyVAL.bytes = []byte("charset")
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.expr = &Default{}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4383
		{
			yyVAL.str = ""
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4385
		{
			yyVAL.str = IgnoreStr
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4389
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4400
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4410
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4415
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4422
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4442
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4456
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 819:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4474
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4485
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4491
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4495
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4662
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4671
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
