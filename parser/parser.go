// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const SCHEMA = 57457
const TABLE = 57458
const INDEX = 57459
const MATERIALIZED = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const PRIMARY = 57465
const COLUMN = 57466
const CONSTRAINT = 57467
const REFERENCES = 57468
const SPATIAL = 57469
const FULLTEXT = 57470
const FOREIGN = 57471
const KEY_BLOCK_SIZE = 57472
const POLICY = 57473
const WHILE = 57474
const UNIQUE = 57475
const KEY = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const EXEC = 57485
const EXECUTE = 57486
const MAXVALUE = 57487
const PARTITION = 57488
const REORGANIZE = 57489
const LESS = 57490
const THAN = 57491
const PROCEDURE = 57492
const TRIGGER = 57493
const TYPE = 57494
const STATUS = 57495
const VARIABLES = 57496
const RESTRICT = 57497
const CASCADE = 57498
const NO = 57499
const ACTION = 57500
const PERMISSIVE = 57501
const RESTRICTIVE = 57502
const PUBLIC = 57503
const CURRENT_USER = 57504
const SESSION_USER = 57505
const PAD_INDEX = 57506
const FILLFACTOR = 57507
const IGNORE_DUP_KEY = 57508
const STATISTICS_NORECOMPUTE = 57509
const STATISTICS_INCREMENTAL = 57510
const ALLOW_ROW_LOCKS = 57511
const ALLOW_PAGE_LOCKS = 57512
const DISTANCE = 57513
const M = 57514
const EUCLIDEAN = 57515
const COSINE = 57516
const BEFORE = 57517
const AFTER = 57518
const EACH = 57519
const ROW = 57520
const SCROLL = 57521
const CURSOR = 57522
const OPEN = 57523
const CLOSE = 57524
const FETCH = 57525
const PRIOR = 57526
const FIRST = 57527
const LAST = 57528
const DEALLOCATE = 57529
const INSTEAD = 57530
const OF = 57531
const OUTPUT = 57532
const DEFERRABLE = 57533
const INITIALLY = 57534
const IMMEDIATE = 57535
const DEFERRED = 57536
const CONCURRENTLY = 57537
const SQL = 57538
const SECURITY = 57539
const BEGIN = 57540
const START = 57541
const TRANSACTION = 57542
const COMMIT = 57543
const ROLLBACK = 57544
const BIT = 57545
const TINYINT = 57546
const SMALLINT = 57547
const SMALLSERIAL = 57548
const MEDIUMINT = 57549
const INT = 57550
const INTEGER = 57551
const SERIAL = 57552
const BIGINT = 57553
const BIGSERIAL = 57554
const INTNUM = 57555
const REAL = 57556
const DOUBLE = 57557
const PRECISION = 57558
const FLOAT_TYPE = 57559
const DECIMAL = 57560
const NUMERIC = 57561
const SMALLMONEY = 57562
const MONEY = 57563
const TIME = 57564
const TIMESTAMP = 57565
const DATETIME = 57566
const YEAR = 57567
const DATETIMEOFFSET = 57568
const DATETIME2 = 57569
const SMALLDATETIME = 57570
const CHAR = 57571
const VARCHAR = 57572
const VARYING = 57573
const BOOL = 57574
const CHARACTER = 57575
const VARBINARY = 57576
const NCHAR = 57577
const NVARCHAR = 57578
const NTEXT = 57579
const UUID = 57580
const TEXT = 57581
const TINYTEXT = 57582
const MEDIUMTEXT = 57583
const LONGTEXT = 57584
const CITEXT = 57585
const BLOB = 57586
const TINYBLOB = 57587
const MEDIUMBLOB = 57588
const LONGBLOB = 57589
const JSON = 57590
const JSONB = 57591
const ENUM = 57592
const GEOMETRY = 57593
const POINT = 57594
const LINESTRING = 57595
const POLYGON = 57596
const GEOMETRYCOLLECTION = 57597
const MULTIPOINT = 57598
const MULTILINESTRING = 57599
const MULTIPOLYGON = 57600
const VECTOR = 57601
const VARIADIC = 57602
const ARRAY = 57603
const NOW = 57604
const GETDATE = 57605
const BPCHAR = 57606
const TEXT_PATTERN_OPS = 57607
const NULLX = 57608
const AUTO_INCREMENT = 57609
const APPROXNUM = 57610
const SIGNED = 57611
const UNSIGNED = 57612
const ZEROFILL = 57613
const ZONE = 57614
const AUTOINCREMENT = 57615
const DATABASES = 57616
const TABLES = 57617
const VSCHEMA_TABLES = 57618
const EXTENDED = 57619
const FULL = 57620
const PROCESSLIST = 57621
const NAMES = 57622
const CHARSET = 57623
const GLOBAL = 57624
const SESSION = 57625
const ISOLATION = 57626
const LEVEL = 57627
const READ = 57628
const WRITE = 57629
const ONLY = 57630
const REPEATABLE = 57631
const COMMITTED = 57632
const UNCOMMITTED = 57633
const SERIALIZABLE = 57634
const NEW = 57635
const CONCAT_NULL_YIELDS_NULL = 57636
const CURSOR_CLOSE_ON_COMMIT = 57637
const QUOTED_IDENTIFIER = 57638
const ARITHABORT = 57639
const FMTONLY = 57640
const NOCOUNT = 57641
const NOEXEC = 57642
const NUMERIC_ROUNDABORT = 57643
const ANSI_DEFAULTS = 57644
const ANSI_NULL_DFLT_OFF = 57645
const ANSI_NULL_DFLT_ON = 57646
const ANSI_NULLS = 57647
const ANSI_PADDING = 57648
const ANSI_WARNINGS = 57649
const FORCEPLAN = 57650
const SHOWPLAN_ALL = 57651
const SHOWPLAN_TEXT = 57652
const SHOWPLAN_XML = 57653
const IMPLICIT_TRANSACTIONS = 57654
const REMOTE_PROC_TRANSACTIONS = 57655
const XACT_ABORT = 57656
const CURRENT_TIMESTAMP = 57657
const DATABASE = 57658
const CURRENT_DATE = 57659
const CURRENT_TIME = 57660
const LOCALTIME = 57661
const LOCALTIMESTAMP = 57662
const UTC_DATE = 57663
const UTC_TIME = 57664
const UTC_TIMESTAMP = 57665
const REPLACE = 57666
const CONVERT = 57667
const CAST = 57668
const SUBSTR = 57669
const SUBSTRING = 57670
const GROUP_CONCAT = 57671
const SEPARATOR = 57672
const INHERIT = 57673
const LEAD = 57674
const LAG = 57675
const MATCH = 57676
const AGAINST = 57677
const BOOLEAN = 57678
const LANGUAGE = 57679
const WITH = 57680
const WITHOUT = 57681
const PARSER = 57682
const QUERY = 57683
const EXPANSION = 57684
const UNUSED = 57685
const VIRTUAL = 57686
const STORED = 57687
const GENERATED = 57688
const ALWAYS = 57689
const IDENTITY = 57690
const SEQUENCE = 57691
const INCREMENT = 57692
const MINVALUE = 57693
const CACHE = 57694
const CYCLE = 57695
const OWNED = 57696
const NONE = 57697
const CLUSTERED = 57698
const NONCLUSTERED = 57699
const REPLICATION = 57700
const COLUMNSTORE = 57701
const INCLUDE = 57702
const HOLDLOCK = 57703
const NOLOCK = 57704
const NOWAIT = 57705
const PAGLOCK = 57706
const ROWLOCK = 57707
const TABLOCK = 57708
const UPDLOCK = 57709
const READUNCOMMITTED = 57710
const DEFINER = 57711
const INVOKER = 57712
const TYPECAST = 57713
const CHECK = 57714
const OVER = 57715

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	134, 426,
	-2, 164,
	-1, 45,
	123, 827,
	-2, 822,
	-1, 260,
	123, 830,
	-2, 826,
	-1, 419,
	61, 396,
	-2, 393,
	-1, 449,
	123, 828,
	-2, 255,
	-1, 569,
	123, 828,
	-2, 255,
	-1, 590,
	278, 837,
	-2, 735,
	-1, 640,
	278, 837,
	-2, 466,
	-1, 674,
	5, 36,
	-2, 14,
	-1, 680,
	5, 36,
	-2, 16,
	-1, 822,
	278, 837,
	-2, 466,
	-1, 994,
	278, 837,
	-2, 325,
	-1, 1070,
	278, 837,
	-2, 466,
	-1, 1138,
	60, 106,
	-2, 213,
	-1, 1141,
	60, 106,
	-2, 213,
	-1, 1195,
	5, 37,
	-2, 601,
	-1, 1274,
	5, 36,
	-2, 15,
	-1, 1291,
	197, 63,
	-2, 522,
	-1, 1327,
	278, 837,
	-2, 145,
	-1, 1328,
	278, 837,
	-2, 145,
	-1, 1332,
	60, 106,
	-2, 184,
	-1, 1476,
	90, 824,
	-2, 812,
	-1, 1572,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1746,
	5, 36,
	-2, 783,
	-1, 1771,
	5, 36,
	-2, 59,
	-1, 1843,
	5, 37,
	-2, 784,
	-1, 1875,
	5, 36,
	-2, 786,
	-1, 1897,
	5, 37,
	-2, 787,
}

const yyPrivate = 57344

const yyLast = 9411

var yyAct = [...]int16{
	571, 1764, 552, 1852, 768, 1674, 1803, 1802, 1692, 581,
	1799, 1675, 31, 687, 1594, 1734, 1118, 1083, 41, 42,
	1257, 43, 1456, 1769, 1473, 1105, 1106, 1045, 1437, 1608,
	1103, 1756, 68, 68, 68, 1654, 131, 134, 135, 769,
	1445, 1607, 1592, 873, 1102, 1470, 1119, 1596, 1582, 1667,
	1455, 1099, 900, 1295, 482, 1467, 1292, 62, 1452, 1116,
	1263, 31, 1197, 1464, 1268, 930, 27, 888, 915, 1488,
	411, 970, 1149, 710, 1078, 542, 993, 213, 1357, 1188,
	1030, 845, 1331, 1042, 1461, 61, 256, 667, 668, 1348,
	631, 877, 1246, 1063, 550, 232, 197, 528, 69, 408,
	563, 943, 1027, 849, 48, 414, 247, 64, 63, 812,
	551, 140, 420, 446, 161, 448, 248, 454, 129, 130,
	180, 156, 471, 987, 1378, 52, 9, 741, 742, 743,
	744, 745, 738, 1247, 238, 749, 199, 151, 195, 1559,
	749, 535, 34, 153, 738, 804, 632, 749, 257, 68,
	1079, 536, 243, 244, 54, 716, 257, 421, 422, 1145,
	215, 216, 217, 218, 136, 618, 138, 1899, 415, 418,
	55, 56, 255, 831, 615, 444, 1832, 150, 1729, 1895,
	406, 1787, 434, 737, 736, 746, 747, 739, 740, 741,
	742, 743, 744, 745, 738, 1539, 465, 749, 739, 740,
	741, 742, 743, 744, 745, 738, 397, 1154, 749, 50,
	1153, 47, 158, 33, 1401, 1402, 1765, 237, 1050, 1051,
	1532, 241, 234, 245, 246, 494, 495, 1887, 1434, 1191,
	253, 1831, 1391, 1786, 1177, 400, 398, 502, 34, 403,
	32, 1525, 419, 57, 50, 1775, 47, 260, 1774, 399,
	198, 1776, 1825, 1826, 1824, 516, 1703, 1704, 462, 177,
	438, 1702, 1609, 677, 1610, 1132, 1122, 1121, 1508, 862,
	486, 487, 488, 489, 861, 473, 440, 1123, 201, 869,
	783, 214, 475, 203, 45, 477, 47, 480, 481, 1522,
	1124, 677, 1039, 1132, 1122, 1121, 458, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1123, 456, 206, 1385, 1376,
	459, 176, 461, 460, 659, 658, 230, 168, 1124, 167,
	501, 171, 172, 175, 505, 506, 227, 169, 177, 732,
	728, 1210, 735, 1712, 493, 1208, 1278, 555, 750, 751,
	752, 753, 754, 755, 756, 1562, 733, 734, 731, 757,
	758, 759, 760, 737, 736, 746, 747, 739, 740, 741,
	742, 743, 744, 745, 738, 515, 132, 749, 137, 490,
	38, 34, 1715, 1442, 530, 737, 736, 746, 747, 739,
	740, 741, 742, 743, 744, 745, 738, 1716, 726, 749,
	537, 1780, 1779, 202, 514, 252, 1117, 421, 422, 1513,
	728, 1538, 1602, 1540, 748, 257, 1129, 1713, 1277, 748,
	1623, 529, 1626, 1098, 1358, 1359, 748, 1134, 1135, 725,
	724, 921, 725, 724, 1117, 683, 684, 931, 1668, 525,
	1444, 1872, 617, 1730, 1129, 724, 1466, 726, 34, 1363,
	726, 1342, 725, 724, 549, 1134, 1135, 39, 465, 718,
	1395, 231, 726, 173, 695, 1125, 1126, 1128, 1377, 428,
	726, 1127, 717, 874, 437, 436, 748, 204, 431, 748,
	209, 696, 1282, 211, 1146, 1147, 429, 748, 427, 1321,
	832, 421, 422, 1125, 1126, 1128, 416, 895, 154, 1127,
	221, 222, 223, 224, 225, 534, 620, 214, 727, 527,
	1282, 698, 1148, 708, 670, 175, 1403, 708, 728, 1154,
	1531, 141, 674, 34, 680, 688, 713, 521, 257, 693,
	1646, 697, 133, 443, 1632, 257, 1396, 526, 689, 538,
	645, 157, 647, 1785, 1426, 650, 651, 616, 1064, 1625,
	1888, 529, 692, 614, 633, 1795, 1664, 727, 458, 701,
	727, 176, 1373, 621, 646, 619, 499, 496, 456, 1693,
	1695, 628, 727, 630, 1358, 1359, 170, 675, 177, 675,
	727, 53, 467, 466, 34, 1425, 1066, 737, 736, 746,
	747, 739, 740, 741, 742, 743, 744, 745, 738, 671,
	492, 749, 725, 724, 28, 725, 724, 685, 1133, 476,
	881, 725, 724, 530, 669, 508, 715, 1465, 1407, 675,
	726, 1543, 40, 726, 45, 423, 47, 916, 917, 726,
	1409, 897, 690, 520, 688, 767, 1133, 175, 691, 722,
	686, 522, 1768, 68, 679, 1767, 748, 829, 699, 1218,
	1322, 1323, 1324, 1694, 257, 1766, 176, 58, 1280, 719,
	677, 37, 1132, 1122, 1121, 711, 712, 714, 748, 728,
	784, 36, 1404, 177, 1123, 670, 866, 174, 856, 725,
	724, 1597, 35, 688, 529, 51, 1441, 1124, 725, 724,
	848, 523, 402, 879, 142, 143, 871, 726, 6, 7,
	840, 827, 44, 725, 724, 894, 726, 144, 1892, 896,
	1846, 857, 1732, 817, 772, 773, 529, 50, 1612, 1599,
	1413, 726, 818, 653, 1202, 1067, 1201, 787, 617, 786,
	727, 643, 529, 727, 847, 853, 855, 517, 825, 727,
	149, 147, 1424, 858, 1566, 860, 725, 724, 675, 1777,
	456, 944, 1567, 835, 806, 807, 808, 809, 810, 811,
	1754, 867, 865, 1611, 726, 484, 483, 1031, 1168, 1240,
	1227, 1100, 872, 1167, 880, 669, 975, 1166, 974, 1165,
	830, 1164, 654, 984, 984, 981, 1163, 1162, 725, 724,
	1161, 918, 986, 1117, 1160, 1159, 922, 257, 257, 725,
	724, 1157, 1393, 1129, 1031, 923, 726, 727, 891, 975,
	919, 1032, 413, 914, 1134, 1135, 727, 726, 152, 1595,
	928, 988, 989, 1405, 1406, 1408, 1410, 1411, 950, 146,
	413, 727, 207, 924, 675, 413, 433, 1046, 920, 1349,
	675, 925, 948, 949, 947, 675, 1273, 417, 1533, 425,
	426, 412, 1125, 1126, 1128, 1645, 767, 969, 1127, 1349,
	1350, 1065, 1480, 635, 637, 1065, 818, 966, 968, 1282,
	748, 935, 937, 938, 727, 1644, 413, 982, 985, 936,
	1350, 670, 990, 991, 1178, 1179, 1180, 424, 1026, 677,
	432, 479, 1046, 622, 763, 478, 260, 1534, 946, 1537,
	1101, 1536, 1535, 843, 1138, 1360, 1024, 1025, 474, 1351,
	210, 1347, 634, 212, 1041, 1040, 727, 1043, 1044, 1097,
	640, 641, 642, 1071, 728, 1072, 842, 727, 474, 34,
	1054, 474, 864, 706, 709, 863, 627, 529, 1451, 500,
	1058, 424, 498, 497, 50, 1087, 47, 1056, 746, 747,
	739, 740, 741, 742, 743, 744, 745, 738, 1597, 1616,
	749, 1151, 678, 470, 678, 1570, 1642, 944, 1080, 737,
	736, 746, 747, 739, 740, 741, 742, 743, 744, 745,
	738, 669, 424, 749, 1198, 50, 1137, 47, 50, 34,
	47, 1615, 720, 33, 50, 1133, 1599, 50, 785, 47,
	762, 764, 765, 766, 770, 45, 50, 47, 47, 1158,
	859, 775, 775, 775, 775, 775, 775, 775, 34, 50,
	32, 1599, 971, 424, 972, 1173, 640, 34, 785, 1066,
	677, 491, 439, 889, 728, 728, 874, 788, 789, 790,
	791, 792, 793, 794, 795, 1838, 798, 1576, 800, 801,
	802, 803, 805, 805, 805, 805, 805, 805, 805, 1184,
	821, 822, 823, 824, 424, 1142, 1155, 34, 973, 33,
	1882, 1881, 889, 1880, 706, 1065, 652, 30, 257, 945,
	1792, 728, 424, 677, 784, 34, 613, 670, 529, 854,
	1236, 1867, 1143, 1577, 34, 1575, 1141, 1823, 728, 1845,
	728, 1258, 988, 1271, 1207, 723, 1236, 1788, 705, 1719,
	1744, 1274, 1261, 612, 1211, 1745, 1579, 728, 705, 1628,
	1226, 1224, 611, 1140, 1238, 640, 159, 705, 1627, 889,
	1550, 705, 1504, 678, 1291, 424, 1317, 1318, 1319, 610,
	1270, 1327, 1139, 1281, 1236, 1503, 1500, 1499, 1579, 1332,
	1138, 1138, 1332, 1138, 1138, 529, 529, 539, 675, 1283,
	1254, 1343, 1253, 430, 1250, 1346, 675, 1671, 1248, 1575,
	1284, 1251, 1252, 1245, 1255, 1416, 1256, 260, 705, 1494,
	705, 1493, 1046, 529, 1330, 775, 775, 669, 775, 775,
	775, 775, 775, 775, 775, 775, 775, 775, 775, 775,
	775, 775, 775, 1286, 1272, 705, 1417, 705, 1368, 1366,
	1059, 728, 1236, 1235, 1260, 1325, 1345, 705, 1175, 678,
	1243, 579, 1287, 1288, 1289, 770, 1293, 705, 1082, 748,
	770, 1329, 1333, 1334, 1335, 1336, 1337, 129, 889, 1081,
	46, 49, 1242, 1338, 1339, 979, 728, 1397, 889, 1049,
	1369, 1075, 748, 1364, 1365, 705, 929, 1362, 677, 1371,
	1655, 1352, 1353, 1354, 1355, 1356, 705, 704, 663, 662,
	688, 1367, 656, 657, 49, 1372, 656, 655, 1392, 1655,
	49, 1578, 1047, 1420, 1382, 1415, 60, 59, 1380, 1800,
	1874, 874, 1753, 1384, 1276, 945, 1236, 1136, 1429, 1379,
	513, 1222, 1220, 1074, 257, 1386, 1073, 1579, 1753, 1753,
	424, 1070, 1443, 1447, 1055, 868, 844, 837, 834, 1438,
	660, 1439, 1448, 1446, 1281, 890, 649, 1059, 424, 648,
	1088, 1481, 1436, 644, 1841, 1059, 512, 1440, 677, 513,
	979, 1579, 1454, 1332, 1236, 1421, 1701, 1604, 1428, 1221,
	1219, 529, 529, 1462, 49, 1427, 1059, 1203, 49, 513,
	49, 49, 889, 705, 1450, 833, 1486, 49, 661, 261,
	1818, 261, 49, 665, 664, 1816, 49, 1489, 1489, 1783,
	518, 1520, 728, 1453, 1643, 1584, 1587, 1588, 1589, 1585,
	424, 1586, 1590, 203, 1479, 775, 775, 775, 1204, 1205,
	1497, 1206, 775, 775, 775, 775, 1209, 1491, 1490, 1757,
	1758, 1800, 1341, 49, 1340, 1259, 233, 468, 1212, 1213,
	1172, 1171, 1214, 1215, 257, 1216, 1217, 737, 736, 746,
	747, 739, 740, 741, 742, 743, 744, 745, 738, 1495,
	1496, 749, 1144, 1070, 1077, 1501, 1502, 1547, 692, 775,
	1076, 1509, 1551, 1506, 1053, 926, 893, 49, 870, 826,
	721, 49, 49, 673, 672, 639, 1544, 638, 636, 623,
	540, 503, 228, 1601, 1528, 68, 445, 1281, 1561, 257,
	441, 1281, 1439, 1529, 1530, 410, 1614, 226, 1568, 220,
	1438, 1527, 235, 236, 1553, 544, 219, 208, 11, 1565,
	1557, 1549, 1556, 1150, 1760, 1552, 1239, 666, 529, 1630,
	504, 240, 239, 541, 1564, 145, 1686, 139, 1684, 1763,
	1573, 1687, 1432, 1685, 1762, 1558, 1620, 1683, 1438, 1600,
	675, 624, 1603, 1591, 1605, 1688, 1682, 1588, 1589, 1868,
	1190, 1092, 1093, 678, 1618, 1571, 1572, 1830, 1653, 799,
	409, 678, 1617, 1622, 485, 626, 1839, 1619, 916, 917,
	401, 1176, 1264, 1631, 254, 737, 736, 746, 747, 739,
	740, 741, 742, 743, 744, 745, 738, 1265, 677, 749,
	1132, 1122, 1121, 1466, 1096, 1328, 625, 1089, 1634, 975,
	1090, 1676, 1123, 1660, 511, 883, 1629, 884, 885, 886,
	509, 1658, 1448, 507, 148, 1124, 1281, 1028, 981, 1561,
	882, 1698, 1492, 1678, 1679, 257, 1681, 1661, 1033, 887,
	682, 533, 1084, 257, 1663, 1837, 1648, 1672, 1541, 1650,
	1046, 1085, 1670, 729, 874, 1836, 1794, 1459, 1258, 771,
	1677, 1485, 1484, 1680, 775, 775, 1483, 1708, 1482, 1689,
	249, 250, 251, 1170, 1046, 1697, 1889, 1710, 1700, 1423,
	1699, 1561, 1169, 675, 435, 1669, 1400, 1399, 876, 468,
	1673, 532, 531, 878, 775, 775, 775, 775, 1709, 1574,
	797, 1731, 1746, 694, 892, 1737, 34, 572, 983, 570,
	574, 575, 576, 577, 8, 1, 1294, 573, 578, 13,
	1439, 1749, 1412, 1751, 12, 1733, 1658, 1770, 1738, 242,
	748, 1117, 828, 1771, 1262, 1196, 1722, 782, 567, 1714,
	1752, 1129, 1761, 1624, 1750, 468, 49, 1721, 553, 1851,
	850, 1463, 1134, 1135, 49, 1736, 1290, 675, 1320, 1361,
	841, 1772, 469, 257, 1460, 182, 1241, 442, 1741, 15,
	1742, 1778, 1433, 1438, 1275, 975, 681, 1676, 1808, 1770,
	1801, 510, 1806, 1344, 975, 1804, 1676, 1789, 675, 1447,
	1125, 1126, 1128, 898, 707, 1813, 1127, 1448, 1448, 1446,
	165, 1811, 1809, 1812, 155, 1204, 700, 1791, 404, 29,
	10, 1156, 1797, 1798, 1046, 1796, 166, 164, 1498, 163,
	1781, 1782, 162, 1810, 160, 472, 200, 1370, 1459, 205,
	927, 229, 67, 65, 932, 933, 66, 675, 1834, 1561,
	70, 1829, 1840, 1468, 1613, 519, 1062, 688, 775, 761,
	688, 688, 688, 1773, 1865, 1475, 1807, 1281, 1848, 1267,
	1850, 1835, 1793, 1861, 1862, 1863, 1523, 1864, 748, 1225,
	796, 1029, 554, 934, 566, 565, 1877, 1878, 1873, 1875,
	771, 1804, 852, 852, 852, 771, 1849, 564, 1743, 1658,
	730, 1458, 976, 977, 978, 980, 1569, 1879, 1583, 1439,
	992, 1023, 1581, 1886, 1580, 1759, 468, 1870, 49, 1418,
	1755, 1891, 1890, 1422, 1804, 1457, 1893, 1524, 1894, 1728,
	975, 49, 1676, 1898, 1091, 1896, 1034, 1035, 1036, 1037,
	1431, 1038, 1130, 1133, 675, 1593, 1120, 875, 1094, 5,
	1131, 1052, 1459, 1115, 4, 3, 1114, 1459, 1459, 1459,
	1459, 1459, 1113, 1112, 1048, 1110, 1111, 1108, 1109, 1107,
	1086, 1459, 1516, 728, 676, 2, 675, 0, 0, 0,
	0, 1057, 0, 1060, 1061, 0, 0, 0, 0, 1068,
	0, 1069, 0, 1828, 0, 0, 0, 0, 775, 0,
	0, 775, 0, 775, 0, 775, 0, 775, 775, 0,
	0, 0, 0, 0, 0, 1095, 0, 46, 737, 736,
	746, 747, 739, 740, 741, 742, 743, 744, 745, 738,
	1505, 0, 749, 1459, 0, 0, 0, 0, 261, 0,
	852, 852, 0, 0, 852, 852, 852, 0, 0, 1459,
	46, 1584, 1587, 1588, 1589, 1585, 0, 1586, 1590, 1460,
	26, 1757, 1758, 1174, 1460, 1460, 1460, 1460, 1460, 0,
	0, 0, 0, 852, 852, 852, 852, 1546, 1593, 1548,
	1696, 0, 774, 776, 777, 778, 779, 780, 781, 0,
	0, 836, 450, 451, 452, 0, 0, 0, 852, 1194,
	455, 453, 463, 464, 0, 0, 0, 0, 0, 1192,
	1193, 0, 0, 0, 21, 0, 16, 1195, 0, 0,
	0, 0, 468, 0, 0, 0, 1199, 1200, 0, 17,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 677, 0, 1132, 1122, 1121, 0, 18,
	19, 1228, 1747, 1748, 0, 0, 1460, 1123, 0, 0,
	0, 0, 1223, 0, 0, 0, 1633, 1237, 1229, 0,
	1124, 0, 0, 0, 0, 0, 1231, 1232, 0, 1233,
	1234, 0, 0, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1269, 0, 0, 0, 1651,
	0, 0, 0, 1652, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 0, 1711, 0, 0, 0, 0,
	1805, 0, 678, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1819, 1820, 1821, 0, 0, 939, 14, 0, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 0, 0, 1117, 0, 0, 852,
	0, 0, 0, 0, 0, 1230, 1129, 0, 0, 1717,
	1718, 0, 0, 0, 0, 0, 0, 1134, 1135, 0,
	677, 748, 1132, 1122, 1121, 0, 0, 457, 462, 0,
	0, 852, 0, 0, 1123, 0, 0, 0, 0, 261,
	0, 0, 852, 1383, 0, 0, 1805, 1124, 468, 1876,
	0, 0, 0, 0, 0, 1125, 1126, 1128, 0, 0,
	0, 1127, 20, 0, 0, 0, 0, 1394, 0, 0,
	0, 0, 0, 0, 22, 23, 0, 25, 0, 1805,
	459, 678, 461, 460, 94, 0, 0, 33, 0, 0,
	0, 0, 0, 1398, 0, 0, 0, 0, 1419, 0,
	0, 0, 1666, 0, 0, 0, 0, 0, 49, 1414,
	1143, 0, 34, 0, 1141, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1430, 0, 737,
	736, 746, 747, 739, 740, 741, 742, 743, 744, 745,
	738, 1140, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 0, 0, 0, 0, 0,
	1139, 0, 0, 1129, 0, 0, 0, 771, 771, 0,
	0, 79, 0, 0, 1134, 1135, 0, 0, 0, 0,
	1189, 0, 0, 0, 0, 0, 1181, 1182, 1183, 0,
	0, 0, 0, 0, 1185, 1186, 1187, 677, 1133, 1132,
	1122, 1121, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 1123, 1125, 1126, 1128, 0, 0, 0, 1127, 0,
	0, 0, 0, 0, 1124, 0, 0, 677, 0, 1132,
	1122, 1121, 0, 0, 0, 1526, 1510, 0, 1511, 1512,
	774, 1123, 1514, 1515, 1517, 1519, 1521, 0, 1665, 0,
	0, 0, 0, 0, 1124, 0, 0, 0, 0, 0,
	49, 49, 0, 0, 0, 1554, 1555, 1269, 1542, 0,
	0, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 0, 122, 123, 0, 124, 125, 126, 128, 127,
	96, 97, 98, 102, 100, 99, 101, 73, 75, 0,
	71, 74, 80, 76, 77, 78, 92, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 93, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 192, 677,
	1117, 1132, 1122, 1121, 195, 196, 0, 0, 0, 0,
	1129, 0, 0, 1123, 0, 0, 1621, 0, 0, 0,
	901, 1134, 1135, 0, 913, 1133, 1124, 0, 0, 183,
	1117, 0, 0, 0, 903, 0, 0, 0, 49, 0,
	1129, 0, 0, 0, 190, 1326, 178, 0, 0, 0,
	1641, 1134, 1135, 0, 179, 0, 0, 0, 0, 1125,
	1126, 1128, 0, 0, 0, 1127, 0, 0, 0, 1656,
	1649, 0, 0, 852, 72, 1665, 1282, 0, 0, 0,
	0, 1518, 748, 0, 0, 0, 0, 0, 0, 1125,
	1126, 1128, 49, 49, 0, 1127, 0, 0, 0, 0,
	0, 0, 49, 1598, 0, 1374, 1375, 0, 0, 0,
	902, 0, 0, 186, 0, 181, 191, 0, 1691, 0,
	0, 1707, 728, 188, 187, 0, 0, 0, 0, 0,
	0, 0, 1117, 0, 0, 1387, 1388, 1389, 1390, 0,
	0, 0, 1129, 0, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 1134, 1135, 0, 1720, 0, 1735, 0,
	0, 1723, 1724, 1725, 1726, 1727, 0, 737, 736, 746,
	747, 739, 740, 741, 742, 743, 744, 745, 738, 0,
	0, 749, 0, 1647, 0, 0, 0, 0, 0, 0,
	0, 1125, 1126, 1128, 0, 0, 901, 1127, 0, 0,
	913, 0, 1133, 0, 0, 0, 0, 0, 1282, 0,
	903, 0, 49, 0, 0, 0, 49, 49, 0, 0,
	46, 49, 49, 49, 49, 49, 0, 0, 0, 0,
	0, 0, 1133, 1690, 0, 49, 0, 0, 0, 1598,
	736, 746, 747, 739, 740, 741, 742, 743, 744, 745,
	738, 0, 1659, 749, 1784, 0, 0, 184, 0, 1790,
	0, 0, 0, 185, 1814, 0, 0, 1815, 0, 0,
	1817, 813, 0, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 1560, 0, 0, 0, 902, 1827, 0, 1507,
	0, 0, 0, 0, 0, 1822, 0, 49, 0, 0,
	0, 0, 1735, 0, 0, 0, 815, 0, 0, 0,
	0, 0, 0, 49, 0, 771, 0, 1833, 899, 0,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 0,
	0, 1842, 1843, 1844, 1133, 1847, 193, 0, 194, 0,
	0, 0, 0, 0, 0, 0, 1869, 771, 0, 0,
	737, 736, 746, 747, 739, 740, 741, 742, 743, 744,
	745, 738, 189, 0, 749, 0, 0, 0, 0, 0,
	0, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 0, 0, 0, 1280, 0, 46, 1883, 1884, 1885,
	0, 0, 816, 0, 0, 46, 0, 0, 0, 0,
	71, 814, 0, 0, 0, 0, 820, 819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1635,
	0, 0, 1636, 0, 1637, 0, 1638, 0, 1639, 1640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1598, 0, 0, 382, 369, 0,
	327, 384, 295, 315, 393, 317, 318, 354, 273, 337,
	0, 312, 292, 0, 0, 0, 298, 266, 307, 267,
	296, 329, 0, 293, 1152, 371, 340, 0, 0, 0,
	391, 0, 345, 0, 72, 0, 0, 0, 332, 373,
	335, 364, 326, 355, 282, 344, 386, 313, 350, 387,
	0, 0, 748, 34, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 349, 380, 309, 279, 396,
	0, 353, 265, 347, 0, 0, 271, 274, 392, 378,
	303, 302, 0, 0, 0, 0, 0, 0, 0, 331,
	336, 361, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 343, 1326, 0,
	1326, 278, 272, 0, 328, 813, 0, 0, 281, 0,
	300, 362, 0, 262, 367, 375, 325, 0, 0, 379,
	322, 321, 0, 0, 0, 0, 0, 0, 314, 259,
	358, 394, 383, 333, 372, 297, 308, 0, 304, 0,
	815, 0, 305, 306, 342, 356, 0, 0, 0, 0,
	0, 381, 374, 748, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 263, 301, 365, 368, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 0, 122, 123, 0, 124,
	125, 126, 128, 127, 0, 967, 816, 0, 0, 0,
	0, 0, 1477, 0, 71, 814, 0, 0, 0, 0,
	820, 819, 0, 0, 0, 0, 629, 0, 0, 45,
	0, 449, 450, 451, 452, 0, 0, 0, 0, 0,
	455, 453, 463, 464, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 376, 0, 0, 0, 0, 1478,
	1476, 1472, 1471, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 283, 284, 338, 339,
	388, 389, 390, 363, 280, 0, 287, 288, 0, 370,
	0, 0, 0, 341, 0, 0, 0, 395, 72, 0,
	0, 0, 0, 0, 0, 316, 264, 320, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 0, 324,
	319, 346, 348, 357, 366, 377, 385, 360, 294, 330,
	382, 369, 0, 327, 384, 295, 315, 393, 317, 318,
	354, 273, 337, 0, 312, 292, 0, 0, 0, 298,
	266, 307, 267, 296, 329, 0, 293, 0, 371, 340,
	0, 0, 0, 391, 0, 345, 0, 0, 0, 0,
	0, 332, 373, 335, 364, 326, 355, 282, 344, 386,
	313, 350, 387, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 380,
	309, 279, 396, 0, 353, 265, 347, 0, 0, 271,
	274, 392, 378, 303, 302, 0, 0, 0, 0, 0,
	0, 0, 331, 336, 361, 323, 0, 457, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 0,
	343, 0, 0, 0, 278, 272, 0, 328, 0, 0,
	0, 281, 0, 300, 362, 0, 262, 367, 375, 325,
	0, 0, 379, 322, 321, 0, 0, 0, 0, 0,
	0, 314, 259, 358, 394, 383, 333, 372, 297, 308,
	459, 304, 461, 460, 0, 305, 306, 342, 356, 0,
	0, 0, 0, 0, 381, 374, 0, 467, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	365, 368, 286, 352, 275, 310, 359, 311, 334, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1606, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 447,
	0, 0, 45, 0, 449, 450, 451, 452, 0, 0,
	0, 0, 0, 455, 453, 463, 464, 0, 0, 268,
	0, 0, 0, 0, 0, 269, 290, 376, 0, 0,
	0, 0, 1478, 1476, 677, 0, 1132, 1122, 1121, 0,
	351, 0, 0, 0, 0, 1474, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1124, 0, 0, 0, 0, 0, 285, 289, 283,
	284, 338, 339, 388, 389, 390, 363, 280, 0, 287,
	288, 0, 370, 0, 0, 0, 341, 0, 0, 0,
	395, 0, 0, 0, 0, 0, 0, 0, 316, 264,
	320, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	0, 0, 324, 319, 346, 348, 357, 366, 377, 385,
	360, 294, 330, 382, 369, 0, 327, 384, 295, 315,
	393, 317, 318, 354, 273, 337, 0, 312, 292, 0,
	0, 0, 298, 266, 307, 267, 296, 329, 0, 293,
	0, 371, 340, 0, 0, 0, 391, 0, 345, 0,
	0, 0, 0, 0, 332, 373, 335, 364, 326, 355,
	282, 344, 386, 313, 350, 387, 0, 1129, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 1135,
	0, 349, 380, 309, 279, 396, 0, 353, 265, 347,
	0, 0, 271, 274, 392, 378, 303, 302, 0, 0,
	0, 0, 0, 0, 0, 331, 336, 361, 323, 0,
	457, 462, 0, 0, 0, 1381, 1125, 1126, 1128, 0,
	0, 299, 1127, 343, 0, 0, 0, 278, 272, 0,
	328, 0, 0, 1449, 281, 0, 300, 362, 0, 262,
	367, 375, 325, 0, 0, 379, 322, 321, 0, 0,
	996, 0, 0, 0, 314, 259, 358, 394, 383, 333,
	372, 297, 308, 459, 304, 461, 460, 0, 305, 306,
	342, 356, 0, 0, 0, 0, 0, 381, 374, 0,
	467, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 263, 301, 365, 368, 286, 352, 275, 310, 359,
	311, 334, 291, 0, 0, 1005, 1011, 1009, 0, 0,
	1006, 0, 0, 1004, 0, 0, 1013, 0, 0, 1012,
	998, 1008, 1010, 1007, 1002, 0, 997, 0, 1015, 1014,
	1016, 995, 1018, 0, 0, 0, 1022, 1019, 1021, 1020,
	0, 1017, 0, 0, 0, 0, 0, 0, 1477, 1133,
	999, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1001, 1003, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 269, 290,
	376, 0, 0, 0, 0, 1478, 1476, 0, 0, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 289, 283, 284, 338, 339, 388, 389, 390, 363,
	280, 0, 287, 288, 0, 370, 0, 0, 0, 341,
	0, 0, 0, 395, 0, 0, 0, 0, 0, 0,
	0, 316, 264, 320, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 0, 0, 324, 319, 346, 348, 357,
	366, 377, 385, 360, 294, 330, 382, 369, 0, 327,
	384, 295, 315, 393, 317, 318, 354, 273, 337, 0,
	312, 292, 0, 0, 0, 298, 266, 307, 267, 296,
	329, 0, 293, 0, 371, 340, 0, 94, 0, 391,
	0, 345, 0, 0, 0, 0, 0, 332, 373, 335,
	364, 326, 355, 282, 344, 386, 313, 350, 387, 0,
	0, 0, 45, 0, 47, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 349, 380, 309, 279, 396, 0,
	353, 265, 347, 0, 0, 271, 274, 392, 378, 303,
	302, 0, 0, 0, 0, 0, 0, 0, 331, 336,
	361, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1249, 0, 299, 0, 343, 0, 0, 0,
	278, 272, 0, 328, 79, 0, 0, 281, 0, 300,
	362, 0, 262, 367, 375, 325, 0, 0, 379, 322,
	321, 0, 0, 0, 0, 0, 0, 314, 259, 358,
	394, 383, 333, 372, 297, 308, 0, 304, 0, 95,
	0, 305, 306, 342, 356, 0, 0, 0, 0, 0,
	381, 374, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 263, 301, 365, 368, 286, 352,
	275, 310, 359, 311, 334, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 0, 122, 123, 0, 124, 125,
	126, 128, 127, 96, 97, 98, 102, 100, 99, 101,
	73, 75, 0, 71, 74, 80, 76, 77, 78, 92,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 93, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 0, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 269, 290, 376, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 289, 283, 284, 338, 339, 388,
	389, 390, 363, 280, 0, 287, 288, 0, 370, 0,
	0, 0, 341, 0, 0, 0, 395, 72, 0, 0,
	0, 0, 0, 0, 316, 264, 320, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 0, 0, 324, 319,
	346, 348, 357, 366, 377, 385, 360, 294, 330, 382,
	369, 0, 327, 384, 295, 315, 393, 317, 318, 354,
	273, 337, 0, 312, 292, 0, 0, 0, 298, 266,
	307, 267, 296, 329, 0, 293, 0, 371, 340, 0,
	0, 0, 391, 0, 345, 0, 0, 0, 0, 0,
	332, 373, 335, 364, 326, 355, 282, 344, 386, 313,
	350, 387, 0, 0, 0, 34, 0, 702, 0, 703,
	0, 0, 0, 0, 0, 0, 0, 349, 380, 309,
	279, 396, 0, 353, 265, 347, 0, 0, 271, 274,
	392, 378, 303, 302, 0, 0, 0, 0, 0, 0,
	0, 331, 336, 361, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 343,
	0, 0, 0, 278, 272, 0, 328, 0, 0, 0,
	281, 0, 300, 362, 0, 262, 367, 375, 325, 0,
	0, 379, 322, 321, 0, 0, 0, 0, 0, 0,
	314, 259, 358, 394, 383, 333, 372, 297, 308, 0,
	304, 0, 0, 0, 305, 306, 342, 356, 677, 0,
	1132, 1122, 1121, 381, 374, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1124, 270, 263, 301, 365,
	368, 286, 352, 275, 310, 359, 311, 334, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1739, 1740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 376, 0, 0, 0,
	0, 1117, 258, 0, 0, 0, 0, 0, 0, 351,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1134, 1135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	338, 339, 388, 389, 390, 363, 280, 0, 287, 288,
	0, 370, 0, 0, 0, 341, 0, 0, 0, 395,
	1125, 1126, 1128, 0, 0, 0, 1127, 316, 264, 320,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 0,
	0, 324, 319, 346, 348, 357, 366, 377, 385, 360,
	294, 330, 382, 369, 0, 327, 384, 295, 315, 393,
	317, 318, 354, 273, 337, 0, 312, 292, 0, 0,
	0, 298, 266, 307, 267, 296, 329, 0, 293, 0,
	371, 340, 0, 0, 0, 391, 0, 345, 0, 0,
	0, 0, 0, 332, 373, 335, 364, 326, 355, 282,
	344, 386, 313, 350, 387, 0, 405, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	349, 380, 309, 279, 396, 0, 353, 265, 347, 0,
	0, 271, 274, 392, 378, 303, 302, 0, 0, 0,
	0, 0, 0, 0, 331, 336, 361, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 343, 1133, 0, 0, 278, 272, 0, 328,
	0, 0, 0, 281, 0, 300, 362, 0, 262, 367,
	375, 325, 0, 0, 379, 322, 321, 0, 0, 0,
	0, 0, 0, 314, 259, 358, 394, 383, 333, 372,
	297, 308, 0, 304, 0, 0, 0, 305, 306, 342,
	356, 677, 0, 1132, 1122, 1121, 381, 374, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 270,
	263, 301, 365, 368, 286, 352, 275, 310, 359, 311,
	334, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 0, 0, 0, 0, 269, 290, 376,
	0, 0, 0, 0, 1117, 258, 0, 0, 0, 0,
	0, 0, 351, 0, 1129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1134, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 283, 284, 338, 339, 388, 389, 390, 363, 280,
	0, 287, 288, 0, 370, 0, 0, 0, 341, 0,
	0, 0, 395, 1125, 1126, 1128, 0, 0, 0, 1127,
	316, 264, 320, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 0, 0, 324, 319, 346, 348, 357, 366,
	377, 385, 360, 294, 330, 382, 369, 0, 327, 384,
	295, 315, 393, 317, 318, 354, 273, 337, 0, 312,
	292, 0, 0, 0, 298, 266, 307, 267, 296, 329,
	0, 293, 0, 371, 340, 0, 0, 0, 391, 0,
	345, 0, 0, 0, 0, 0, 332, 373, 335, 364,
	326, 355, 282, 344, 386, 313, 350, 387, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 380, 309, 279, 396, 0, 353,
	265, 347, 0, 0, 271, 274, 392, 378, 303, 302,
	0, 0, 0, 0, 0, 0, 0, 331, 336, 361,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1545, 0, 299, 0, 343, 1133, 0, 0, 278,
	272, 0, 328, 0, 0, 0, 281, 0, 300, 362,
	0, 262, 367, 375, 325, 0, 0, 379, 322, 321,
	0, 0, 0, 0, 0, 0, 314, 259, 358, 394,
	383, 333, 372, 297, 308, 0, 304, 0, 0, 0,
	305, 306, 342, 356, 677, 0, 1132, 1122, 1121, 381,
	374, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1124, 270, 263, 301, 365, 368, 286, 352, 275,
	310, 359, 311, 334, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 0, 0, 0, 0,
	269, 290, 376, 0, 0, 0, 0, 1117, 258, 0,
	0, 0, 0, 0, 0, 351, 0, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 1135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 283, 284, 338, 339, 388, 389,
	390, 363, 280, 0, 287, 288, 0, 370, 0, 0,
	0, 341, 0, 0, 0, 395, 1125, 1126, 1128, 0,
	0, 0, 1127, 316, 264, 320, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 0, 0, 324, 319, 346,
	348, 357, 366, 377, 385, 360, 294, 330, 382, 369,
	0, 327, 384, 295, 315, 393, 317, 318, 354, 273,
	337, 0, 312, 292, 0, 0, 0, 298, 266, 307,
	267, 296, 329, 0, 293, 0, 371, 340, 0, 0,
	0, 391, 0, 345, 0, 0, 0, 0, 0, 332,
	373, 335, 364, 326, 355, 282, 344, 386, 313, 350,
	387, 0, 0, 0, 45, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 380, 309, 279,
	396, 0, 353, 265, 347, 0, 0, 271, 274, 392,
	378, 303, 302, 0, 0, 0, 0, 0, 0, 0,
	331, 336, 361, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 343, 1133,
	0, 0, 278, 272, 0, 328, 0, 0, 0, 281,
	0, 300, 362, 0, 262, 367, 375, 325, 0, 0,
	379, 322, 321, 0, 0, 0, 0, 0, 0, 314,
	259, 358, 394, 383, 333, 372, 297, 308, 0, 304,
	0, 0, 0, 305, 306, 342, 356, 677, 0, 1132,
	1122, 1121, 381, 374, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1124, 270, 263, 301, 365, 368,
	286, 352, 275, 310, 359, 311, 334, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 269, 290, 376, 0, 0, 0, 0,
	1117, 258, 0, 0, 0, 0, 0, 0, 351, 0,
	1129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1134, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 289, 283, 284, 338,
	339, 388, 389, 390, 363, 280, 0, 287, 288, 0,
	370, 0, 0, 0, 341, 0, 0, 0, 395, 1125,
	1126, 1128, 0, 0, 0, 1127, 316, 264, 320, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 0, 0,
	324, 319, 346, 348, 357, 366, 377, 385, 360, 294,
	330, 382, 369, 0, 327, 384, 295, 315, 393, 317,
	318, 354, 273, 337, 0, 312, 292, 0, 0, 0,
	298, 266, 307, 267, 296, 329, 0, 293, 0, 371,
	340, 0, 0, 0, 391, 0, 345, 0, 0, 0,
	0, 0, 332, 373, 335, 364, 326, 355, 282, 344,
	386, 313, 350, 387, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	380, 309, 279, 396, 0, 353, 265, 347, 0, 0,
	271, 274, 392, 378, 303, 302, 524, 0, 0, 0,
	0, 0, 0, 331, 336, 361, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 343, 1133, 0, 0, 278, 272, 0, 328, 0,
	0, 0, 281, 0, 300, 362, 0, 262, 367, 375,
	325, 0, 0, 379, 322, 321, 0, 0, 0, 0,
	0, 0, 314, 259, 358, 394, 383, 333, 372, 297,
	308, 0, 304, 0, 0, 0, 305, 306, 342, 356,
	677, 0, 1132, 1122, 1121, 381, 374, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1124, 270, 263,
	301, 365, 368, 286, 352, 275, 310, 359, 311, 334,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 376, 0,
	0, 0, 0, 1117, 258, 0, 0, 0, 0, 0,
	0, 351, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1134, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 338, 339, 388, 389, 390, 363, 280, 0,
	287, 288, 0, 370, 0, 0, 0, 341, 0, 0,
	0, 395, 1125, 1126, 1128, 0, 0, 0, 1127, 316,
	264, 320, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 324, 319, 346, 348, 357, 366, 377,
	385, 360, 294, 330, 382, 369, 0, 327, 384, 295,
	315, 393, 317, 318, 354, 273, 337, 0, 312, 292,
	0, 0, 0, 298, 266, 307, 267, 296, 329, 0,
	293, 0, 371, 340, 0, 0, 0, 391, 0, 345,
	0, 0, 0, 0, 0, 332, 373, 335, 364, 326,
	355, 282, 344, 386, 313, 350, 387, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 380, 309, 279, 396, 0, 353, 265,
	347, 0, 0, 271, 274, 392, 378, 303, 302, 0,
	0, 0, 0, 0, 0, 0, 331, 336, 361, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 343, 1133, 0, 0, 278, 272,
	0, 328, 0, 0, 0, 281, 0, 300, 362, 0,
	262, 367, 375, 325, 0, 0, 379, 322, 321, 0,
	0, 0, 0, 0, 0, 314, 259, 358, 394, 383,
	333, 372, 297, 308, 0, 304, 0, 0, 0, 305,
	306, 342, 356, 677, 0, 1132, 1122, 1121, 381, 374,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 270, 263, 301, 365, 368, 286, 352, 275, 310,
	359, 311, 334, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 269,
	290, 376, 0, 0, 0, 0, 1117, 258, 0, 0,
	0, 0, 0, 0, 351, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 289, 283, 284, 338, 339, 388, 389, 390,
	363, 280, 0, 287, 288, 0, 370, 0, 0, 0,
	341, 0, 0, 0, 395, 1125, 1126, 1128, 0, 0,
	0, 1127, 316, 264, 320, 0, 0, 0, 0, 0,
	0, 0, 276, 277, 0, 0, 324, 319, 346, 348,
	357, 366, 377, 385, 360, 294, 330, 382, 369, 0,
	327, 384, 295, 315, 393, 317, 318, 354, 273, 337,
	0, 312, 292, 0, 0, 0, 298, 266, 307, 267,
	296, 329, 0, 293, 0, 371, 340, 0, 0, 0,
	391, 0, 345, 0, 0, 0, 0, 0, 332, 373,
	335, 364, 326, 355, 282, 344, 386, 313, 350, 387,
	0, 0, 0, 50, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 380, 309, 279, 396,
	0, 353, 265, 347, 0, 0, 271, 274, 392, 378,
	303, 302, 0, 0, 0, 0, 0, 0, 0, 331,
	336, 361, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 343, 1133, 0,
	0, 278, 272, 0, 328, 0, 0, 0, 281, 0,
	300, 362, 0, 262, 367, 375, 325, 0, 0, 379,
	322, 321, 0, 0, 0, 0, 0, 0, 314, 0,
	358, 394, 383, 333, 372, 297, 308, 0, 304, 0,
	0, 0, 305, 306, 342, 356, 0, 0, 0, 0,
	0, 381, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 263, 301, 365, 368, 286,
	352, 275, 310, 359, 311, 334, 291, 0, 0, 0,
	940, 941, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 582, 583, 0,
	0, 0, 0, 0, 0, 0, 0, 424, 0, 0,
	45, 572, 569, 570, 574, 575, 576, 577, 0, 0,
	0, 573, 578, 463, 464, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 376, 0, 0, 0, 558, 559,
	0, 0, 0, 0, 607, 0, 560, 351, 0, 556,
	557, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 0, 0, 0, 285, 289, 283, 284, 338, 339,
	388, 389, 390, 363, 280, 0, 287, 288, 0, 370,
	0, 0, 0, 341, 0, 0, 0, 395, 0, 0,
	0, 0, 0, 0, 0, 316, 264, 320, 568, 0,
	0, 0, 0, 547, 0, 276, 277, 0, 0, 324,
	319, 346, 348, 357, 366, 377, 385, 360, 294, 330,
	546, 0, 0, 0, 0, 545, 0, 0, 0, 0,
	0, 0, 591, 0, 592, 0, 0, 0, 0, 0,
	0, 0, 582, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 424, 0, 0, 45, 572, 569, 570, 574,
	575, 576, 577, 0, 0, 0, 573, 578, 463, 464,
	548, 0, 0, 0, 593, 543, 561, 0, 0, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 594, 595,
	0, 0, 0, 558, 559, 0, 0, 0, 0, 607,
	0, 560, 0, 0, 994, 557, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	0, 0, 0, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 996,
	0, 596, 606, 602, 603, 600, 601, 599, 598, 597,
	608, 584, 585, 586, 587, 589, 0, 0, 467, 466,
	588, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	0, 0, 0, 0, 1005, 1011, 1009, 0, 0, 1006,
	0, 0, 1004, 0, 0, 1013, 0, 0, 1012, 998,
	1008, 1010, 1007, 1002, 0, 997, 0, 1015, 1014, 1016,
	995, 1018, 0, 0, 0, 1022, 1019, 1021, 1020, 593,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	1000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 594, 595, 0, 0, 0, 0, 0,
	1001, 1003, 0, 0, 0, 677, 0, 1132, 1122, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 606, 602, 603,
	600, 601, 599, 598, 597, 608, 584, 585, 586, 587,
	589, 547, 0, 467, 466, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 0, 0, 545, 0, 0, 0, 0, 0, 0,
	591, 0, 592, 0, 0, 0, 0, 0, 0, 0,
	582, 583, 604, 0, 0, 0, 0, 0, 1705, 0,
	424, 0, 0, 45, 572, 569, 570, 574, 575, 576,
	577, 0, 0, 0, 573, 578, 463, 464, 548, 1706,
	0, 0, 0, 543, 561, 0, 0, 590, 1117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 547, 0, 0, 0, 0, 0, 1134,
	1135, 558, 559, 0, 0, 0, 0, 607, 846, 560,
	546, 0, 556, 557, 562, 545, 0, 0, 0, 0,
	0, 0, 591, 0, 592, 0, 0, 0, 0, 0,
	0, 605, 582, 583, 0, 0, 0, 1125, 1126, 1128,
	0, 0, 424, 1127, 0, 45, 572, 569, 570, 574,
	575, 576, 577, 0, 1449, 0, 573, 578, 463, 464,
	548, 0, 0, 0, 0, 543, 561, 0, 0, 590,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 547, 0, 0, 0, 0,
	0, 0, 0, 558, 559, 851, 0, 0, 0, 607,
	0, 560, 546, 0, 556, 557, 562, 545, 0, 0,
	0, 0, 0, 0, 591, 0, 592, 0, 0, 0,
	0, 0, 0, 605, 582, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 424, 0, 728, 45, 572, 569,
	570, 574, 575, 576, 577, 0, 0, 593, 573, 578,
	463, 464, 548, 0, 0, 0, 0, 543, 561, 0,
	0, 590, 0, 568, 0, 0, 0, 0, 0, 609,
	0, 594, 595, 0, 0, 0, 0, 0, 0, 0,
	1133, 0, 0, 0, 0, 558, 559, 0, 0, 0,
	0, 607, 0, 560, 0, 0, 556, 557, 562, 0,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 606, 602, 603, 600, 601,
	599, 598, 597, 608, 584, 585, 586, 587, 589, 593,
	0, 467, 466, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 609, 0, 594, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 606, 602, 603,
	600, 601, 599, 598, 597, 608, 584, 585, 586, 587,
	589, 593, 0, 467, 466, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 0, 594, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 677, 0, 1132,
	1122, 1121, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 580, 0, 0, 0,
	0, 0, 0, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 606,
	602, 603, 600, 601, 599, 598, 597, 608, 584, 585,
	586, 587, 589, 547, 0, 467, 466, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 0, 0, 0, 0, 545, 0, 0, 0, 0,
	0, 0, 591, 0, 592, 0, 0, 0, 0, 0,
	0, 0, 582, 583, 604, 0, 0, 0, 0, 0,
	0, 0, 424, 0, 0, 45, 572, 569, 570, 574,
	575, 576, 577, 0, 0, 0, 573, 578, 463, 464,
	548, 0, 0, 0, 0, 543, 561, 0, 0, 590,
	1117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1129, 0, 677, 0, 0, 547, 0, 0, 0, 0,
	0, 1134, 1135, 558, 559, 851, 0, 0, 0, 607,
	0, 560, 546, 0, 556, 557, 562, 545, 0, 0,
	0, 0, 0, 0, 591, 0, 592, 0, 0, 0,
	0, 0, 0, 605, 582, 583, 0, 0, 0, 1125,
	1126, 1128, 0, 0, 424, 1127, 0, 45, 572, 569,
	570, 574, 575, 576, 577, 0, 1104, 0, 573, 578,
	463, 464, 548, 0, 0, 0, 0, 543, 561, 0,
	0, 590, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 547, 0, 0,
	0, 0, 0, 0, 0, 558, 559, 0, 0, 0,
	0, 607, 0, 560, 546, 0, 556, 557, 562, 545,
	0, 0, 0, 0, 0, 0, 591, 0, 592, 0,
	0, 0, 0, 0, 0, 605, 582, 583, 0, 0,
	0, 0, 0, 0, 0, 0, 424, 0, 0, 45,
	572, 569, 570, 574, 575, 576, 577, 0, 0, 593,
	573, 578, 463, 464, 548, 0, 0, 0, 0, 543,
	561, 0, 0, 590, 0, 568, 0, 0, 0, 0,
	0, 609, 0, 594, 595, 0, 0, 0, 0, 0,
	0, 0, 1133, 0, 0, 0, 0, 558, 559, 0,
	0, 0, 0, 607, 0, 560, 0, 0, 556, 557,
	562, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 606, 602, 603,
	600, 601, 599, 598, 597, 608, 584, 585, 586, 587,
	589, 593, 0, 467, 466, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 609, 0, 594, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 606,
	602, 603, 600, 601, 599, 598, 597, 608, 584, 585,
	586, 587, 589, 593, 0, 467, 466, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 594, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 677,
	0, 1132, 1122, 1121, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 580, 0,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 606, 602, 603, 600, 601, 599, 598, 597, 608,
	584, 585, 586, 587, 589, 547, 0, 467, 466, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 582, 583, 604, 0, 0, 0,
	0, 0, 0, 0, 424, 0, 0, 45, 572, 569,
	570, 574, 575, 576, 577, 0, 0, 0, 573, 578,
	463, 464, 548, 0, 0, 0, 0, 0, 561, 0,
	0, 590, 1662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 1135, 558, 559, 0, 0, 0,
	0, 607, 0, 560, 0, 0, 556, 557, 562, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 592, 0,
	0, 0, 0, 0, 0, 605, 582, 583, 0, 0,
	0, 1125, 1126, 1128, 0, 0, 424, 1127, 0, 45,
	572, 569, 570, 574, 575, 576, 577, 0, 1449, 0,
	573, 578, 463, 464, 0, 0, 0, 0, 0, 0,
	561, 0, 0, 590, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 558, 559, 0,
	0, 0, 0, 607, 0, 560, 0, 0, 556, 557,
	562, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	592, 0, 0, 0, 0, 0, 0, 605, 582, 583,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 45, 572, 569, 570, 574, 575, 576, 577, 0,
	0, 593, 573, 578, 463, 464, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 590, 0, 568, 0, 0,
	0, 0, 0, 609, 0, 594, 595, 0, 0, 0,
	0, 0, 0, 0, 1133, 0, 0, 0, 0, 558,
	559, 0, 0, 0, 0, 607, 0, 560, 0, 0,
	556, 557, 562, 0, 0, 0, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 606,
	602, 603, 600, 601, 599, 598, 597, 608, 584, 585,
	586, 587, 589, 593, 0, 467, 466, 588, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 0, 609, 0, 594, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 0, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 606, 602, 603, 600, 601, 599, 598, 597, 608,
	584, 585, 586, 587, 589, 593, 0, 467, 466, 588,
	79, 0, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 594,
	595, 0, 0, 0, 0, 677, 0, 1132, 1122, 1121,
	0, 0, 0, 0, 0, 95, 604, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 606, 602, 603, 600, 601, 599, 598,
	597, 608, 584, 585, 586, 587, 589, 0, 0, 467,
	466, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	0, 122, 123, 0, 124, 125, 126, 128, 127, 96,
	97, 98, 102, 100, 99, 101, 73, 75, 604, 71,
	74, 80, 76, 77, 78, 92, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 93, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 0, 1117, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1134,
	1135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1125, 1126, 1128,
	0, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1133,
}

var yyPact = [...]int16{
	562, -1000, -265, -1000, -1000, 1430, 1941, 456, -1000, -1000,
	-1000, 947, 538, 527, 517, 234, 476, 858, 553, 935,
	542, 432, -1000, -222, -203, -1000, -98, 514, -1000, 1217,
	-1000, 4184, 4184, 4184, -1000, 310, 858, 858, 432, 154,
	432, 1451, 492, 1449, 738, -1000, 608, -1000, 1569, 607,
	-1000, 432, 935, 727, -1000, -1000, -1000, -1000, 183, 175,
	177, 2543, -142, -9, -1000, -1000, -1000, -1000, -1000, 1325,
	-1000, -1000, -1000, 1325, 59, 1429, 1325, 1429, -1000, 1325,
	1429, 31, 31, 31, 31, 31, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1428, 1421, -1000, 1325, 1325, 1325, 1325,
	1325, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1419, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1404, 83, 1404, 1348, 1348, -1000, -1000, 2543,
	2543, 1426, 935, 858, 1446, 1445, 935, -234, 935, 935,
	1632, -1000, -1000, -1000, 189, 935, 1528, 5713, 4184, 6862,
	935, -1000, 1524, 551, 935, 4947, -1000, 1504, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1417, 785, 858, 335, 108,
	1260, 512, 417, 325, 1092, 317, -1000, -1000, -1000, 807,
	-1000, 858, -1000, 1645, -1000, -1000, 314, -1000, 313, 721,
	959, 935, 1412, 159, 1408, 3621, 888, -1000, -271, -1000,
	-13, -1000, -1000, 853, 31, 1325, -1000, 31, 820, 31,
	31, -1000, -1000, 636, 1511, 636, 636, 636, 636, 958,
	958, -130, -130, -1000, -1000, -1000, 868, -1000, 867, 1404,
	-1000, -1000, -1000, 864, -1000, 935, 858, 1403, 1444, 935,
	935, 1568, 469, -1000, -1000, 1565, 1559, 1270, -1000, -1000,
	188, -1000, -1000, 492, 858, -1000, 604, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1313, -1000, 481, 550, 6096, 175, -1000, -1000, -1000, -1000,
	452, -1000, 1652, 1592, 349, 1, -216, 1086, -1000, -1000,
	1402, -1000, -1000, 8268, -1000, 1068, 1051, -1000, 1042, 1015,
	24, 858, -1000, -210, 107, -22, -1000, -1000, 1260, -1000,
	1401, 8268, 1551, -1000, 1514, 861, -1000, 3238, -1000, -242,
	-1000, -1000, -1000, -242, -1000, -1000, -1000, 1260, -1000, 1400,
	1399, -1000, 1397, -1000, -1000, 1260, 1260, 1260, 598, -1000,
	-1000, -1000, -1000, -1000, 1263, 636, 31, 636, 1259, 1256,
	636, 636, -1000, -1000, 1005, 652, -1000, -1000, -1000, -1000,
	1207, -1000, 1203, -1000, 76, 75, -1000, 1250, 1299, -1000,
	1199, 1306, 1441, 223, 935, 1396, 1395, 1322, 432, 1322,
	1591, 249, 935, 1632, 377, 1632, 492, 6479, 858, 320,
	858, -1000, -1000, 359, 4564, -1000, -1000, 1197, -1000, 225,
	1325, 483, 483, -220, 311, 298, -216, 1260, 1392, -1000,
	452, 599, -1000, 8268, 248, 1260, 1260, 1260, 1260, 8176,
	-1000, -1000, 580, -1000, -1000, -1000, 8698, 8698, 8698, 8698,
	8698, 8698, 8698, -1000, -1000, -1000, -1000, 2, -1000, -242,
	-1000, 955, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 596,
	594, -1000, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
	8268, 1260, 1498, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
	1260, 1260, 1260, 1260, 2721, 1260, 1260, 1260, 1260, -1000,
	-1000, -1000, -1000, -1000, -1000, -216, 1391, -1000, -1000, -1000,
	721, -1000, 8268, 377, 710, 115, -1000, 1296, 1248, 1988,
	1247, -1000, 8930, -1000, 965, -1000, 856, -1000, 833, 1246,
	7654, 8084, 8084, 6479, -1000, -1000, 636, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 31, 937, 31, -15, -20,
	-1000, 860, -1000, 857, 223, 858, 935, 1245, 1294, -1000,
	221, 1390, 377, 452, -1000, 1609, 1653, -1000, 1322, 935,
	-1000, 463, 1579, -1000, -1000, 1590, -1000, 1293, -1000, -1000,
	1290, 1632, -1000, 1388, 858, -1000, -1000, 337, 858, -1000,
	-1000, -1000, -1000, -1000, 2533, 452, 1521, -1000, -1000, -1000,
	744, -1000, -1000, 755, 246, 739, -1000, 858, -216, 1387,
	8268, 452, 1186, 253, 8268, 8268, 788, -1000, -1000, 291,
	7049, 819, 734, 8698, 8698, 8698, 8698, 8698, 8698, 8698,
	8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 3035, 951,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 997, -1000, 1322, 934, 965, 965, 965, 1176,
	8176, 522, 1615, 1615, 21, 8176, 21, 21, 21, 21,
	21, 81, -1000, -269, -1000, -1000, 5713, 6479, 8084, 8084,
	7224, 8268, 8084, 8084, 8084, 1573, 708, 522, 934, 1589,
	965, 965, 965, 965, -1000, 965, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44, -1000, -1000, -1000, -1000, -1000,
	-1000, 8084, 8084, 8084, 8084, -1000, 858, 1260, 599, 1179,
	-143, 8268, 1386, 855, -1000, 1244, -242, -1000, -1000, -1000,
	-142, -1000, -1000, -1000, -1000, 965, 8084, 1141, 1176, -1000,
	513, -1000, 592, 1141, 513, 1141, 1260, -1000, 636, -1000,
	636, -1000, -1000, 1236, 1233, 1181, 1382, 1376, -227, 853,
	223, 1169, 1158, 1595, 1605, 1322, 1556, 1487, -1000, 965,
	1549, 858, -1000, -1000, -1000, -1000, -1000, 219, 675, 858,
	8031, 1231, -1000, 1023, 1374, 101, 362, 1437, 2709, 152,
	-1000, 995, 701, 936, 695, 694, 690, 687, 686, 681,
	679, 677, 673, 668, -1000, -1000, -1000, -1000, -1000, 1643,
	-1000, -1000, -1000, 1633, 1353, 1352, 452, 599, 1148, 2533,
	-1000, -114, 291, 355, -1000, -1000, 801, -1000, -1000, 2815,
	8698, 8698, 8698, -1000, -1000, -1000, -1000, 819, 8698, 8698,
	8698, 2264, 2815, 1450, 831, 2704, 21, 16, 16, 28,
	28, 28, 28, 28, 89, 89, -1000, -126, -1000, 1325,
	-1000, -1000, -1000, 965, 965, -1000, -1000, -1000, -1000, 8268,
	-1000, 965, -1000, -242, 925, -1000, -1000, 911, 1260, -1000,
	1141, 1141, 657, 1288, 8790, 1325, -1000, 1325, 1348, -1000,
	-1000, 109, 1325, 105, -1000, -1000, -1000, -1000, 1348, -1000,
	-1000, -1000, -1000, -1000, 1325, 1325, -1000, -1000, 1325, 1325,
	-1000, 1325, 1325, 614, 1281, 1280, 1141, 8084, -1000, 671,
	-1000, 8268, 965, 935, -1000, -1000, -1000, -1000, -1000, -1000,
	1141, 965, 1287, 1141, 1141, 1143, -1000, 8268, 253, 1440,
	-1000, -1000, 699, -1000, 1172, 1150, -1000, -1000, 1141, 8084,
	-257, -1000, -1000, -1000, 956, -1000, -1000, 4181, -257, -257,
	8084, -1000, -1000, -1000, -1000, -227, 223, 452, 1616, 1347,
	1144, 1616, 2533, 1533, 8268, 8268, 1609, -1000, 1322, -1000,
	-1000, 1573, -1000, -1000, 766, -1000, 1322, 1227, 213, 121,
	8268, -1000, 2563, -1000, 8031, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1609, 8268, -1000, -1000,
	-1000, -1000, -1000, 858, 3322, 858, 858, 858, 439, 8606,
	996, -1000, -1000, -1000, -1000, -1000, 935, 1114, 2291, 1023,
	1023, 2291, 1023, 1023, 452, 452, 1346, 1344, 290, -1000,
	858, -1000, -150, 2709, 858, -1000, 836, -1000, -1000, 773,
	834, 773, 773, 773, 773, 773, 224, 830, 374, 483,
	483, 858, 452, 1138, 253, 2533, 1437, -1000, -1000, -1000,
	-1000, 2815, 2815, 2815, -1000, 2264, 2815, 472, -1000, 8698,
	8698, 70, -1000, -1000, 522, -1000, 65, -1000, -242, -1000,
	-1000, 3785, 951, 8268, -1000, 247, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3785, 8698,
	8698, 8698, 8698, -120, 1266, 704, -1000, 8268, 363, -1000,
	-1000, -1000, -1000, -1000, -1000, 383, 858, 599, -1000, 1647,
	-147, 446, -1000, -1000, -1000, -1000, -1000, 1260, -1000, -1000,
	587, -1000, -1000, 965, 1616, 1105, 1136, 2533, 8268, 377,
	-227, 2533, -1000, -1000, 1640, 632, 516, 1286, -1000, 590,
	1595, 965, 1465, -1000, -1000, -127, 8268, 8031, 6637, 522,
	6637, -1000, 8031, 285, 1595, 343, 7509, 456, 917, 914,
	1284, 411, -1000, 3032, 793, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	858, 1627, 1625, 1621, 1620, 9069, 248, 8268, 8268, 1583,
	-1000, -1000, 2291, -1000, -1000, -1000, -1000, -1000, 1111, 1109,
	452, 452, 1332, 1260, 1077, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 721, 721, 1075, 1062, 2533, -1000,
	1437, -1000, -1000, 8698, 2815, 2815, -21, -1000, 911, -1000,
	965, 1325, 965, 340, -1000, -1000, 965, 1873, 2632, 1312,
	270, 1260, -106, -1000, 522, 8268, 935, -1000, 253, 483,
	483, -1000, -1000, -1000, 155, 822, 827, 826, 824, 33,
	-1000, 1602, 448, 5330, -1000, 2533, 1616, 2533, 1437, 522,
	1060, 1616, 1437, -1000, 1442, 8268, 8268, 8268, -1000, 1533,
	-1000, 8084, -1000, -1000, -250, 522, 2563, 2461, -1000, -1000,
	257, 6254, -1000, 1533, 8031, 645, -1000, 653, -1000, 6637,
	926, 935, 1026, -1000, 1238, 1329, -1000, -1000, -1000, 1548,
	873, 646, 858, 205, 4184, -1000, -1000, 1278, 3415, -39,
	-1000, -1000, -1000, 663, 585, 918, -1000, 1509, -1000, -1000,
	3322, 1518, -1000, -1000, -1000, -1000, -1000, 6637, -1000, 1271,
	965, 675, 216, -1000, 331, 1058, 1049, 452, 858, -1000,
	2709, -1000, -1000, 381, 2533, 1437, -1000, 2815, -1000, -1000,
	-1000, -1000, -1000, 8698, -1000, -1000, 8698, -1000, 8698, -1000,
	8698, -1000, 8698, 8698, 965, 893, 522, 1316, -1000, -1000,
	-1000, 800, -1000, 780, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 148, -1000, 1600, 965, -1000, 1437, 2533, -1000, -1000,
	-1000, 2533, -1000, 1495, 522, 522, -1000, -1000, 1258, 8268,
	5871, -1000, -1000, -1000, -1000, 2431, 8553, 407, 2254, 265,
	935, -1000, 265, 1100, 914, 935, -1000, -1000, 934, 914,
	914, 914, 914, 914, -1000, 1480, 1471, -1000, 1462, 1460,
	1479, 935, 1047, 873, 505, 1260, -1000, 948, -1000, -1000,
	-1000, 1548, 1582, -1000, 3798, 1278, -39, 1277, -1000, -41,
	-48, 7562, 6479, 636, -1000, -1000, -1000, -1000, -1000, 858,
	2097, -1000, 118, 212, 163, -1000, 179, 2533, 2533, 1039,
	965, -1000, 935, 1437, -1000, 854, 854, 854, 854, 854,
	78, -1000, -1000, 858, -1000, -1000, -1000, 579, 8268, -1000,
	-1000, -1000, 1437, -1000, 1616, 914, 522, -1000, -1000, 4722,
	-1000, -1000, 8606, -1000, 8606, 6637, -1000, 1067, 1260, -1000,
	1616, 914, 1079, -1000, 1239, -1000, 660, 1329, 1343, 1438,
	1965, -1000, -1000, -1000, -1000, 1468, -1000, 1463, -1000, -1000,
	-1000, -1000, -139, 511, 501, 498, 858, -1000, 1322, -1000,
	1277, -39, -58, -1000, -1000, -1000, -1000, 522, 649, -1000,
	1275, -1000, 6637, -1000, -1000, 181, -1000, 1437, 1437, -1000,
	-1000, 1311, -1000, -1000, -1000, -1000, -1000, -1000, 965, 180,
	-177, 1037, 6479, 1011, -1000, 522, -1000, 1613, 1272, 406,
	8031, 3708, 7509, 1345, 934, 1260, -1000, 1014, 858, 1609,
	1079, -1000, 1616, 934, 8268, -1000, -1000, 8268, 1307, -1000,
	8268, -1000, -1000, -1000, -1000, 1302, 1260, 1260, 1260, 1028,
	-1000, -1000, -1000, -1000, -49, -55, -1000, 8268, 1562, -1000,
	-1000, -1000, -1000, 858, -1000, 1494, -123, -183, -1000, -1000,
	-1000, 965, 8268, 1611, 1599, -1000, 644, 645, -1000, -1000,
	1516, 1223, 1265, -1000, -1000, 7746, 965, 1030, 577, 1028,
	1595, -1000, 1609, -1000, 522, 522, 377, 522, -81, 377,
	377, 377, 923, 858, -1000, -1000, -1000, 522, 5488, 1021,
	-1000, 1486, -1000, -1000, -1000, -1000, 8268, 8268, 5105, 280,
	-1000, 1260, -1000, -1000, 1242, 858, 858, -1000, -1000, 1595,
	1003, 1001, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 964, 964, 964, 505, -1000, -1000, -1000, -128, 522,
	1271, 401, 1637, -1000, 1260, -1000, 1322, 575, -1000, -1000,
	-1000, -1000, -81, -1000, -1000, -1000, -139, -179, -1000, 934,
	1265, 965, 858, -1000, -1000, -192, 1240, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1935, 4, 59, 1934, 1930, 1929, 1928, 1927, 1926,
	1925, 1923, 1922, 1916, 26, 16, 46, 25, 40, 1915,
	1914, 1913, 1910, 1909, 91, 1908, 1907, 1906, 1902, 102,
	1900, 1894, 1889, 1887, 79, 83, 81, 103, 1079, 35,
	42, 50, 22, 1885, 31, 1880, 1875, 58, 1874, 48,
	1872, 1868, 84, 1866, 1861, 8, 20, 75, 110, 1860,
	1858, 94, 1485, 1857, 1845, 100, 1844, 1843, 101, 39,
	69, 7, 9, 6, 1842, 337, 2, 1841, 80, 1840,
	1839, 1832, 1831, 43, 1829, 64, 68, 17, 60, 1826,
	13, 74, 49, 23, 10, 5, 55, 41, 1825, 11,
	45, 29, 1823, 66, 1819, 125, 51, 67, 99, 0,
	24, 93, 1816, 1815, 1814, 1211, 86, 47, 14, 63,
	71, 1813, 76, 109, 57, 107, 98, 1810, 108, 1806,
	1803, 1802, 1801, 1799, 393, 822, 117, 77, 54, 1796,
	1795, 96, 334, 326, 95, 369, 1055, 85, 1794, 1792,
	1789, 1787, 114, 1786, 73, 105, 27, 667, 1781, 1780,
	1779, 1778, 1776, 1774, 1770, 97, 1764, 87, 88, 72,
	621, 52, 1763, 1753, 1751, 1746, 90, 1744, 1742, 1739,
	65, 1737, 1736, 112, 70, 120, 113, 115, 1735, 1732,
	89, 78, 1729, 111, 116, 1728, 106, 44, 28, 30,
	56, 1726, 1721, 1719, 1, 3, 1718, 1713, 1709, 1708,
	1707, 1705, 62, 1699, 92, 1695, 15, 1694, 1689, 53,
	1686, 1685, 1684, 1674, 1673, 444, 1095, 1669, 82, 121,
	1663, 145,
}

var yyR1 = [...]uint8{
	0, 221, 222, 222, 1, 1, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 20, 20, 20, 20, 20, 20,
	20, 224, 224, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 27, 27, 7, 8, 8, 8, 227, 227,
	47, 47, 92, 92, 9, 9, 9, 9, 10, 10,
	201, 201, 200, 202, 202, 11, 11, 11, 11, 11,
	195, 195, 195, 195, 195, 12, 12, 198, 198, 198,
	14, 14, 14, 14, 15, 15, 16, 16, 16, 18,
	18, 97, 97, 101, 101, 101, 102, 102, 102, 102,
	213, 213, 121, 121, 223, 223, 228, 228, 228, 228,
	228, 228, 228, 193, 193, 193, 193, 194, 194, 194,
	194, 196, 196, 197, 197, 197, 197, 197, 197, 199,
	199, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 13, 13, 28, 28, 70, 70, 107, 107, 174,
	174, 174, 175, 175, 175, 175, 175, 175, 177, 177,
	178, 178, 113, 113, 179, 179, 23, 159, 160, 160,
	160, 160, 160, 160, 160, 160, 146, 146, 146, 124,
	124, 124, 124, 124, 124, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 185, 185, 185, 185, 185, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 187, 188,
	189, 181, 181, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 136, 136, 136,
	136, 136, 136, 180, 180, 176, 176, 176, 176, 128,
	128, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 127, 127, 127, 127, 127, 127, 127, 132, 132,
	129, 129, 129, 129, 129, 129, 129, 129, 125, 125,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 133, 133, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 145, 145, 134, 134, 143, 143, 144,
	144, 144, 135, 135, 135, 142, 142, 142, 139, 139,
	140, 140, 141, 141, 141, 137, 137, 137, 138, 138,
	138, 148, 170, 170, 170, 172, 172, 173, 173, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 158, 158, 190, 190, 191, 191, 192,
	192, 169, 169, 169, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 157, 157, 167, 167,
	168, 168, 165, 165, 165, 166, 152, 152, 152, 152,
	152, 153, 153, 154, 154, 154, 154, 149, 149, 150,
	150, 151, 151, 183, 183, 183, 217, 217, 217, 217,
	217, 217, 218, 218, 184, 184, 155, 155, 156, 156,
	163, 163, 163, 163, 229, 229, 161, 161, 161, 162,
	162, 162, 230, 24, 25, 25, 26, 26, 26, 31,
	31, 31, 29, 29, 30, 30, 36, 36, 35, 35,
	37, 37, 37, 37, 112, 112, 112, 111, 111, 214,
	214, 214, 214, 214, 39, 39, 40, 40, 41, 41,
	42, 42, 42, 204, 204, 203, 203, 205, 205, 205,
	205, 205, 205, 205, 205, 54, 54, 90, 90, 90,
	93, 93, 43, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 119, 119, 118, 118, 118, 117, 117, 48,
	48, 48, 50, 49, 49, 49, 49, 51, 51, 53,
	53, 52, 52, 55, 55, 55, 55, 56, 56, 91,
	91, 38, 38, 38, 38, 38, 38, 38, 38, 104,
	104, 58, 58, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 67,
	67, 67, 67, 67, 67, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 34, 34, 68, 68,
	68, 75, 69, 69, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 65, 65, 65, 65, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 231, 231, 66, 66, 66, 66, 32, 32,
	32, 32, 32, 120, 120, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 123, 123, 123,
	123, 123, 123, 123, 123, 79, 79, 33, 33, 77,
	77, 78, 106, 106, 80, 80, 76, 76, 76, 206,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	81, 81, 82, 82, 215, 215, 216, 83, 83, 84,
	84, 85, 86, 86, 86, 87, 87, 87, 87, 88,
	88, 88, 60, 60, 60, 60, 60, 60, 89, 89,
	89, 89, 94, 94, 71, 71, 73, 73, 72, 74,
	95, 95, 99, 96, 96, 100, 100, 100, 100, 100,
	21, 22, 98, 98, 98, 114, 114, 114, 105, 105,
	103, 103, 109, 110, 110, 110, 110, 115, 115, 116,
	116, 207, 207, 207, 208, 208, 208, 209, 209, 210,
	211, 211, 212, 220, 220, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 225, 226,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 1, 1, 5, 5, 3, 5, 3, 1,
	3, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 4, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 4, 1, 1, 0, 1, 0, 3, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 4, 4, 0, 1,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 9, 6, 6, 8, 8, 5,
	8, 7, 4, 0, 2, 4, 6, 2, 4, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 1, 2,
	1, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 2, 2, 3, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 2, 1, 1, 1, 1,
	4, 5, 4, 4, 4, 1, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 5, 2, 3, 3, 2, 3, 2,
	3, 3, 2, 2, 3, 4, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 5, 5, 8,
	8, 13, 11, 1, 1, 2, 2, 10, 8, 9,
	7, 7, 5, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 8, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 2, 1, 2, 0,
	3, 1, 1, 3, 4, 4, 4, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 4, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	2, 1, 4, 5, 5, 5, 5, 6, 4, 4,
	4, 6, 6, 8, 6, 6, 6, 8, 6, 8,
	6, 8, 6, 8, 9, 7, 5, 4, 4, 3,
	3, 3, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 2, 2, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 0, 2, 1, 3, 5, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 1, 3, 1, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 5, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 2, 0, 2, 2, 0, 1, 4,
	1, 3, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -221, -1, -19, -20, -23, 126, 127, -222, 391,
	-159, 58, -217, -218, 276, -179, 135, 148, 168, 169,
	361, 133, 373, 374, 150, 376, 79, -103, 138, -160,
	-146, -109, 63, 36, 61, 134, 134, 134, 136, 213,
	136, -109, -109, -76, 139, 61, -115, 63, -52, -115,
	61, 133, -105, 139, 376, 373, 374, 341, 133, 60,
	59, -147, -124, -128, -125, -130, -129, -131, -109, -126,
	-127, 249, 353, 246, 250, 247, 252, 253, 254, 120,
	251, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 255, 267, 33, 155, 239, 240, 241, 244,
	243, 245, 242, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 231, 232, 234, 235, 236, 238, 237, -147,
	-147, -109, 56, 212, -109, -109, -105, 214, -105, 56,
	-193, 19, 192, 193, 205, 56, 81, 123, 25, 123,
	-105, -52, 81, -52, 305, -163, -229, 356, 37, -146,
	-148, -152, -149, -150, -151, -164, -153, 142, 140, 150,
	389, 144, 145, 276, -157, 146, 134, 151, 73, 81,
	-185, 142, -188, 56, 284, 290, 140, 151, 150, 389,
	71, 143, 25, 363, 365, 31, 32, -141, 392, 278,
	-139, 287, -134, 58, -134, -133, 248, -135, 58, -134,
	-135, -134, -135, -137, 250, -137, -137, -137, -137, 58,
	58, -134, -134, -134, -134, -134, 58, -143, 58, -132,
	233, -143, -144, 58, -144, 56, 57, -52, -109, 56,
	56, -52, -213, 386, 387, -52, -52, -196, -194, 8,
	9, 10, 206, -52, 26, -110, -116, -109, 298, 147,
	-108, -115, 131, 193, 364, 80, 25, 27, 284, 290,
	192, 84, 120, 16, 85, 199, 373, 374, 119, 76,
	342, 126, 52, 334, 335, 332, 197, 344, 345, 333,
	291, 204, 20, 31, 386, 10, 28, 153, 24, 113,
	128, 194, 89, 88, 156, 160, 161, 26, 154, 75,
	200, 202, 19, 55, 146, 11, 363, 13, 14, 378,
	365, 139, 138, 100, 377, 134, 50, 8, 122, 29,
	387, 97, 46, 151, 203, 48, 98, 17, 336, 337,
	34, 351, 162, 115, 53, 40, 379, 81, 380, 73,
	56, 305, 198, 79, 15, 51, 163, 381, 148, 201,
	385, 99, 129, 341, 49, 195, 382, 132, 196, 6,
	347, 33, 152, 47, 170, 133, 292, 383, 87, 137,
	74, 169, 5, 150, 9, 384, 54, 57, 338, 339,
	340, 38, 86, 12, 149, 355, 77, -124, -116, -108,
	-52, 26, 131, -52, -161, 59, -110, 71, -108, 36,
	58, -184, 56, 81, -155, -109, 151, -157, 61, 134,
	-183, 373, 374, -225, 58, -157, -157, 61, 134, 151,
	61, 151, 73, 19, -109, 9, 151, 151, -184, 63,
	-52, 58, -181, 364, 16, 58, -186, 58, -187, 63,
	64, 65, 66, 73, -136, 72, -58, 279, -65, 332,
	335, 334, 280, 74, 75, -109, 350, 349, -115, -189,
	65, 393, -140, 288, 65, -137, -134, -137, 65, 61,
	-137, -137, -138, 120, 119, 33, -138, -138, -138, -138,
	-145, 63, -145, -142, 355, 356, -142, 65, 65, -143,
	65, -52, -109, 58, 56, -52, -52, 25, 136, 25,
	-174, 25, 56, 59, 206, -193, -109, 123, 57, -113,
	142, -152, 150, 131, 90, -110, -229, -168, -165, -109,
	151, 10, 9, 19, 146, 140, 150, 389, -183, 61,
	58, -38, -57, 81, -62, 31, 26, 9, 76, -225,
	-61, -58, -76, -206, -74, -75, 120, 121, 109, 110,
	117, 82, 122, -65, -63, -64, -66, -209, 179, 63,
	64, -109, 62, 72, 65, 66, 67, 68, 73, -115,
	310, -72, 48, 49, 342, 343, 344, 345, 351, 346,
	85, 38, 40, 255, 279, 280, 332, 340, 339, 338,
	336, 337, 334, 335, 388, 139, 333, 115, 341, 277,
	61, 61, 61, 61, -183, 150, -155, -109, 375, -185,
	389, -136, -225, 58, -38, 25, 31, 65, -186, 58,
	-187, -176, 388, -176, -225, -134, 58, -134, 58, 58,
	-225, -225, -225, 123, 60, -138, -137, -138, 60, 60,
	-138, -138, 61, 61, 120, 60, 59, 60, 239, 239,
	60, 59, 60, 59, 58, 57, 56, -167, -168, -65,
	-109, -52, 58, 58, -2, -3, -4, 6, -225, -105,
	-2, -175, 19, 176, 177, -52, -194, -90, -109, 151,
	-196, -193, -110, -109, -224, 134, 151, -109, 142, -152,
	-162, -110, 63, 65, 60, 59, -134, -166, 282, -134,
	-154, 172, 173, 33, 174, -154, 375, 151, 151, -183,
	-225, 58, -168, -226, 80, 79, 97, 207, 60, -38,
	-59, 100, 81, 98, 99, 84, 106, 105, 116, 109,
	110, 111, 112, 113, 114, 115, 107, 108, 388, 119,
	90, 91, 92, 93, 94, 95, 96, 101, 102, 103,
	104, -104, -225, -75, -225, -225, -225, -57, -2, -69,
	-225, -38, 124, 125, -62, -225, -62, -62, -62, -62,
	-62, -62, -210, 278, -176, 63, 123, 123, -225, -225,
	-225, -225, -225, -225, -225, -225, -79, -38, -225, 41,
	-225, -225, -225, -225, -231, -225, -231, -231, -231, -231,
	-231, -231, -123, 120, 250, 155, 241, -126, -125, 256,
	255, -225, -225, -225, -225, -183, 58, -184, -38, -90,
	60, 58, 365, 59, 60, -186, 63, 60, 281, 122,
	-124, -226, 60, 60, 60, -36, 24, -35, -69, -37,
	-38, 111, -115, -35, -38, -35, -110, -138, -137, 63,
	-137, 289, 289, 65, 65, -167, -109, -52, 60, 58,
	58, -90, -168, -83, 15, -26, 5, -24, -230, -2,
	-52, 137, 21, 6, 8, 9, 10, 19, -107, 59,
	25, -196, -223, 58, -109, 150, -109, -170, -172, 355,
	-171, 57, 147, 71, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 61, -165, -86, 27, 28, -184, 56,
	73, 175, -184, 56, -155, -183, 58, -38, -168, 60,
	-180, 174, -38, -38, -67, 73, 81, 74, 75, -62,
	21, 22, 23, -68, -72, -75, 69, 100, 98, 99,
	84, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -128, 240, -123, -126,
	-120, 61, 63, 61, -76, -109, -226, -226, -226, 59,
	-226, -2, -61, 63, -109, -61, -109, 392, -110, -110,
	-35, -35, -38, -122, 120, 246, 155, 241, 235, 265,
	266, 286, 239, 287, 228, 220, 225, 238, 236, 222,
	237, 221, 234, 231, 244, 243, 245, 256, 247, 252,
	254, 253, 251, -38, -37, -37, -35, -29, 24, -77,
	-78, 86, -76, 19, -226, -226, -226, -226, -226, 248,
	-35, -36, -35, -35, -35, -156, -109, -225, -226, 60,
	361, 362, -38, 58, 65, 60, -141, -226, -35, 59,
	-226, -226, -112, -111, 25, -109, 63, 123, -226, -226,
	-225, -138, -138, 60, 60, 60, 58, 58, -91, 377,
	-167, 60, 60, -87, 17, 16, -5, -3, -225, 21,
	24, -31, 44, 45, -25, -226, 25, -156, 194, -106,
	86, -109, -197, -199, 215, -17, -14, -6, -8, -7,
	-10, -9, -11, -12, -13, -21, -3, 139, -15, -16,
	-27, 10, 9, 20, 33, 198, 199, 204, 200, 149,
	-28, -22, 8, 341, 160, 161, 56, -228, -109, 109,
	90, 63, -146, 59, 58, 58, 373, 374, 140, -169,
	56, -171, 355, 58, 357, 61, -158, 90, 63, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 9,
	10, 58, 58, -168, -226, 60, -170, 348, 73, 74,
	75, -62, -62, -62, -68, -62, -62, -62, -34, 156,
	80, 355, -226, -226, -38, -226, -211, -212, 63, -226,
	-226, 59, 57, 59, -134, -134, -134, -144, 226, -134,
	226, -144, -134, -134, -134, -134, -134, -134, 25, 59,
	11, 59, 11, -226, -35, -80, -78, 89, -38, -226,
	-115, -226, -226, -226, -226, 60, 59, -38, -180, 56,
	60, -182, 60, 60, -226, -37, -214, 390, -111, 111,
	-116, -214, -214, -36, -91, -167, -168, -56, 12, 58,
	60, -56, -170, -88, 19, 34, -38, -84, -85, -38,
	-83, -2, -29, 70, -2, -177, 57, 195, 215, -38,
	391, -199, 215, -197, -83, -38, -57, -24, -24, -24,
	-201, -109, -200, -24, -220, -219, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, -109, -109, -109,
	-195, 40, 201, 202, 203, -57, -62, -109, -225, -52,
	60, -228, -109, -228, -228, -228, -228, -228, -168, -168,
	58, 58, 151, -109, -173, -171, -109, 65, -190, 56,
	77, 65, -190, -190, -190, -190, -190, -191, 190, 191,
	65, -192, -191, 65, -154, -154, -156, -168, 60, -180,
	-170, -169, -34, 80, -62, -62, 239, 393, 59, -176,
	-122, 120, -120, -38, -137, 61, -122, -62, -62, -62,
	-62, 352, -83, 88, -38, 87, 143, -109, -226, 10,
	9, 361, 362, 60, 216, 367, 368, 162, 369, 174,
	370, 371, -225, 123, -226, -56, 60, 60, -170, -38,
	-90, -91, -170, 9, 100, 59, 18, 59, -86, -87,
	-226, -30, 47, -178, 355, -38, -197, -198, -199, -199,
	-197, 391, 88, -87, 87, -18, -14, -15, -17, 215,
	-103, 11, -47, -52, -40, -41, -42, -43, -54, -75,
	-225, -52, 59, -202, -119, 196, 25, -96, -121, 217,
	-100, 300, 299, -110, 310, -98, 298, 250, 297, -190,
	59, -109, 11, 11, 11, 11, -199, 215, -70, -69,
	-70, -107, 19, 60, 60, -168, -168, 58, -225, 60,
	59, -184, -184, 60, 60, -170, -169, -62, 289, -212,
	-226, -226, -226, 59, -226, -226, 59, -226, 19, -226,
	59, -226, 19, -225, -33, 347, -38, -52, -180, -154,
	-154, 355, 65, 16, 65, 65, 65, 65, 368, 162,
	370, 16, -226, 163, -83, 111, -170, -56, -170, -169,
	60, -56, -169, 42, -38, -38, -85, -88, -35, 389,
	391, -199, 88, 88, -88, -197, 89, 89, -198, -53,
	29, -52, -52, -47, -227, 59, 11, 57, 33, 59,
	-48, -50, -49, -51, 46, 50, 52, 47, 48, 49,
	53, -119, -40, -225, -118, 163, -117, 25, -115, 63,
	-200, -109, 197, -124, 59, -96, 217, -97, -101, 301,
	303, 90, 123, -114, -109, 63, 31, 33, -219, 29,
	-198, -226, -106, 194, -207, 208, 81, 60, 60, -168,
	-109, -171, 143, -170, -169, -62, -62, -62, -62, -62,
	-62, -226, 63, 58, 65, 65, 372, -115, 16, -226,
	-169, -170, -170, 43, -39, 11, -38, 88, -199, 391,
	-15, -18, 139, -16, 139, 391, 88, -92, 163, -52,
	-92, 57, -40, -52, -95, -99, -76, -41, -42, -42,
	-41, -42, 46, 46, 46, 51, 46, 51, 46, -49,
	-115, -226, -55, 54, 138, 55, -225, -117, 19, -100,
	-97, 59, 302, 304, 305, 56, 77, -38, -110, -138,
	-156, 88, 215, 195, -208, 209, 208, -170, -170, 60,
	-226, -52, -169, -226, -226, -226, -226, -226, -32, 100,
	355, -156, 123, -215, -216, -38, -169, -56, -40, 88,
	89, -57, -57, -60, 33, 38, -2, -225, -225, -56,
	-40, -56, -39, 59, 90, -45, -44, 56, 57, -46,
	56, -44, 46, 46, -204, 355, 134, 134, 134, -93,
	-109, -2, -101, -102, 306, 303, 309, 90, -198, 211,
	210, -169, -169, 58, -226, 353, 53, 358, 60, -110,
	-226, -83, 59, -81, 13, 139, -197, -18, -18, -94,
	56, -95, -71, -73, -72, -225, -2, -89, -109, -93,
	-83, -56, -56, -99, -38, -38, 58, -38, 58, -225,
	-225, -225, -226, 59, 303, 307, 308, -38, 391, -156,
	43, 354, 359, -226, -216, -82, 14, 16, 391, 30,
	-94, 59, -226, -226, -226, 59, 123, -226, -87, -83,
	-90, -203, -205, 378, 379, 380, 381, 382, 383, 384,
	385, -90, -90, -90, -118, -109, 88, 60, 43, -38,
	-69, 88, 151, -73, 38, -2, -225, -109, -109, -87,
	60, 60, 59, -226, -226, -226, -55, 355, 139, 9,
	-71, -2, 123, -205, -204, 358, -95, -226, -109, 359,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 820, 1, 3,
	6, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 427, 428, 429, 432, 0, 0, 821, 0,
	169, 213, 213, 213, 822, 0, 0, 0, 818, 0,
	818, 0, 746, 0, 0, -2, 0, 828, 0, 541,
	827, 818, 0, 0, 433, 430, 431, 165, 0, 440,
	0, 176, 342, 338, 180, 181, 182, 183, 184, 325,
	260, 288, 289, 325, 312, 332, 325, 332, 295, 325,
	332, 345, 345, 345, 345, 345, 303, 304, 305, 306,
	307, 308, 309, 0, 0, 280, 325, 325, 325, 325,
	325, 286, 287, 314, 315, 316, 317, 318, 319, 320,
	321, 0, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 327, 278, 327, 329, 329, 276, 277, 177,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 167, 442, 0, 445, 170,
	171, 172, 173, 174, 175, 0, 434, 436, 0, 423,
	0, 0, 0, 0, 0, 0, 396, 397, 186, 0,
	188, 0, 190, 0, 192, 193, 0, 195, 197, 434,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 344,
	340, 339, 259, 0, 345, 325, 313, 345, 0, 345,
	345, 296, 297, 348, 0, 348, 348, 348, 348, 0,
	0, 335, 335, 283, 284, 285, 0, 271, 0, 327,
	279, 273, 274, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 149, 0, 121, 117,
	118, 119, 116, 0, 0, 747, 0, 823, 824, 825,
	-2, 829, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 22, 542, 830,
	0, 819, 162, 0, 0, 0, 446, 448, 826, 444,
	0, 406, 0, 0, 0, 437, 384, 0, 392, -2,
	0, 424, 425, 837, 1001, 0, 0, 387, 389, 0,
	423, 436, 187, 0, 0, 0, 194, 196, 0, 200,
	201, 837, 0, 231, 0, 0, 214, 0, 217, -2,
	220, 221, 222, 255, 224, 225, 226, 0, 228, 325,
	325, 251, 0, 561, 562, 0, 0, 0, 0, 229,
	230, 343, 179, 341, 0, 348, 345, 348, 0, 0,
	348, 348, 298, 349, 0, 0, 299, 300, 301, 302,
	0, 323, 0, 281, 0, 0, 282, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 818, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	436, 29, 163, 0, 0, 447, 443, 0, 400, 325,
	325, 0, 0, 0, 0, 0, 423, 0, 0, 391,
	0, 0, 551, 837, 557, 559, 0, 0, 0, 837,
	604, 605, 606, 607, 608, 609, 837, 837, 837, 837,
	837, 837, 837, 636, 637, 638, 639, 0, 641, -2,
	751, 746, 753, 754, 755, 756, 757, 758, 759, 0,
	0, 799, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 672, 682, 682, 682,
	682, 682, 682, 682, 0, 0, 0, 0, 0, 838,
	385, 386, 388, 390, 394, 423, 0, 437, 212, 189,
	434, 191, 837, 0, 0, 0, 232, 0, 0, 0,
	0, 219, 0, 223, 0, 247, 0, 249, 0, 0,
	-2, 837, 837, 0, 326, 290, 348, 292, 333, 334,
	293, 294, 350, 346, 347, 345, 0, 345, 0, 0,
	322, 0, 330, 0, 0, 0, 0, 0, 398, 399,
	325, 0, 0, 0, -2, 767, 0, 452, 0, 0,
	-2, 0, 0, 150, 151, 147, 122, 120, 507, 508,
	0, 0, 748, 104, 0, 31, 32, 437, 436, 30,
	441, 449, 450, 451, 352, 0, 772, 404, 405, 403,
	434, 413, 414, 0, 0, 434, 435, 436, 423, 0,
	837, 0, 0, 253, 837, 837, 0, 556, 1002, 554,
	837, 0, 0, 837, 837, 837, 837, 837, 837, 837,
	837, 837, 837, 837, 837, 837, 837, 837, 0, 0,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 558, 0, 575, 0, 0, 0, 551, 36, 0,
	837, 602, 0, 0, 627, 837, 628, 629, 630, 631,
	632, 633, 640, 0, 750, 752, 0, 0, 837, 837,
	837, 837, 837, 837, 837, 462, 0, 736, 0, 0,
	0, 0, 0, 0, 674, 0, 675, 676, 677, 678,
	679, 680, 681, 727, 0, 729, 730, 731, 732, 733,
	734, 837, -2, 837, 837, 395, 0, 0, 0, 0,
	0, 837, 209, 0, 215, 0, 255, 218, 256, 257,
	342, 227, 248, 250, 252, 0, 837, 0, 0, 468,
	474, 470, 0, 0, 474, 0, 0, 291, 348, 324,
	348, 336, 337, 0, 0, 0, 0, 0, 549, 1001,
	0, 0, 0, 775, 0, 0, 456, 459, 454, 36,
	0, 0, 153, 154, 155, 156, 157, 0, 742, 0,
	0, 0, 23, 106, 0, 0, 437, 381, 353, 0,
	355, 0, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 401, 402, 773, 774, 407, 0,
	415, 416, 408, 0, 0, 0, 0, 0, 0, 352,
	422, 0, 552, 553, 555, 579, 0, 581, 583, 563,
	837, 837, 837, 567, 598, 599, 600, 0, 837, 837,
	837, 596, 571, 0, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 624, 0, 635, 325,
	625, 693, 694, 0, 0, 746, 577, 578, 601, 837,
	798, 36, 622, 255, 0, 623, 634, 0, 747, 749,
	0, 0, 0, 0, -2, 325, 698, 325, 329, 701,
	702, 703, 325, 706, 708, 709, 710, 711, 329, 713,
	714, 715, 716, 717, 325, 325, 720, 721, 325, 325,
	724, 325, 325, 0, 0, 0, 0, 837, 463, 744,
	739, 837, 0, 0, 669, 670, 671, 673, 683, 728,
	0, 0, 467, 0, 0, 0, 438, 837, 253, 202,
	205, 206, 0, 233, 0, 0, 258, 642, 0, 837,
	479, 648, 471, 475, 0, 477, 478, 0, 479, 479,
	-2, 310, 311, 328, 331, 549, 0, 0, 547, 0,
	0, 547, 352, 779, 837, 837, 767, 38, 0, 457,
	458, 462, 460, 461, 453, 37, 0, 158, 0, 0,
	837, 509, 19, 123, 0, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 767, 837, 82, 83,
	452, 452, 452, 0, 452, 0, 0, 0, 70, 837,
	0, 810, 42, 43, 143, 144, 0, 0, -2, 106,
	106, -2, 106, 106, 0, 0, 0, 0, 0, 351,
	0, 356, 0, 0, 0, 359, 0, 374, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 352, 381, 254, 580, 582,
	584, 564, 565, 566, 568, 596, 572, 0, 569, 837,
	837, 0, 560, 576, 603, -2, 0, 840, 255, 649,
	650, 0, 0, 837, 695, 345, 699, 700, 704, 705,
	707, 712, 718, 719, 722, 723, 725, 726, 0, 837,
	837, 837, 837, 0, 767, 0, 740, 837, 0, 667,
	668, 684, 685, 686, 687, 0, 0, 0, 198, 0,
	0, 0, 211, 216, 643, 469, 644, 0, 476, 472,
	0, 645, 646, 0, 547, 0, 0, 352, 837, 0,
	549, 352, 13, 33, 0, 0, 776, 768, 769, 772,
	775, 36, 464, 455, -2, 160, 837, 148, 0, 743,
	0, 126, 0, 0, 775, 0, 551, 820, 0, 0,
	58, -2, 60, 0, 0, 843, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 65, 66, 67,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 147,
	105, 107, -2, 108, 109, 110, 111, 112, 0, 0,
	0, 0, 0, 382, 0, 357, 362, 360, 363, 375,
	376, 364, 365, 366, 367, 368, 369, 370, 377, 378,
	371, 372, 379, 380, 434, 434, 0, 0, 352, 421,
	381, 420, 570, 837, 597, 573, 0, 839, 0, 842,
	0, 325, 0, 0, 696, 697, 0, 0, 0, 0,
	0, 0, 737, 666, 745, 837, 0, 439, 253, 0,
	0, 207, 208, 210, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 0, 647, 352, 547, 352, 381, 548,
	0, 547, 381, 780, 0, 837, 837, 837, 771, 779,
	39, 837, 465, 17, 0, 159, 18, 0, 77, 124,
	0, 0, 127, 779, 0, 88, 86, 82, 89, 0,
	0, 0, 0, 50, 0, 486, 488, 489, 490, 522,
	0, 524, 0, 0, 0, 64, 523, 54, 0, 0,
	803, 102, 103, 0, 0, 0, -2, 0, 814, 811,
	0, 68, 71, 72, 73, 74, 75, 0, 141, 146,
	0, 742, 0, 24, 831, 0, 0, 0, 0, 354,
	0, 409, 410, 0, 352, 381, 418, 574, 626, 841,
	651, 655, 652, 837, 654, 656, 837, 658, 837, 660,
	837, 662, 837, 837, 0, 0, 741, 0, 199, 203,
	204, 0, 235, 0, 237, 238, 239, 240, 241, 242,
	243, 0, 480, 0, 0, 473, 381, 352, 10, 8,
	550, 352, 12, 0, 777, 778, 770, 34, 484, 837,
	0, 78, 128, 125, 140, 0, 0, 0, 0, 52,
	0, 540, -2, 0, 0, 0, 48, 49, 0, 0,
	0, 0, 0, 0, 529, 0, 0, 532, 0, 0,
	0, 0, 0, 0, 543, 0, 525, 0, 527, 528,
	61, 522, 0, 62, 0, 55, 0, 57, 91, 0,
	0, 837, 0, 348, 815, 816, 817, 813, 844, 0,
	0, 142, 0, 0, 834, 832, 0, 352, 352, 0,
	0, 358, 0, 381, 419, 0, 0, 0, 0, 0,
	688, 665, 738, 0, 234, 236, 245, 0, 837, 482,
	7, 11, 381, 781, 547, 0, 161, 20, 79, 0,
	84, 85, 837, 87, 837, 0, 90, 0, 0, 539,
	547, 0, 547, 51, 484, 800, 0, 487, 518, 520,
	0, 515, 530, 531, 533, 0, 535, 0, 537, 538,
	491, 492, 493, 0, 0, 0, 0, 526, 0, 804,
	56, 0, 0, 94, 95, 805, 806, 807, 0, 809,
	69, 76, 0, 148, 26, 0, 833, 381, 381, 25,
	383, 0, 417, 653, 657, 659, 661, 663, 0, 0,
	0, 0, 0, 0, 764, 766, 9, 760, 485, 0,
	0, 0, 0, 792, 0, 0, -2, 0, 0, 767,
	547, 47, 547, 0, 837, 512, 519, 837, 0, 513,
	837, 514, 534, 536, 505, 0, 0, 0, 0, 0,
	510, -2, 92, 93, 0, 0, 99, 837, 0, 835,
	836, 27, 28, 0, 664, 0, 0, 0, 412, 246,
	481, 0, 837, 762, 0, 80, 0, 0, 88, 40,
	0, 792, 782, 794, 796, 837, 36, 0, 788, 0,
	775, 46, 767, 801, 802, 516, 0, 521, 0, 0,
	0, 0, 524, 0, 96, 97, 98, 808, 0, 0,
	689, 0, 692, 483, 765, 35, 837, 837, 0, 0,
	41, 0, 797, -2, 0, 0, 0, 53, 45, 775,
	0, 0, 495, 497, 498, 499, 500, 501, 502, 503,
	504, 0, 0, 0, 543, 511, 21, 411, 690, 763,
	761, 0, 0, 795, 0, -2, 0, 790, 789, 44,
	517, 494, 0, 544, 545, 546, 493, 0, 81, 0,
	785, 36, 0, 496, 506, 0, 793, -2, 791, 691,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 391,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 392, 3, 393, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:425
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:426
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:434
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:439
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:459
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:479
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:500
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:516
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:533
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:553
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:568
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:579
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:591
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:618
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:632
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:659
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:684
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:690
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:704
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:718
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:756
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:774
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:783
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:798
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:813
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:819
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:823
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:829
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:833
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:840
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:852
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:864
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:874
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:880
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:893
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:894
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:898
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:902
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:907
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:911
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:917
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:921
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:925
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:929
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:935
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:952
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:962
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:977
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:984
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:991
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1006
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1016
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1038
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1045
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1074
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1103
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1113
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1134
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1141
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1145
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1156
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1160
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1180
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.str = SessionStr
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.str = GlobalStr
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1217
		{
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1218
		{
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1222
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1223
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1224
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1226
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1227
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1244
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1326
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1338
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1348
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1353
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1359
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1363
		{
			yyVAL.exprs = nil
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1364
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1367
		{
			yyVAL.empty = struct{}{}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.empty = struct{}{}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1372
		{
			yyVAL.bytes = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1380
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.bytes = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1389
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1393
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1397
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1401
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1405
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.expr = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1414
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1419
		{
			yyVAL.expr = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1423
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1428
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1432
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.bytes = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1441
		{
			yyVAL.bytes = nil
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1447
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1454
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1460
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1464
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1473
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1477
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1481
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1485
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1489
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1495
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1500
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1511
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1528
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1541
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1546
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1551
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1556
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1562
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1567
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1572
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1577
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1582
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1587
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1592
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1597
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1602
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1611
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1621
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1626
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1631
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1638
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1645
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1658
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1663
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1668
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1674
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1680
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1686
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1693
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1699
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1713
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1717
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1731
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1765
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1792
		{
			yyVAL.sequence = &Sequence{}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1796
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1801
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1806
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1811
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1816
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1821
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1826
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1831
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1836
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1841
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1846
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1851
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1856
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1863
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1892
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.bytes = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1998
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2120
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2195
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.optVal = nil
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2204
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2221
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2225
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2231
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2239
		{
			yyVAL.optVal = nil
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2247
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2260
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2264
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2287
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2291
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2332
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2336
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2360
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2370
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2383
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2387
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2391
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2395
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2407
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2419
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2430
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2440
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2444
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2460
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.indexPartition = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2478
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2484
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2488
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2504
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2508
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2512
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2516
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2520
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2524
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2528
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2544
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2584
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2589
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2596
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 409:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2603
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 410:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2610
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 411:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 412:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2641
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2645
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2653
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 417:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 418:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 419:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2761
		{
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2792
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2811
		{
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2812
		{
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2843
		{
			setAllowComments(yylex, true)
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.bytes2 = nil
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.str = UnionStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.str = UnionAllStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2871
		{
			yyVAL.str = UnionDistinctStr
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2876
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2884
		{
			yyVAL.str = SQLCacheStr
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.str = DistinctStr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = StraightJoinHint
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.selectExprs = nil
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2917
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2964
		{
			yyVAL.overExpr = nil
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2968
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 483:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.strs = []string{}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3032
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3036
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3058
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3062
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3086
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3091
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3095
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3130
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3138
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3142
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3179
		{
			yyVAL.str = JoinStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3183
		{
			yyVAL.str = JoinStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3187
		{
			yyVAL.str = JoinStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.str = StraightJoinStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3199
		{
			yyVAL.str = LeftJoinStr
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.str = LeftJoinStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.str = RightJoinStr
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.str = RightJoinStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.str = NaturalJoinStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3221
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.indexHints = nil
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3262
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3267
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3271
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.columns = nil
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3290
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3298
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3302
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3306
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3310
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.str = ""
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3330
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3340
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.str = IsNullStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.str = IsNotNullStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.str = IsTrueStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.str = IsNotTrueStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.str = IsFalseStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3427
		{
			yyVAL.str = IsNotFalseStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.str = EqualStr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.str = LessThanStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.str = GreaterThanStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.str = LessEqualStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.str = GreaterEqualStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.str = NotEqualStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.str = PosixRegexStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3469
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3473
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3478
		{
			yyVAL.expr = nil
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3482
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3496
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3508
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3618
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3626
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3640
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3648
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3656
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3733
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 653:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 657:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3765
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 661:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3769
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3773
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 663:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3777
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 664:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 665:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3789
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3793
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3861
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3875
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3887
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.str = ""
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.str = BooleanModeStr
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 691:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.str = QueryExpansionStr
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.expr = nil
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.str = string("")
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.expr = nil
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4139
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4143
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4168
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = &NullVal{}
		}
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.exprs = nil
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4206
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.expr = nil
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.orderBy = nil
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4246
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4250
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4256
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.str = AscScr
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4265
		{
			yyVAL.str = AscScr
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.str = DescScr
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4274
		{
			yyVAL.limit = nil
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.str = ""
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.str = ForUpdateStr
		}
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.str = ShareModeStr
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4316
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4320
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 785:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4325
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4333
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4344
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4348
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.updateExprs = nil
		}
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4367
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4371
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4387
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4393
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4403
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4413
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4419
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4423
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4429
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 808:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4442
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4452
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4465
		{
			yyVAL.bytes = []byte("charset")
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4472
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4476
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4480
		{
			yyVAL.expr = &Default{}
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4485
		{
			yyVAL.empty = struct{}{}
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4487
		{
			yyVAL.empty = struct{}{}
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4490
		{
			yyVAL.str = ""
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.str = IgnoreStr
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4503
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4507
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4511
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4517
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4522
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4529
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4535
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4539
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4543
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4553
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4563
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4567
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4574
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4581
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4585
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4592
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4598
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4602
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4775
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4784
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
