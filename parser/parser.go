// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const POSIX_REGEX = 57435
const POSIX_REGEX_CI = 57436
const POSIX_NOT_REGEX = 57437
const POSIX_NOT_REGEX_CI = 57438
const SHIFT_LEFT = 57439
const SHIFT_RIGHT = 57440
const DIV = 57441
const MOD = 57442
const UNARY = 57443
const COLLATE = 57444
const BINARY = 57445
const UNDERSCORE_BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const MATERIALIZED = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const PRIMARY = 57464
const COLUMN = 57465
const CONSTRAINT = 57466
const REFERENCES = 57467
const SPATIAL = 57468
const FULLTEXT = 57469
const FOREIGN = 57470
const KEY_BLOCK_SIZE = 57471
const POLICY = 57472
const WHILE = 57473
const UNIQUE = 57474
const KEY = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const TYPE = 57491
const STATUS = 57492
const VARIABLES = 57493
const RESTRICT = 57494
const CASCADE = 57495
const NO = 57496
const ACTION = 57497
const PERMISSIVE = 57498
const RESTRICTIVE = 57499
const PUBLIC = 57500
const CURRENT_USER = 57501
const SESSION_USER = 57502
const PAD_INDEX = 57503
const FILLFACTOR = 57504
const IGNORE_DUP_KEY = 57505
const STATISTICS_NORECOMPUTE = 57506
const STATISTICS_INCREMENTAL = 57507
const ALLOW_ROW_LOCKS = 57508
const ALLOW_PAGE_LOCKS = 57509
const DISTANCE = 57510
const M = 57511
const EUCLIDEAN = 57512
const COSINE = 57513
const BEFORE = 57514
const AFTER = 57515
const EACH = 57516
const ROW = 57517
const SCROLL = 57518
const CURSOR = 57519
const OPEN = 57520
const CLOSE = 57521
const FETCH = 57522
const PRIOR = 57523
const FIRST = 57524
const LAST = 57525
const DEALLOCATE = 57526
const INSTEAD = 57527
const OF = 57528
const DEFERRABLE = 57529
const INITIALLY = 57530
const IMMEDIATE = 57531
const DEFERRED = 57532
const CONCURRENTLY = 57533
const SQL = 57534
const SECURITY = 57535
const BEGIN = 57536
const START = 57537
const TRANSACTION = 57538
const COMMIT = 57539
const ROLLBACK = 57540
const BIT = 57541
const TINYINT = 57542
const SMALLINT = 57543
const SMALLSERIAL = 57544
const MEDIUMINT = 57545
const INT = 57546
const INTEGER = 57547
const SERIAL = 57548
const BIGINT = 57549
const BIGSERIAL = 57550
const INTNUM = 57551
const REAL = 57552
const DOUBLE = 57553
const PRECISION = 57554
const FLOAT_TYPE = 57555
const DECIMAL = 57556
const NUMERIC = 57557
const SMALLMONEY = 57558
const MONEY = 57559
const TIME = 57560
const TIMESTAMP = 57561
const DATETIME = 57562
const YEAR = 57563
const DATETIMEOFFSET = 57564
const DATETIME2 = 57565
const SMALLDATETIME = 57566
const CHAR = 57567
const VARCHAR = 57568
const VARYING = 57569
const BOOL = 57570
const CHARACTER = 57571
const VARBINARY = 57572
const NCHAR = 57573
const NVARCHAR = 57574
const NTEXT = 57575
const UUID = 57576
const TEXT = 57577
const TINYTEXT = 57578
const MEDIUMTEXT = 57579
const LONGTEXT = 57580
const CITEXT = 57581
const BLOB = 57582
const TINYBLOB = 57583
const MEDIUMBLOB = 57584
const LONGBLOB = 57585
const JSON = 57586
const JSONB = 57587
const ENUM = 57588
const GEOMETRY = 57589
const POINT = 57590
const LINESTRING = 57591
const POLYGON = 57592
const GEOMETRYCOLLECTION = 57593
const MULTIPOINT = 57594
const MULTILINESTRING = 57595
const MULTIPOLYGON = 57596
const VECTOR = 57597
const VARIADIC = 57598
const ARRAY = 57599
const NOW = 57600
const GETDATE = 57601
const BPCHAR = 57602
const TEXT_PATTERN_OPS = 57603
const NULLX = 57604
const AUTO_INCREMENT = 57605
const APPROXNUM = 57606
const SIGNED = 57607
const UNSIGNED = 57608
const ZEROFILL = 57609
const ZONE = 57610
const AUTOINCREMENT = 57611
const DATABASES = 57612
const TABLES = 57613
const VSCHEMA_TABLES = 57614
const EXTENDED = 57615
const FULL = 57616
const PROCESSLIST = 57617
const NAMES = 57618
const CHARSET = 57619
const GLOBAL = 57620
const SESSION = 57621
const ISOLATION = 57622
const LEVEL = 57623
const READ = 57624
const WRITE = 57625
const ONLY = 57626
const REPEATABLE = 57627
const COMMITTED = 57628
const UNCOMMITTED = 57629
const SERIALIZABLE = 57630
const NEW = 57631
const CONCAT_NULL_YIELDS_NULL = 57632
const CURSOR_CLOSE_ON_COMMIT = 57633
const QUOTED_IDENTIFIER = 57634
const ARITHABORT = 57635
const FMTONLY = 57636
const NOCOUNT = 57637
const NOEXEC = 57638
const NUMERIC_ROUNDABORT = 57639
const ANSI_DEFAULTS = 57640
const ANSI_NULL_DFLT_OFF = 57641
const ANSI_NULL_DFLT_ON = 57642
const ANSI_NULLS = 57643
const ANSI_PADDING = 57644
const ANSI_WARNINGS = 57645
const FORCEPLAN = 57646
const SHOWPLAN_ALL = 57647
const SHOWPLAN_TEXT = 57648
const SHOWPLAN_XML = 57649
const IMPLICIT_TRANSACTIONS = 57650
const REMOTE_PROC_TRANSACTIONS = 57651
const XACT_ABORT = 57652
const CURRENT_TIMESTAMP = 57653
const DATABASE = 57654
const CURRENT_DATE = 57655
const CURRENT_TIME = 57656
const LOCALTIME = 57657
const LOCALTIMESTAMP = 57658
const UTC_DATE = 57659
const UTC_TIME = 57660
const UTC_TIMESTAMP = 57661
const REPLACE = 57662
const CONVERT = 57663
const CAST = 57664
const SUBSTR = 57665
const SUBSTRING = 57666
const GROUP_CONCAT = 57667
const SEPARATOR = 57668
const INHERIT = 57669
const LEAD = 57670
const LAG = 57671
const MATCH = 57672
const AGAINST = 57673
const BOOLEAN = 57674
const LANGUAGE = 57675
const WITH = 57676
const WITHOUT = 57677
const PARSER = 57678
const QUERY = 57679
const EXPANSION = 57680
const UNUSED = 57681
const VIRTUAL = 57682
const STORED = 57683
const GENERATED = 57684
const ALWAYS = 57685
const IDENTITY = 57686
const SEQUENCE = 57687
const INCREMENT = 57688
const MINVALUE = 57689
const CACHE = 57690
const CYCLE = 57691
const OWNED = 57692
const NONE = 57693
const CLUSTERED = 57694
const NONCLUSTERED = 57695
const REPLICATION = 57696
const COLUMNSTORE = 57697
const INCLUDE = 57698
const HOLDLOCK = 57699
const NOLOCK = 57700
const NOWAIT = 57701
const PAGLOCK = 57702
const ROWLOCK = 57703
const TABLOCK = 57704
const UPDLOCK = 57705
const READUNCOMMITTED = 57706
const DEFINER = 57707
const INVOKER = 57708
const TYPECAST = 57709
const CHECK = 57710
const OVER = 57711

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	133, 411,
	-2, 149,
	-1, 45,
	122, 811,
	-2, 806,
	-1, 260,
	122, 814,
	-2, 810,
	-1, 416,
	61, 381,
	-2, 378,
	-1, 446,
	122, 812,
	-2, 240,
	-1, 566,
	122, 812,
	-2, 240,
	-1, 587,
	274, 821,
	-2, 719,
	-1, 637,
	274, 821,
	-2, 451,
	-1, 671,
	5, 36,
	-2, 14,
	-1, 677,
	5, 36,
	-2, 16,
	-1, 818,
	274, 821,
	-2, 451,
	-1, 990,
	274, 821,
	-2, 310,
	-1, 1066,
	274, 821,
	-2, 451,
	-1, 1127,
	60, 99,
	-2, 198,
	-1, 1130,
	60, 99,
	-2, 198,
	-1, 1184,
	5, 37,
	-2, 585,
	-1, 1263,
	5, 36,
	-2, 15,
	-1, 1278,
	194, 63,
	-2, 507,
	-1, 1319,
	60, 99,
	-2, 169,
	-1, 1457,
	89, 808,
	-2, 796,
	-1, 1548,
	57, 50,
	59, 50,
	-2, 52,
	-1, 1714,
	5, 36,
	-2, 767,
	-1, 1739,
	5, 36,
	-2, 59,
	-1, 1812,
	5, 37,
	-2, 768,
	-1, 1845,
	5, 36,
	-2, 770,
	-1, 1869,
	5, 37,
	-2, 771,
}

const yyPrivate = 57344

const yyLast = 9590

var yyAct = [...]int16{
	568, 549, 1732, 1821, 764, 1769, 1099, 1661, 1643, 1770,
	578, 765, 31, 1424, 1766, 1079, 1570, 1706, 41, 42,
	43, 1644, 1737, 1098, 1454, 1584, 1724, 869, 1583, 1246,
	1041, 1451, 68, 68, 68, 1631, 131, 134, 135, 684,
	1568, 1572, 1558, 1436, 1636, 896, 1095, 1282, 1448, 62,
	479, 1445, 1279, 1433, 1252, 1257, 1138, 884, 1110, 926,
	707, 31, 1186, 27, 408, 1437, 911, 1177, 213, 989,
	628, 539, 1442, 1074, 966, 1344, 1335, 61, 405, 1023,
	1059, 665, 256, 664, 939, 841, 560, 1026, 1235, 232,
	197, 69, 48, 845, 547, 64, 63, 808, 525, 417,
	247, 411, 548, 443, 161, 248, 140, 445, 451, 1365,
	129, 130, 180, 468, 156, 1318, 199, 983, 52, 9,
	532, 1236, 873, 1539, 34, 151, 1038, 195, 629, 1075,
	533, 153, 243, 244, 238, 735, 736, 737, 738, 739,
	740, 741, 734, 800, 734, 745, 893, 745, 257, 68,
	1134, 215, 216, 217, 218, 612, 257, 136, 745, 138,
	54, 713, 674, 615, 1123, 1113, 1112, 415, 412, 1871,
	150, 1802, 255, 418, 419, 1519, 1114, 55, 56, 50,
	403, 47, 431, 737, 738, 739, 740, 741, 734, 1115,
	1867, 745, 827, 441, 1388, 1389, 462, 1142, 394, 1758,
	1046, 1047, 1143, 552, 158, 237, 491, 492, 1512, 241,
	1733, 245, 246, 1859, 1421, 1180, 234, 1801, 253, 1378,
	1166, 1505, 57, 397, 1757, 1791, 260, 400, 396, 50,
	198, 47, 395, 1792, 1793, 1743, 1671, 499, 1742, 416,
	1488, 1744, 1672, 1673, 1542, 674, 858, 1123, 1113, 1112,
	1585, 459, 1586, 857, 435, 513, 177, 470, 779, 1114,
	201, 1372, 865, 214, 437, 203, 483, 484, 485, 486,
	1035, 1363, 1115, 472, 206, 45, 474, 47, 477, 478,
	656, 655, 455, 674, 227, 1123, 1113, 1112, 230, 1199,
	832, 447, 448, 449, 1121, 1797, 1197, 1114, 453, 452,
	450, 460, 461, 456, 1120, 458, 457, 728, 498, 731,
	1115, 487, 502, 503, 1684, 746, 747, 748, 749, 750,
	751, 752, 1470, 729, 730, 727, 753, 754, 755, 756,
	733, 732, 742, 743, 735, 736, 737, 738, 739, 740,
	741, 734, 1267, 490, 745, 674, 137, 1123, 1113, 1112,
	1687, 1116, 1117, 1119, 38, 1688, 132, 1118, 511, 1114,
	512, 34, 252, 1578, 527, 1429, 534, 1271, 1751, 1750,
	1685, 1266, 1115, 1603, 1600, 418, 419, 1121, 1094, 927,
	1518, 1447, 1520, 1350, 1701, 1345, 1346, 1120, 917, 733,
	732, 742, 743, 735, 736, 737, 738, 739, 740, 741,
	734, 1637, 257, 745, 680, 681, 1842, 174, 526, 231,
	1329, 744, 715, 744, 141, 1121, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 744, 1120, 522, 1858, 39, 614,
	714, 710, 692, 1308, 1116, 1117, 1119, 34, 546, 1364,
	1118, 434, 531, 433, 34, 462, 214, 744, 425, 693,
	1271, 1390, 428, 413, 870, 891, 674, 744, 1123, 1113,
	1112, 1135, 1136, 517, 695, 426, 1609, 175, 175, 154,
	1114, 519, 1116, 1117, 1119, 418, 419, 1121, 1118, 1383,
	176, 617, 705, 1115, 424, 705, 1623, 1120, 1271, 524,
	1137, 1866, 1143, 1124, 1511, 828, 1602, 177, 45, 724,
	47, 667, 454, 459, 518, 1345, 1346, 1795, 133, 671,
	53, 677, 685, 535, 496, 257, 690, 523, 694, 157,
	1756, 630, 257, 642, 28, 644, 686, 611, 647, 648,
	613, 455, 489, 527, 1116, 1117, 1119, 440, 526, 689,
	1118, 618, 643, 1269, 616, 33, 698, 453, 625, 1446,
	1394, 877, 627, 505, 40, 456, 176, 458, 457, 464,
	463, 1736, 1396, 672, 1573, 672, 493, 708, 709, 711,
	34, 1735, 32, 177, 668, 44, 1124, 414, 1734, 422,
	423, 37, 682, 58, 142, 143, 36, 666, 1121, 35,
	712, 1309, 1310, 1311, 1662, 1664, 51, 144, 1120, 1523,
	50, 520, 1575, 1391, 399, 672, 6, 7, 1863, 420,
	744, 768, 769, 687, 1124, 1815, 683, 1704, 763, 719,
	688, 685, 1588, 1400, 676, 696, 1835, 1063, 783, 782,
	68, 1411, 640, 716, 514, 149, 1702, 780, 147, 481,
	480, 257, 176, 650, 723, 1116, 1117, 1119, 168, 844,
	167, 1118, 171, 172, 175, 722, 721, 1745, 169, 177,
	825, 1271, 667, 862, 1428, 852, 722, 721, 721, 744,
	685, 526, 723, 1469, 1722, 1587, 1124, 1663, 1157, 836,
	875, 1156, 823, 723, 723, 1155, 674, 1154, 1123, 1113,
	1112, 946, 890, 813, 853, 1153, 892, 814, 1152, 1571,
	1114, 651, 1151, 526, 1150, 944, 945, 943, 33, 867,
	722, 721, 821, 1115, 1149, 614, 1148, 1382, 1146, 526,
	1380, 854, 1027, 856, 1216, 1748, 1681, 723, 1096, 453,
	831, 1132, 1027, 34, 672, 1130, 863, 410, 940, 802,
	803, 804, 805, 806, 807, 861, 207, 759, 666, 876,
	1060, 919, 868, 1262, 1392, 1393, 1395, 1397, 1398, 152,
	915, 1129, 971, 970, 843, 849, 851, 146, 1683, 980,
	980, 977, 914, 1493, 724, 430, 410, 918, 982, 916,
	1128, 173, 1336, 257, 257, 410, 34, 1124, 1062, 887,
	1513, 912, 913, 722, 721, 971, 1028, 409, 1622, 1621,
	924, 910, 1207, 1337, 722, 721, 839, 984, 985, 1413,
	723, 471, 1517, 724, 1336, 921, 920, 1461, 1121, 672,
	421, 723, 410, 1042, 210, 672, 1516, 212, 1120, 429,
	672, 942, 722, 721, 1515, 1337, 965, 1682, 763, 1514,
	814, 962, 964, 722, 721, 1347, 1191, 1061, 1190, 723,
	1412, 1061, 1167, 1168, 1169, 476, 722, 721, 1338, 475,
	723, 260, 1334, 978, 981, 471, 1050, 667, 722, 721,
	722, 721, 1502, 723, 619, 1116, 1117, 1119, 1042, 1229,
	1573, 1118, 1020, 1021, 838, 723, 1097, 723, 860, 471,
	1127, 859, 421, 631, 170, 50, 624, 47, 722, 721,
	826, 637, 638, 639, 1037, 1067, 497, 1068, 1093, 1592,
	495, 986, 987, 724, 494, 723, 50, 1022, 1575, 722,
	721, 467, 674, 526, 931, 933, 934, 1052, 1432, 421,
	1083, 941, 932, 45, 781, 47, 723, 1619, 1546, 34,
	1140, 1591, 1187, 675, 1036, 675, 1039, 1040, 781, 50,
	1076, 47, 1147, 666, 940, 855, 674, 733, 732, 742,
	743, 735, 736, 737, 738, 739, 740, 741, 734, 1054,
	50, 745, 47, 717, 421, 33, 488, 50, 50, 47,
	47, 758, 760, 761, 762, 766, 50, 967, 1575, 968,
	436, 34, 771, 771, 771, 771, 771, 771, 771, 34,
	34, 1062, 32, 1144, 1162, 1126, 969, 637, 421, 870,
	649, 34, 885, 724, 1131, 1852, 1851, 1124, 784, 785,
	786, 787, 788, 789, 790, 791, 30, 794, 1173, 796,
	797, 798, 799, 801, 801, 801, 801, 801, 801, 801,
	610, 817, 818, 819, 820, 1560, 1563, 1564, 1565, 1561,
	780, 1562, 1566, 1763, 724, 1725, 1726, 885, 1850, 1225,
	1838, 1061, 609, 576, 257, 1790, 724, 1681, 1814, 724,
	1225, 1759, 1165, 667, 526, 159, 702, 1691, 1555, 724,
	702, 1605, 46, 49, 1196, 702, 1604, 724, 984, 1260,
	608, 1552, 885, 1530, 1200, 702, 1484, 1263, 1225, 1483,
	1480, 1479, 720, 607, 1227, 1270, 637, 1250, 702, 1474,
	1259, 702, 1473, 1215, 675, 1278, 49, 1304, 1305, 1306,
	702, 1404, 49, 536, 1272, 702, 1355, 1403, 1319, 1127,
	1127, 1319, 1127, 1127, 526, 526, 427, 1553, 1273, 1551,
	1330, 1237, 260, 672, 1333, 1243, 1239, 941, 1317, 1234,
	1213, 672, 1242, 1240, 1241, 1245, 1244, 1055, 724, 666,
	1249, 1042, 526, 1225, 1224, 771, 771, 1261, 771, 771,
	771, 771, 771, 771, 771, 771, 771, 771, 771, 771,
	771, 771, 771, 702, 1164, 702, 1078, 1232, 1332, 885,
	1077, 1353, 1312, 1315, 975, 724, 49, 1231, 1316, 675,
	49, 1767, 49, 49, 1721, 766, 885, 1045, 129, 49,
	766, 261, 1071, 261, 49, 1325, 1326, 1070, 49, 1351,
	1352, 1125, 1358, 1356, 510, 1251, 1384, 1339, 1340, 1341,
	1342, 1343, 1069, 1349, 1274, 1275, 1276, 744, 1280, 1632,
	674, 1379, 1359, 1354, 1320, 1321, 1322, 1323, 1324, 685,
	702, 925, 702, 701, 674, 49, 660, 659, 1366, 465,
	1367, 1632, 1043, 1371, 653, 654, 1369, 1712, 653, 652,
	60, 59, 1713, 1402, 1425, 1416, 1426, 1373, 1211, 1270,
	1247, 257, 1640, 1265, 1551, 1225, 1844, 1721, 1407, 1430,
	1423, 1066, 421, 1051, 1721, 1427, 1554, 1209, 864, 49,
	870, 840, 833, 49, 49, 886, 421, 830, 1462, 1055,
	1084, 1357, 657, 646, 1500, 724, 645, 1435, 641, 1467,
	1319, 509, 1555, 1408, 510, 1415, 1210, 1555, 526, 526,
	34, 569, 979, 567, 571, 572, 573, 574, 1431, 510,
	1810, 570, 575, 674, 1055, 1208, 975, 1555, 1434, 1225,
	1670, 1580, 1443, 1414, 1055, 1192, 885, 702, 1460, 733,
	732, 742, 743, 735, 736, 737, 738, 739, 740, 741,
	734, 829, 658, 745, 1471, 771, 771, 771, 662, 661,
	421, 1785, 771, 771, 771, 771, 1783, 1754, 1725, 1726,
	1419, 1620, 203, 1405, 1477, 421, 1328, 1409, 1327, 1248,
	233, 257, 1161, 1160, 1133, 1073, 1072, 1049, 922, 1475,
	1476, 889, 866, 822, 1486, 718, 1481, 1482, 670, 669,
	636, 635, 633, 1066, 620, 689, 537, 1524, 1489, 771,
	1270, 1541, 500, 1527, 1270, 1426, 228, 442, 1531, 438,
	202, 407, 235, 236, 1577, 1508, 68, 1509, 1510, 226,
	257, 220, 219, 208, 11, 515, 1507, 1590, 1767, 1139,
	1728, 1228, 1529, 663, 501, 240, 1532, 239, 145, 139,
	1536, 1537, 850, 1731, 541, 1425, 1655, 1425, 526, 1607,
	1440, 1656, 1596, 1653, 1598, 1544, 1549, 1657, 1654, 1564,
	1565, 1730, 1567, 1597, 1652, 1579, 1576, 1651, 1581, 1839,
	672, 1800, 1485, 1630, 1547, 1548, 1088, 1089, 465, 1594,
	1533, 795, 406, 1253, 204, 1593, 482, 209, 1599, 623,
	211, 1808, 1595, 675, 912, 913, 1608, 398, 1254, 254,
	1447, 675, 1092, 1085, 622, 508, 1086, 221, 222, 223,
	224, 225, 1611, 506, 504, 1538, 148, 1635, 1024, 1526,
	1667, 1528, 1472, 1029, 883, 971, 1645, 679, 530, 1606,
	1080, 1807, 1625, 1521, 465, 49, 1081, 879, 870, 880,
	881, 882, 1806, 49, 977, 1765, 1247, 249, 250, 251,
	1159, 257, 878, 1627, 1466, 1465, 1464, 1463, 1860, 257,
	1410, 1641, 1158, 1639, 1387, 1386, 1042, 529, 528, 1646,
	432, 872, 1649, 1541, 1270, 1541, 874, 1550, 691, 1658,
	888, 1669, 1668, 1677, 8, 1666, 1, 771, 771, 1638,
	1281, 1042, 1647, 1648, 1642, 1650, 1679, 13, 672, 12,
	1705, 1610, 242, 1185, 778, 564, 1686, 1601, 550, 744,
	1678, 1714, 1820, 1444, 1277, 1440, 473, 771, 771, 771,
	771, 1703, 1560, 1563, 1564, 1565, 1561, 1307, 1562, 1566,
	1348, 1709, 466, 182, 1230, 439, 1738, 1694, 15, 1717,
	1420, 1719, 1739, 1710, 1628, 1399, 1729, 1264, 1629, 1720,
	678, 1718, 1693, 507, 1331, 894, 1708, 704, 1635, 1426,
	165, 1425, 155, 697, 401, 672, 1740, 29, 1749, 10,
	1145, 848, 848, 848, 166, 257, 164, 163, 162, 160,
	469, 200, 205, 971, 1645, 1441, 1775, 1738, 229, 67,
	1773, 1768, 971, 1645, 1771, 465, 672, 49, 65, 1760,
	66, 70, 1449, 1762, 837, 1589, 516, 1058, 757, 1776,
	49, 1741, 1456, 1780, 1774, 1777, 1752, 1753, 1778, 1256,
	1779, 1689, 1690, 1805, 1440, 1042, 1541, 1764, 1214, 1440,
	1440, 1440, 1440, 1440, 792, 1025, 551, 930, 563, 1478,
	562, 1796, 561, 1440, 672, 1711, 726, 1439, 1545, 1559,
	1557, 1804, 1556, 1809, 685, 1799, 1727, 685, 685, 685,
	1723, 1834, 1438, 1817, 1504, 1700, 1087, 1418, 1111, 771,
	871, 1090, 5, 1270, 1425, 1635, 1833, 1818, 1122, 1109,
	4, 1836, 3, 1108, 1107, 1847, 1848, 1503, 1845, 1841,
	1843, 1771, 1106, 1819, 1104, 46, 1830, 1831, 1832, 1105,
	1102, 1103, 1101, 1082, 1849, 673, 1440, 2, 0, 0,
	0, 1856, 1426, 1541, 1440, 0, 261, 0, 848, 848,
	1861, 1862, 848, 848, 848, 1771, 1864, 0, 46, 1865,
	0, 971, 1645, 0, 1870, 972, 973, 974, 976, 1868,
	0, 0, 672, 0, 0, 0, 0, 0, 0, 0,
	1569, 848, 848, 848, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 0, 0, 0, 632, 634, 1030,
	1031, 1032, 1033, 0, 1034, 672, 848, 0, 0, 0,
	0, 621, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 674, 0, 1123, 1113, 1112, 1044, 0, 0,
	465, 0, 771, 0, 0, 771, 1114, 771, 0, 771,
	0, 771, 771, 0, 1053, 0, 1056, 1057, 0, 1115,
	0, 0, 1064, 0, 1065, 0, 674, 0, 1123, 1113,
	1112, 0, 0, 0, 0, 0, 0, 703, 706, 0,
	1114, 0, 0, 674, 0, 1123, 1113, 1112, 1091, 0,
	0, 0, 0, 1115, 0, 0, 0, 1114, 0, 1441,
	0, 0, 0, 0, 1441, 1441, 1441, 1441, 1441, 0,
	1115, 0, 0, 0, 1680, 0, 0, 0, 1569, 0,
	1665, 0, 0, 725, 0, 0, 0, 0, 0, 767,
	0, 0, 0, 0, 0, 0, 1163, 0, 770, 772,
	773, 774, 775, 776, 777, 674, 0, 1123, 1113, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 1121, 1857, 0, 0, 0, 0,
	793, 0, 1115, 0, 1120, 0, 0, 0, 0, 0,
	0, 1441, 1181, 1182, 0, 1715, 1716, 0, 0, 1441,
	1184, 0, 0, 0, 0, 0, 0, 848, 1121, 1188,
	1189, 0, 824, 1219, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 1121, 675, 0, 703, 0,
	846, 1116, 1117, 1119, 0, 1120, 0, 1118, 0, 848,
	0, 0, 0, 0, 0, 1212, 0, 261, 0, 0,
	848, 1218, 0, 0, 0, 0, 465, 0, 0, 1220,
	1221, 0, 1222, 1223, 0, 1116, 1117, 1119, 0, 0,
	0, 1118, 1772, 0, 675, 0, 0, 1233, 0, 0,
	0, 1271, 1116, 1117, 1119, 0, 0, 1121, 1118, 0,
	94, 0, 0, 1786, 1787, 1788, 0, 1120, 1498, 742,
	743, 735, 736, 737, 738, 739, 740, 741, 734, 49,
	923, 745, 0, 0, 928, 929, 0, 0, 34, 0,
	0, 935, 0, 0, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 724,
	0, 0, 0, 0, 1116, 1117, 1119, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 767,
	0, 0, 0, 0, 767, 0, 0, 0, 0, 1772,
	0, 0, 1846, 1124, 0, 0, 79, 0, 835, 988,
	1019, 1496, 724, 733, 732, 742, 743, 735, 736, 737,
	738, 739, 740, 741, 734, 0, 0, 745, 0, 0,
	0, 0, 0, 1772, 0, 675, 0, 1124, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 1681, 1124, 0, 733, 732, 742, 743,
	735, 736, 737, 738, 739, 740, 741, 734, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 1385,
	0, 0, 0, 0, 0, 0, 0, 1269, 0, 49,
	49, 0, 0, 0, 0, 1401, 0, 0, 0, 0,
	0, 0, 0, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 1417, 122, 123, 1124, 124, 125, 126,
	128, 127, 96, 97, 98, 102, 100, 99, 101, 73,
	75, 0, 71, 74, 80, 76, 77, 78, 92, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	93, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	0, 1170, 1171, 1172, 834, 0, 1798, 0, 0, 1174,
	1175, 1176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1193, 1194, 0, 1195, 0, 0, 0, 0, 1198,
	0, 0, 0, 0, 0, 0, 0, 49, 1183, 0,
	0, 1201, 1202, 0, 0, 1203, 1204, 744, 1205, 1206,
	674, 0, 1123, 1113, 1112, 770, 0, 0, 0, 0,
	1490, 0, 1491, 1492, 1114, 0, 1494, 1495, 1497, 1499,
	1501, 0, 848, 0, 192, 0, 72, 1115, 0, 0,
	195, 196, 0, 1360, 0, 49, 49, 0, 0, 0,
	1217, 0, 1522, 0, 0, 49, 1574, 0, 0, 0,
	0, 0, 724, 0, 0, 183, 1226, 733, 732, 742,
	743, 735, 736, 737, 738, 739, 740, 741, 734, 0,
	190, 745, 178, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1255, 1258, 0, 733, 732, 742, 743,
	735, 736, 737, 738, 739, 740, 741, 734, 0, 1268,
	745, 732, 742, 743, 735, 736, 737, 738, 739, 740,
	741, 734, 0, 0, 745, 1624, 744, 0, 0, 0,
	26, 0, 1121, 0, 1314, 1313, 0, 0, 186, 0,
	181, 191, 1120, 0, 0, 0, 0, 1618, 188, 187,
	49, 0, 0, 0, 49, 49, 0, 0, 46, 49,
	49, 49, 49, 49, 0, 0, 0, 1626, 0, 0,
	0, 1659, 0, 49, 0, 0, 0, 1574, 0, 0,
	0, 0, 897, 21, 0, 16, 909, 0, 0, 1116,
	1117, 1119, 0, 1361, 1362, 1118, 899, 0, 17, 0,
	24, 0, 0, 0, 0, 1370, 0, 0, 0, 0,
	0, 1660, 0, 49, 0, 0, 18, 19, 0, 0,
	0, 0, 0, 1374, 1375, 1376, 1377, 0, 0, 1381,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
	1692, 0, 0, 0, 0, 1695, 1696, 1697, 1698, 1699,
	1406, 0, 0, 0, 0, 809, 0, 0, 0, 0,
	0, 898, 0, 0, 0, 0, 0, 0, 1422, 184,
	0, 0, 0, 0, 0, 185, 0, 0, 733, 732,
	742, 743, 735, 736, 737, 738, 739, 740, 741, 734,
	811, 0, 745, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 14, 0, 46, 0, 0, 0, 0,
	0, 1124, 0, 0, 0, 0, 0, 744, 0, 1178,
	0, 0, 0, 1755, 0, 0, 0, 0, 1761, 1193,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	194, 0, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 0, 0, 0, 1487, 744, 0, 0, 0,
	1789, 1540, 0, 812, 189, 0, 0, 0, 0, 0,
	744, 71, 810, 1574, 0, 1506, 0, 816, 815, 897,
	0, 0, 0, 909, 1179, 1803, 0, 0, 20, 0,
	0, 0, 0, 899, 0, 1811, 1812, 1813, 0, 1816,
	22, 23, 0, 25, 0, 1534, 1535, 1258, 733, 732,
	742, 743, 735, 736, 737, 738, 739, 740, 741, 734,
	0, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 732, 742, 743, 735, 736, 737, 738, 739,
	740, 741, 734, 0, 46, 745, 0, 0, 0, 0,
	0, 0, 0, 1853, 1854, 1855, 895, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1869, 0, 0, 1612, 0,
	0, 1613, 0, 1614, 0, 1615, 0, 1616, 1617, 0,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 0,
	0, 0, 0, 0, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 1633, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 0, 0, 0, 388, 744, 343,
	0, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1676, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 271, 274, 389, 375, 302, 303, 0, 0,
	0, 0, 0, 0, 0, 329, 334, 359, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1707, 0,
	0, 299, 0, 341, 0, 0, 0, 278, 272, 0,
	326, 809, 0, 0, 281, 0, 300, 360, 0, 262,
	365, 372, 323, 0, 0, 376, 320, 319, 0, 0,
	0, 0, 0, 0, 312, 259, 356, 391, 380, 331,
	370, 297, 306, 0, 304, 0, 811, 0, 340, 354,
	0, 0, 0, 1141, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 363, 366, 286, 350, 275, 308, 357, 309, 332,
	291, 744, 0, 0, 0, 1781, 0, 0, 1782, 0,
	0, 1784, 1450, 0, 0, 0, 0, 0, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 1794, 122,
	123, 0, 124, 125, 126, 128, 127, 0, 963, 812,
	0, 0, 0, 0, 0, 1458, 1707, 71, 810, 0,
	0, 0, 0, 816, 815, 767, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 0, 0, 268,
	0, 0, 0, 0, 0, 269, 290, 373, 0, 1840,
	767, 0, 1459, 1457, 1453, 1452, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 289, 283,
	284, 336, 337, 385, 386, 387, 361, 280, 0, 287,
	288, 0, 368, 0, 0, 0, 339, 0, 0, 0,
	392, 72, 0, 0, 0, 0, 0, 0, 314, 264,
	318, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	0, 0, 322, 317, 344, 346, 355, 364, 374, 382,
	358, 294, 328, 379, 367, 0, 325, 381, 295, 313,
	390, 315, 316, 352, 273, 335, 0, 310, 292, 0,
	0, 0, 298, 266, 305, 267, 296, 327, 0, 293,
	0, 369, 338, 0, 0, 0, 388, 0, 343, 0,
	0, 0, 0, 0, 330, 371, 333, 362, 324, 353,
	282, 342, 383, 311, 348, 384, 0, 0, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 377, 307, 279, 393, 0, 351, 265, 345,
	0, 271, 274, 389, 375, 302, 303, 0, 0, 0,
	0, 0, 0, 0, 329, 334, 359, 321, 0, 0,
	0, 0, 0, 0, 1368, 0, 0, 0, 0, 0,
	299, 0, 341, 0, 0, 0, 278, 272, 0, 326,
	0, 0, 0, 281, 0, 300, 360, 0, 262, 365,
	372, 323, 0, 0, 376, 320, 319, 0, 0, 992,
	0, 0, 0, 312, 259, 356, 391, 380, 331, 370,
	297, 306, 0, 304, 0, 0, 0, 340, 354, 0,
	0, 0, 0, 0, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 263, 301,
	363, 366, 286, 350, 275, 308, 357, 309, 332, 291,
	0, 1001, 1007, 1005, 0, 0, 1002, 0, 0, 1000,
	0, 1582, 1009, 0, 0, 1008, 994, 1004, 1006, 1003,
	998, 0, 993, 0, 1011, 1010, 1012, 991, 1014, 0,
	0, 0, 1018, 1015, 1017, 1016, 0, 1013, 0, 0,
	0, 0, 0, 0, 1458, 0, 995, 996, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 999, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 269, 290, 373, 0, 0, 0,
	0, 1459, 1457, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 289, 283, 284,
	336, 337, 385, 386, 387, 361, 280, 0, 287, 288,
	0, 368, 0, 0, 0, 339, 0, 626, 0, 392,
	45, 0, 446, 447, 448, 449, 0, 314, 264, 318,
	0, 452, 450, 460, 461, 0, 0, 276, 277, 0,
	0, 322, 317, 344, 346, 355, 364, 374, 382, 358,
	294, 328, 379, 367, 0, 325, 381, 295, 313, 390,
	315, 316, 352, 273, 335, 0, 310, 292, 0, 0,
	0, 298, 266, 305, 267, 296, 327, 0, 293, 0,
	369, 338, 0, 0, 0, 388, 0, 343, 0, 0,
	0, 0, 0, 330, 371, 333, 362, 324, 353, 282,
	342, 383, 311, 348, 384, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 377, 307, 279, 393, 0, 351, 265, 345, 0,
	271, 274, 389, 375, 302, 303, 0, 0, 0, 0,
	0, 0, 0, 329, 334, 359, 321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 341, 0, 0, 0, 278, 272, 0, 326, 0,
	0, 0, 281, 0, 300, 360, 0, 262, 365, 372,
	323, 0, 0, 376, 320, 319, 0, 0, 0, 0,
	0, 0, 312, 259, 356, 391, 380, 331, 370, 297,
	306, 0, 304, 0, 0, 0, 340, 354, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 454, 459, 270, 263, 301, 363,
	366, 286, 350, 275, 308, 357, 309, 332, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 456, 0, 458,
	457, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 464, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 269, 290, 373, 0, 0, 0, 0,
	1459, 1457, 0, 0, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 289, 283, 284, 336,
	337, 385, 386, 387, 361, 280, 0, 287, 288, 0,
	368, 0, 0, 0, 339, 0, 0, 0, 392, 0,
	0, 0, 0, 0, 0, 0, 314, 264, 318, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 0, 0,
	322, 317, 344, 346, 355, 364, 374, 382, 358, 294,
	328, 379, 367, 0, 325, 381, 295, 313, 390, 315,
	316, 352, 273, 335, 0, 310, 292, 0, 0, 0,
	298, 266, 305, 267, 296, 327, 0, 293, 0, 369,
	338, 0, 94, 0, 388, 33, 343, 0, 0, 0,
	0, 0, 330, 371, 333, 362, 324, 353, 282, 342,
	383, 311, 348, 384, 0, 0, 0, 45, 1132, 47,
	34, 0, 1130, 0, 0, 0, 0, 0, 0, 347,
	377, 307, 279, 393, 0, 351, 265, 345, 0, 271,
	274, 389, 375, 302, 303, 0, 0, 0, 1129, 0,
	0, 0, 329, 334, 359, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1238, 1128, 299, 0,
	341, 0, 0, 0, 278, 272, 0, 326, 79, 0,
	0, 281, 0, 300, 360, 0, 262, 365, 372, 323,
	0, 0, 376, 320, 319, 0, 0, 0, 0, 0,
	0, 312, 259, 356, 391, 380, 331, 370, 297, 306,
	0, 304, 0, 95, 0, 340, 354, 0, 0, 0,
	0, 0, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 263, 301, 363, 366,
	286, 350, 275, 308, 357, 309, 332, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 0, 122, 123, 0, 124,
	125, 126, 128, 127, 96, 97, 98, 102, 100, 99,
	101, 73, 75, 0, 71, 74, 80, 76, 77, 78,
	92, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 93, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 269, 290, 373, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 289, 283, 284, 336, 337,
	385, 386, 387, 361, 280, 0, 287, 288, 0, 368,
	0, 0, 0, 339, 0, 0, 0, 392, 72, 0,
	0, 0, 0, 0, 0, 314, 264, 318, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 0, 0, 322,
	317, 344, 346, 355, 364, 374, 382, 358, 294, 328,
	379, 367, 0, 325, 381, 295, 313, 390, 315, 316,
	352, 273, 335, 0, 310, 292, 0, 0, 0, 298,
	266, 305, 267, 296, 327, 0, 293, 0, 369, 338,
	0, 94, 0, 388, 0, 343, 0, 0, 0, 0,
	0, 330, 371, 333, 362, 324, 353, 282, 342, 383,
	311, 348, 384, 0, 0, 0, 34, 0, 699, 34,
	700, 0, 0, 0, 0, 0, 0, 0, 347, 377,
	307, 279, 393, 0, 351, 265, 345, 0, 271, 274,
	389, 375, 302, 303, 0, 0, 0, 0, 0, 0,
	0, 329, 334, 359, 321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 341,
	0, 0, 0, 278, 272, 0, 326, 79, 0, 0,
	281, 0, 300, 360, 0, 262, 365, 372, 323, 0,
	0, 376, 320, 319, 0, 0, 0, 0, 0, 0,
	312, 259, 356, 391, 380, 331, 370, 297, 306, 0,
	304, 0, 95, 0, 340, 354, 0, 0, 0, 0,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 263, 301, 363, 366, 286,
	350, 275, 308, 357, 309, 332, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 0, 122, 123, 0, 124, 125,
	126, 128, 127, 96, 97, 98, 102, 100, 99, 101,
	73, 75, 0, 71, 74, 80, 76, 77, 78, 92,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 93, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 0, 0, 0, 674, 268, 1123, 1113, 1112, 0,
	0, 269, 290, 373, 0, 0, 0, 0, 1114, 258,
	0, 0, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 289, 283, 284, 336, 337, 385,
	386, 387, 361, 280, 0, 287, 288, 0, 368, 0,
	0, 0, 339, 0, 0, 0, 392, 72, 0, 0,
	0, 0, 0, 0, 314, 264, 318, 0, 0, 0,
	0, 0, 0, 0, 276, 277, 0, 0, 322, 317,
	344, 346, 355, 364, 374, 382, 358, 294, 328, 379,
	367, 0, 325, 381, 295, 313, 390, 315, 316, 352,
	273, 335, 0, 310, 292, 0, 0, 0, 298, 266,
	305, 267, 296, 327, 0, 293, 1121, 369, 338, 0,
	0, 0, 388, 0, 343, 0, 1120, 0, 0, 0,
	330, 371, 333, 362, 324, 353, 282, 342, 383, 311,
	348, 384, 0, 402, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 404, 0, 347, 377, 307,
	279, 393, 0, 351, 265, 345, 0, 271, 274, 389,
	375, 302, 303, 1116, 1117, 1119, 0, 0, 0, 1118,
	329, 334, 359, 321, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 299, 0, 341, 0,
	0, 0, 278, 272, 0, 326, 0, 0, 0, 281,
	0, 300, 360, 0, 262, 365, 372, 323, 0, 0,
	376, 320, 319, 0, 0, 0, 0, 0, 0, 312,
	259, 356, 391, 380, 331, 370, 297, 306, 0, 304,
	0, 0, 0, 340, 354, 0, 0, 0, 0, 0,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 263, 301, 363, 366, 286, 350,
	275, 308, 357, 309, 332, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 268, 1123, 1113, 1112, 0, 0,
	269, 290, 373, 0, 0, 0, 0, 1114, 258, 0,
	0, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	1115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 289, 283, 284, 336, 337, 385, 386,
	387, 361, 280, 0, 287, 288, 0, 368, 0, 0,
	0, 339, 0, 444, 0, 392, 45, 0, 446, 447,
	448, 449, 0, 314, 264, 318, 0, 452, 450, 460,
	461, 0, 0, 276, 277, 0, 0, 322, 317, 344,
	346, 355, 364, 374, 382, 358, 294, 328, 379, 367,
	0, 325, 381, 295, 313, 390, 315, 316, 352, 273,
	335, 0, 310, 292, 0, 0, 0, 298, 266, 305,
	267, 296, 327, 0, 293, 1121, 369, 338, 0, 0,
	0, 388, 0, 343, 0, 1120, 0, 0, 0, 330,
	371, 333, 362, 324, 353, 282, 342, 383, 311, 348,
	384, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 377, 307, 279,
	393, 0, 351, 265, 345, 0, 271, 274, 389, 375,
	302, 303, 1116, 1117, 1119, 0, 0, 0, 1118, 329,
	334, 359, 321, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 1525, 0, 299, 0, 341, 0, 0,
	0, 278, 272, 0, 326, 0, 0, 0, 281, 0,
	300, 360, 0, 262, 365, 372, 323, 0, 0, 376,
	320, 319, 0, 0, 0, 0, 0, 0, 312, 259,
	356, 391, 380, 331, 370, 297, 306, 0, 304, 0,
	0, 0, 340, 354, 0, 0, 0, 0, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 459, 270, 263, 301, 363, 366, 286, 350, 275,
	308, 357, 309, 332, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	1123, 1113, 1112, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 1114, 456, 0, 458, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 0, 0, 0, 0,
	464, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 269,
	290, 373, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 1747,
	1746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 289, 283, 284, 336, 337, 385, 386, 387,
	361, 280, 0, 287, 288, 0, 368, 0, 0, 0,
	339, 0, 0, 0, 392, 0, 0, 0, 0, 0,
	1121, 0, 314, 264, 318, 0, 0, 0, 0, 0,
	1120, 0, 276, 277, 0, 0, 322, 317, 344, 346,
	355, 364, 374, 382, 358, 294, 328, 379, 367, 0,
	325, 381, 295, 313, 390, 315, 316, 352, 273, 335,
	0, 310, 292, 0, 0, 0, 298, 266, 305, 267,
	296, 327, 0, 293, 0, 369, 338, 1116, 1117, 1119,
	388, 0, 343, 1118, 0, 0, 0, 0, 330, 371,
	333, 362, 324, 353, 282, 342, 383, 311, 348, 384,
	0, 0, 0, 45, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 377, 307, 279, 393,
	0, 351, 265, 345, 0, 271, 274, 389, 375, 302,
	303, 0, 0, 0, 0, 0, 0, 0, 329, 334,
	359, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 341, 0, 0, 0,
	278, 272, 0, 326, 0, 0, 0, 281, 0, 300,
	360, 0, 262, 365, 372, 323, 0, 0, 376, 320,
	319, 0, 0, 0, 0, 0, 0, 312, 259, 356,
	391, 380, 331, 370, 297, 306, 0, 304, 0, 0,
	0, 340, 354, 0, 0, 0, 0, 0, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 263, 301, 363, 366, 286, 350, 275, 308,
	357, 309, 332, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 1123,
	1113, 1112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 0, 269, 290,
	373, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 1837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 289, 283, 284, 336, 337, 385, 386, 387, 361,
	280, 0, 287, 288, 0, 368, 0, 0, 0, 339,
	0, 0, 0, 392, 0, 0, 0, 0, 0, 1121,
	0, 314, 264, 318, 0, 0, 0, 0, 0, 1120,
	0, 276, 277, 0, 0, 322, 317, 344, 346, 355,
	364, 374, 382, 358, 294, 328, 379, 367, 0, 325,
	381, 295, 313, 390, 315, 316, 352, 273, 335, 0,
	310, 292, 0, 0, 0, 298, 266, 305, 267, 296,
	327, 0, 293, 0, 369, 338, 1116, 1117, 1119, 388,
	0, 343, 1118, 0, 0, 0, 0, 330, 371, 333,
	362, 324, 353, 282, 342, 383, 311, 348, 384, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 377, 307, 279, 393, 0,
	351, 265, 345, 0, 271, 274, 389, 375, 302, 303,
	521, 0, 0, 0, 0, 0, 0, 329, 334, 359,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 341, 0, 0, 0, 278,
	272, 0, 326, 0, 0, 0, 281, 0, 300, 360,
	0, 262, 365, 372, 323, 0, 0, 376, 320, 319,
	0, 0, 0, 0, 0, 0, 312, 259, 356, 391,
	380, 331, 370, 297, 306, 0, 304, 0, 0, 0,
	340, 354, 0, 0, 0, 0, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 263, 301, 363, 366, 286, 350, 275, 308, 357,
	309, 332, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 1123, 1113,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 268, 1123, 1113, 1112, 0, 0, 269, 290, 373,
	0, 0, 0, 0, 1114, 258, 0, 0, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 1115, 1634, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	289, 283, 284, 336, 337, 385, 386, 387, 361, 280,
	0, 287, 288, 0, 368, 0, 0, 0, 339, 0,
	0, 0, 392, 0, 0, 0, 0, 0, 1121, 0,
	314, 264, 318, 0, 0, 0, 0, 0, 1120, 0,
	276, 277, 0, 0, 322, 317, 344, 346, 355, 364,
	374, 382, 358, 294, 328, 379, 367, 0, 325, 381,
	295, 313, 390, 315, 316, 352, 273, 335, 0, 310,
	292, 0, 0, 0, 298, 266, 305, 267, 296, 327,
	0, 293, 1121, 369, 338, 1116, 1117, 1119, 388, 0,
	343, 1118, 1120, 0, 0, 0, 330, 371, 333, 362,
	324, 353, 282, 342, 383, 311, 348, 384, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 377, 307, 279, 393, 0, 351,
	265, 345, 0, 271, 274, 389, 375, 302, 303, 1116,
	1117, 1119, 0, 0, 0, 1118, 329, 334, 359, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 341, 0, 0, 0, 278, 272,
	0, 326, 0, 0, 0, 281, 0, 300, 360, 0,
	262, 365, 372, 323, 0, 0, 376, 320, 319, 0,
	0, 0, 0, 0, 0, 312, 259, 356, 391, 380,
	331, 370, 297, 306, 0, 304, 0, 0, 0, 340,
	354, 0, 0, 0, 0, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	263, 301, 363, 366, 286, 350, 275, 308, 357, 309,
	332, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 674, 0, 1123, 1113, 1112,
	0, 1124, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 269, 290, 373, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 1543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 289,
	283, 284, 336, 337, 385, 386, 387, 361, 280, 0,
	287, 288, 0, 368, 0, 0, 0, 339, 0, 0,
	0, 392, 0, 0, 0, 0, 0, 1121, 0, 314,
	264, 318, 0, 0, 0, 0, 0, 1120, 0, 276,
	277, 0, 0, 322, 317, 344, 346, 355, 364, 374,
	382, 358, 294, 328, 379, 367, 0, 325, 381, 295,
	313, 390, 315, 316, 352, 273, 335, 0, 310, 292,
	0, 0, 0, 298, 266, 305, 267, 296, 327, 0,
	293, 0, 369, 338, 1116, 1117, 1119, 388, 0, 343,
	1118, 0, 0, 0, 0, 330, 371, 333, 362, 324,
	353, 282, 342, 383, 311, 348, 384, 0, 0, 0,
	50, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 377, 307, 279, 393, 0, 351, 265,
	345, 0, 271, 274, 389, 375, 302, 303, 0, 0,
	0, 0, 0, 0, 0, 329, 334, 359, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 341, 0, 0, 0, 278, 272, 0,
	326, 0, 0, 0, 281, 0, 300, 360, 0, 262,
	365, 372, 323, 0, 0, 376, 320, 319, 0, 0,
	0, 0, 0, 0, 312, 0, 356, 391, 380, 331,
	370, 297, 306, 0, 304, 0, 0, 0, 340, 354,
	0, 0, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 263,
	301, 363, 366, 286, 350, 275, 308, 357, 309, 332,
	291, 0, 0, 0, 0, 0, 936, 937, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 0, 589, 0, 0, 0, 0,
	0, 0, 0, 579, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 45, 569, 566, 567,
	571, 572, 573, 574, 0, 0, 0, 570, 575, 460,
	461, 0, 0, 0, 0, 0, 0, 558, 0, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 0, 0, 0, 0, 269, 290, 373, 0, 0,
	0, 0, 0, 555, 556, 0, 0, 0, 0, 604,
	349, 557, 0, 0, 553, 554, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 0, 285, 289, 283,
	284, 336, 337, 385, 386, 387, 361, 280, 0, 287,
	288, 0, 368, 0, 0, 0, 339, 0, 0, 0,
	392, 0, 0, 0, 0, 0, 0, 0, 314, 264,
	318, 565, 0, 0, 0, 0, 544, 0, 276, 277,
	0, 0, 322, 317, 344, 346, 355, 364, 374, 382,
	358, 294, 328, 543, 0, 0, 0, 0, 542, 0,
	0, 0, 0, 0, 0, 588, 0, 589, 0, 0,
	0, 0, 0, 0, 0, 579, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 45, 569,
	566, 567, 571, 572, 573, 574, 0, 0, 0, 570,
	575, 460, 461, 545, 0, 0, 590, 0, 540, 558,
	0, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	591, 592, 0, 0, 0, 555, 556, 0, 0, 0,
	0, 604, 0, 557, 0, 0, 990, 554, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 0, 602, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 992, 0, 593, 603, 599, 600, 597, 598, 596,
	595, 594, 605, 581, 582, 583, 584, 586, 0, 0,
	464, 463, 585, 565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 0, 1001, 1007, 1005, 0, 0, 1002, 0,
	0, 1000, 0, 0, 1009, 0, 0, 1008, 994, 1004,
	1006, 1003, 998, 0, 993, 0, 1011, 1010, 1012, 991,
	1014, 0, 0, 0, 1018, 1015, 1017, 1016, 590, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 995, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 591, 592, 0, 0, 0, 0, 0, 997,
	999, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 603, 599, 600, 597,
	598, 596, 595, 594, 605, 581, 582, 583, 584, 586,
	544, 0, 464, 463, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	0, 0, 542, 0, 0, 0, 0, 0, 0, 588,
	0, 589, 0, 0, 0, 0, 0, 0, 0, 579,
	580, 601, 0, 0, 0, 0, 0, 1674, 0, 421,
	0, 0, 45, 569, 566, 567, 571, 572, 573, 574,
	0, 0, 0, 570, 575, 460, 461, 545, 1675, 0,
	0, 0, 540, 558, 0, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 0, 0, 0, 0, 604, 544, 557, 0, 0,
	553, 554, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 543, 0, 0, 0, 0, 542, 602,
	0, 0, 0, 0, 0, 588, 0, 589, 0, 0,
	0, 0, 0, 0, 0, 579, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 45, 569,
	566, 567, 571, 572, 573, 574, 0, 565, 0, 570,
	575, 460, 461, 545, 0, 0, 0, 0, 540, 558,
	0, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 847, 0, 0,
	0, 604, 0, 557, 0, 0, 553, 554, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 591, 592, 0, 0,
	0, 0, 0, 565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	603, 599, 600, 597, 598, 596, 595, 594, 605, 581,
	582, 583, 584, 586, 0, 0, 464, 463, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 591, 592, 0, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 603, 599, 600, 597,
	598, 596, 595, 594, 605, 581, 582, 583, 584, 586,
	544, 0, 464, 463, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	0, 0, 542, 0, 0, 0, 0, 0, 0, 588,
	0, 589, 0, 0, 0, 0, 0, 0, 0, 579,
	580, 601, 0, 0, 0, 0, 0, 0, 0, 421,
	0, 724, 45, 569, 566, 567, 571, 572, 573, 574,
	0, 0, 0, 570, 575, 460, 461, 545, 0, 0,
	0, 0, 540, 558, 0, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 0, 0, 0, 0, 604, 544, 557, 0, 0,
	553, 554, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 0, 0, 0, 0, 542, 602,
	0, 0, 0, 0, 0, 588, 0, 589, 0, 0,
	0, 0, 0, 0, 0, 579, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 45, 569,
	566, 567, 571, 572, 573, 574, 0, 565, 0, 570,
	575, 460, 461, 545, 0, 0, 0, 0, 540, 558,
	0, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 847, 0, 0,
	0, 604, 0, 557, 0, 0, 553, 554, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 591, 592, 0, 0,
	0, 0, 0, 565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	603, 599, 600, 597, 598, 596, 595, 594, 605, 581,
	582, 583, 584, 586, 0, 0, 464, 463, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 591, 592, 0, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 603, 599, 600, 597,
	598, 596, 595, 594, 605, 581, 582, 583, 584, 586,
	0, 0, 464, 463, 585, 674, 0, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 0, 0, 0, 0,
	542, 0, 0, 0, 0, 0, 0, 588, 0, 589,
	0, 601, 0, 0, 0, 0, 0, 579, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	45, 569, 566, 567, 571, 572, 573, 574, 0, 0,
	0, 570, 575, 460, 461, 545, 0, 0, 0, 0,
	540, 558, 0, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 0,
	0, 0, 0, 604, 544, 557, 0, 0, 553, 554,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 0, 0, 0, 0, 542, 602, 0, 0,
	0, 0, 0, 588, 0, 589, 0, 0, 0, 0,
	0, 0, 0, 579, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 45, 569, 566, 567,
	571, 572, 573, 574, 0, 565, 0, 570, 575, 460,
	461, 545, 0, 0, 0, 0, 540, 558, 0, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 0, 0, 0, 0, 604,
	0, 557, 0, 0, 553, 554, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 591, 592, 0, 0, 0, 0,
	0, 565, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 603, 599,
	600, 597, 598, 596, 595, 594, 605, 581, 582, 583,
	584, 586, 0, 0, 464, 463, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	591, 592, 0, 601, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 603, 599, 600, 597, 598, 596,
	595, 594, 605, 581, 582, 583, 584, 586, 544, 0,
	464, 463, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 0, 589,
	0, 0, 0, 0, 0, 0, 0, 579, 580, 601,
	0, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	45, 569, 566, 567, 571, 572, 573, 574, 0, 0,
	0, 570, 575, 460, 461, 545, 0, 0, 0, 0,
	0, 558, 0, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 0,
	0, 0, 0, 604, 0, 557, 0, 0, 553, 554,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	588, 0, 589, 0, 0, 0, 0, 602, 0, 0,
	579, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	421, 0, 0, 45, 569, 566, 567, 571, 572, 573,
	574, 0, 0, 0, 570, 575, 460, 461, 0, 0,
	0, 0, 0, 0, 558, 565, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 0, 0, 0, 0, 604, 0, 557, 0,
	0, 553, 554, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 0,
	0, 0, 606, 0, 591, 592, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 603, 599,
	600, 597, 598, 596, 595, 594, 605, 581, 582, 583,
	584, 586, 0, 590, 464, 463, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 591, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	593, 603, 599, 600, 597, 598, 596, 595, 594, 605,
	581, 582, 583, 584, 586, 0, 0, 464, 463, 585,
	0, 0, 0, 588, 0, 589, 0, 0, 0, 0,
	0, 0, 0, 579, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 45, 569, 566, 567,
	571, 572, 573, 574, 0, 0, 601, 570, 575, 460,
	461, 0, 0, 0, 0, 0, 0, 558, 0, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 0, 0, 0, 0, 604,
	0, 557, 0, 0, 553, 554, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	591, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 603, 599, 600, 597, 598, 596,
	595, 594, 605, 581, 582, 583, 584, 586, 0, 0,
	464, 463, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
}

var yyPact = [...]int16{
	481, -1000, -268, -1000, -1000, 1396, 2511, 387, -1000, -1000,
	-1000, 939, 456, 453, 448, 219, 419, 930, 437, 888,
	464, 372, -1000, -212, -192, -1000, -115, 451, -1000, 1211,
	-1000, 4508, 4508, 4508, -1000, 300, 930, 930, 372, 136,
	372, 1413, 395, 1412, 686, -1000, 516, -1000, 1521, 513,
	-1000, 372, 888, 678, -1000, -1000, -1000, -1000, 168, 167,
	509, 2459, -158, -23, -1000, -1000, -1000, -1000, -1000, 1334,
	-1000, -1000, -1000, 1334, 30, 1395, 1334, 1395, -1000, 1334,
	1395, 17, 17, 17, 17, 17, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1394, 1393, -1000, 1334, 1334, 1334, 1334,
	1334, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1391, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1378, 59, 1378, 1342, 1342, -1000, -1000, 2459,
	2459, 1386, 888, 930, 1411, 1409, 888, -250, 888, 888,
	1569, -1000, -1000, -1000, 159, 888, 1503, 5642, 4508, 6779,
	888, -1000, 1501, 474, 888, 4884, -1000, 1476, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1383, 741, 930, 303, 106,
	1322, 347, 423, 315, 1075, 302, -1000, -1000, -1000, 756,
	-1000, 930, -1000, 1591, -1000, -1000, 293, -1000, 291, 656,
	927, 888, 1381, 177, 1379, 5175, 856, -1000, -276, -1000,
	-27, -1000, -1000, 800, 17, 1334, -1000, 17, 794, 17,
	17, -1000, -1000, 521, 1483, 521, 521, 521, 521, 913,
	913, -145, -145, -1000, -1000, -1000, 849, -1000, 845, 1378,
	-1000, -1000, -1000, 841, -1000, 888, 930, 1374, 1408, 888,
	888, 1519, 418, -1000, -1000, 1518, 1510, 1265, -1000, -1000,
	155, -1000, -1000, 395, 930, -1000, 512, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1398, -1000, 322,
	471, 6021, 167, -1000, -1000, -1000, -1000, 383, -1000, 1588,
	1539, 297, -19, -196, 1062, -1000, -1000, 1368, -1000, -1000,
	8465, -1000, 1042, 1029, -1000, 1001, 979, 6, 930, -1000,
	-208, 96, -25, -1000, -1000, 1322, -1000, 1366, 8465, 1509,
	-1000, 1488, 831, -1000, 3659, -1000, -256, -1000, -1000, -1000,
	-256, -1000, -1000, -1000, 1322, -1000, 1364, 1363, -1000, 1362,
	-1000, -1000, 1322, 1322, 1322, 510, -1000, -1000, -1000, -1000,
	-1000, 1258, 521, 17, 521, 1256, 1253, 521, 521, -1000,
	-1000, 949, 582, -1000, -1000, -1000, -1000, 1209, -1000, 1205,
	-1000, 46, 45, -1000, 1252, 1313, -1000, 1197, 1321, 1407,
	214, 888, 1361, 1360, 1337, 372, 1337, 1538, 231, 888,
	1569, 376, 1569, 395, 6400, 930, 299, 930, -1000, -1000,
	323, 4505, -1000, -1000, 1193, -1000, 207, 1334, 398, 398,
	-210, 280, 262, -196, 1322, 1357, -1000, 383, 753, -1000,
	8465, 226, 1322, 1322, 1322, 1322, 8359, -1000, -1000, 488,
	-1000, -1000, -1000, 8892, 8892, 8892, 8892, 8892, 8892, 8892,
	-1000, -1000, -1000, -1000, -16, -1000, -256, -1000, 871, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 507, 506, -1000, 1322,
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 8465, 1322, 1470,
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
	1322, 2606, 1322, 1322, 1322, 1322, -1000, -1000, -1000, -1000,
	-1000, -1000, -196, 1355, -1000, -1000, -1000, 656, -1000, 8465,
	376, 840, 134, -1000, 1312, 1247, 227, 1242, -1000, 2137,
	-1000, 1027, -1000, 824, -1000, 746, 1241, 7577, 8017, 8017,
	6400, -1000, -1000, 521, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17, 892, 17, -32, -39, -1000, 826, -1000,
	823, 214, 930, 888, 1238, 1298, -1000, 204, 1354, 376,
	383, -1000, 1553, 1596, -1000, 1337, 888, -1000, 415, 1561,
	-1000, -1000, 1535, -1000, 1297, -1000, -1000, 1280, 1569, -1000,
	1353, 930, -1000, -1000, 306, 930, -1000, -1000, -1000, -1000,
	-1000, 2585, 383, 1497, -1000, -1000, -1000, 704, -1000, -1000,
	706, 216, 695, -1000, 930, -196, 1350, 8465, 383, 1191,
	208, 8465, 8465, 851, -1000, 548, 6965, 762, 608, 8892,
	8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892,
	8892, 8892, 8892, 8892, 2992, 926, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 945, -1000,
	1337, 872, 1027, 1027, 1027, 1135, 8359, 576, 1269, 1269,
	40, 8359, 40, 40, 40, 40, 40, 63, -1000, -271,
	-1000, -1000, 5642, 6400, 8017, 8017, 7137, 8465, 8017, 8017,
	8017, 1524, 647, 576, 872, 1534, 1027, 1027, 1027, 1027,
	-1000, 1027, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26, -1000, -1000, -1000, -1000, -1000, -1000, 8017, 8017, 8017,
	8017, -1000, 930, 1322, 753, 1147, -157, 8465, 1349, 801,
	-1000, 1233, -256, -1000, -1000, -1000, -158, -1000, -1000, -1000,
	-1000, 1027, 8017, 1098, 1135, -1000, 725, -1000, 505, 1098,
	725, 1098, 1322, -1000, 521, -1000, 521, -1000, -1000, 1172,
	1157, 1152, 1348, 1347, -244, 800, 214, 1130, 1126, 1543,
	1550, 1337, 1512, 1462, -1000, 1027, 1507, 930, -1000, -1000,
	-1000, -1000, -1000, 187, 643, 930, 4778, 1165, -1000, 672,
	1346, 92, 351, 1403, 2802, 139, -1000, 942, 629, 889,
	627, 625, 615, 613, 609, 606, 598, 596, 592, 589,
	-1000, -1000, -1000, -1000, -1000, 1583, -1000, -1000, -1000, 1570,
	1345, 1344, 383, 753, 1124, 2585, -1000, -124, 548, 588,
	-1000, -1000, 779, -1000, -1000, 2807, 8892, 8892, 8892, -1000,
	-1000, -1000, -1000, 762, 8892, 8892, 8892, 2644, 2807, 2784,
	2073, 2466, 40, 73, 73, 29, 29, 29, 29, 29,
	27, 27, -1000, -136, -1000, 1334, -1000, -1000, -1000, 1027,
	1027, -1000, -1000, -1000, -1000, 8465, -1000, 1027, -1000, -256,
	885, -1000, -1000, 879, 1322, -1000, 1098, 1098, 789, 1296,
	9205, 1334, -1000, 1334, 1342, -1000, -1000, 74, 1334, 67,
	-1000, -1000, -1000, -1000, 1342, -1000, -1000, -1000, -1000, -1000,
	1334, 1334, -1000, -1000, 1334, 1334, -1000, 1334, 1334, 777,
	1286, 1267, 1098, 8017, -1000, 637, -1000, 8465, 1027, 888,
	-1000, -1000, -1000, -1000, -1000, -1000, 1098, 1027, 1295, 1098,
	1098, 1104, -1000, 8465, 208, 1405, -1000, -1000, 819, -1000,
	1137, 1127, -1000, -1000, 1098, 8017, -265, -1000, -1000, -1000,
	938, -1000, -1000, 4126, -265, -265, 8017, -1000, -1000, -1000,
	-1000, -244, 214, 383, 1564, 1341, 1100, 1564, 2585, 1494,
	8465, 8465, 1553, -1000, 1337, -1000, -1000, 1524, -1000, -1000,
	683, -1000, 1337, 1226, 179, 131, 8465, -1000, 1950, -1000,
	4778, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1553, -1000, -1000, -1000, 930, 2939, 930, 930, 930, 393,
	8799, 8465, -1000, -1000, -1000, 888, 1088, 4129, 672, 672,
	4129, 672, 672, 383, 383, 1340, 1338, 260, -1000, 930,
	-1000, -151, 2802, 930, -1000, 797, -1000, -1000, 726, 793,
	726, 726, 726, 726, 726, 198, 780, 318, 398, 398,
	930, 383, 1066, 208, 2585, 1403, -1000, -1000, -1000, -1000,
	2807, 2807, 2807, -1000, 2644, 2807, 2413, -1000, 8892, 8892,
	36, -1000, -1000, 576, -1000, 50, -1000, -256, -1000, -1000,
	3355, 926, 8465, -1000, 200, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3355, 8892, 8892,
	8892, 8892, -129, 1285, 632, -1000, 8465, 631, -1000, -1000,
	-1000, -1000, -1000, -1000, 337, 930, 753, -1000, 1585, -163,
	391, -1000, -1000, -1000, -1000, -1000, 1322, -1000, -1000, 501,
	-1000, -1000, 1027, 1564, 1067, 1061, 2585, 8465, 376, -244,
	2585, -1000, -1000, 1581, 532, 791, 1294, -1000, 764, 1543,
	1027, 1343, -1000, -1000, -137, 8465, 4778, 6294, 576, 6294,
	-1000, 4778, 277, 1543, 387, 917, 834, 1293, 356, -1000,
	2989, 758, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 930, 1576, 1575,
	1574, 1573, 5157, 226, 587, 111, 1533, -1000, -1000, 4129,
	-1000, -1000, -1000, -1000, -1000, 1052, 1049, 383, 383, 1336,
	1322, 1041, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 656, 656, 1039, 1036, 2585, -1000, 1403, -1000, -1000,
	8892, 2807, 2807, -45, -1000, 879, -1000, 1027, 1334, 1027,
	714, -1000, -1000, 1027, 2202, 2159, 1255, 853, 1322, -122,
	-1000, 576, 8465, 888, -1000, 208, 398, 398, -1000, -1000,
	-1000, 143, 774, 769, 761, 747, 16, -1000, 1547, 439,
	5263, -1000, 2585, 1564, 2585, 1403, 576, 1033, 1564, 1403,
	-1000, 1468, 8465, 8465, 8465, -1000, 1494, -1000, 8017, -1000,
	-1000, -262, 576, 1950, 2454, -1000, -1000, 156, 6619, -1000,
	1494, 909, 888, 1080, -1000, 1263, 1606, -1000, -1000, -1000,
	1505, 916, 539, 930, 169, 4508, -1000, -1000, 1292, 3368,
	-47, -1000, -1000, -1000, 586, 500, 878, -1000, 1482, -1000,
	-1000, 2939, 1493, -1000, -1000, -1000, -1000, -1000, 6294, 4778,
	6294, 643, 183, -1000, 292, 1026, 1021, 383, 930, -1000,
	2802, -1000, -1000, 324, 2585, 1403, -1000, 2807, -1000, -1000,
	-1000, -1000, -1000, 8892, -1000, -1000, 8892, -1000, 8892, -1000,
	8892, -1000, 8892, 8892, 1027, 874, 576, 1333, -1000, -1000,
	-1000, 734, -1000, 733, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 118, -1000, 1546, 1027, -1000, 1403, 2585, -1000, -1000,
	-1000, 2585, -1000, 1460, 576, 576, -1000, -1000, 1250, 8465,
	6240, -1000, -1000, -1000, -1000, 241, 888, -1000, 241, 1225,
	834, 888, -1000, -1000, 872, 834, 834, 834, 834, 834,
	-1000, 1451, 1448, -1000, 1437, 1430, 1441, 888, 1019, 916,
	540, 1322, -1000, 925, -1000, -1000, -1000, 1505, 1531, -1000,
	3747, 1292, -47, 1291, -1000, -62, -58, 7471, 6400, 521,
	-1000, -1000, -1000, -1000, -1000, 930, 1916, 450, 680, 103,
	178, 145, -1000, 151, 2585, 2585, 1017, 1027, -1000, 888,
	1403, -1000, 2452, 2452, 2452, 2452, 2452, 285, -1000, -1000,
	930, -1000, -1000, -1000, 495, 8465, -1000, -1000, -1000, 1403,
	-1000, 1564, 834, 576, -1000, -1000, 1234, 1322, -1000, 1564,
	834, 1268, -1000, 1228, -1000, 585, 1606, 1332, 1404, 999,
	-1000, -1000, -1000, -1000, 1445, -1000, 1427, -1000, -1000, -1000,
	-1000, -141, 445, 438, 428, 930, -1000, 1337, -1000, 1291,
	-47, -64, -1000, -1000, -1000, -1000, 576, 568, -1000, 1290,
	-1000, 6294, 5482, 638, 6294, -1000, -1000, 162, -1000, 1403,
	1403, -1000, -1000, 1329, -1000, -1000, -1000, -1000, -1000, -1000,
	1027, 171, -155, 1011, 6400, 994, -1000, 576, -1000, 1562,
	1288, 1402, 872, 1322, -1000, 950, 930, 1553, 1268, -1000,
	1564, 872, 8465, -1000, -1000, 8465, 1328, -1000, 8465, -1000,
	-1000, -1000, -1000, 1323, 1322, 1322, 1322, 1006, -1000, -1000,
	-1000, -1000, -74, -70, -1000, 8465, 369, 4778, 84, 2029,
	-1000, -1000, -1000, -1000, 930, -1000, 1458, -133, -184, -1000,
	-1000, -1000, 1027, 8465, 1558, 1545, -1000, 1491, 1145, 1281,
	-1000, -1000, 7911, 1027, 1009, 493, 1006, 1543, -1000, 1553,
	-1000, 576, 576, 376, 576, 42, 376, 376, 376, 855,
	930, -1000, -1000, -1000, 576, -1000, 239, 6294, 5861, 1000,
	-1000, 1456, -1000, -1000, -1000, -1000, 8465, 8465, 256, -1000,
	1322, -1000, -1000, 1248, 930, 930, -1000, -1000, 1543, 998,
	956, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	953, 953, 953, 540, -1000, 1967, 339, -1000, -1000, -138,
	576, 1287, 1579, -1000, 1322, -1000, 1337, 486, -1000, -1000,
	-1000, -1000, 42, -1000, -1000, -1000, -141, 353, -1000, -164,
	872, 1281, 1027, 930, -1000, -1000, -1000, -186, 1235, -1000,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 1837, 4, 58, 1835, 1833, 1832, 1831, 1830, 1829,
	1824, 1822, 1814, 1813, 1812, 1810, 1809, 1808, 1802, 122,
	1801, 1800, 1798, 79, 1797, 1796, 1795, 1794, 67, 126,
	85, 93, 1472, 35, 40, 43, 65, 1792, 26, 1790,
	1786, 53, 1782, 42, 1780, 1779, 72, 1778, 1777, 7,
	29, 71, 102, 1776, 1775, 94, 1474, 1772, 1770, 86,
	1768, 1767, 84, 11, 5, 10, 9, 1766, 203, 1,
	1765, 87, 1764, 1758, 1757, 1753, 27, 1749, 55, 66,
	15, 54, 1744, 39, 73, 44, 22, 14, 8, 48,
	28, 1742, 21, 31, 25, 1741, 63, 1738, 118, 46,
	57, 78, 0, 24, 80, 1737, 1736, 1735, 1063, 82,
	41, 16, 51, 74, 1732, 69, 97, 49, 95, 91,
	1731, 96, 1730, 1728, 1719, 1718, 1712, 1440, 746, 108,
	68, 50, 1711, 1710, 90, 343, 284, 89, 311, 1014,
	77, 1709, 1708, 1707, 1706, 104, 1704, 60, 101, 30,
	407, 1700, 1699, 1697, 1694, 1693, 1692, 1690, 98, 1687,
	83, 81, 56, 146, 45, 1685, 1684, 1683, 1680, 70,
	1677, 1670, 1668, 59, 1665, 1664, 99, 64, 112, 103,
	107, 1663, 1662, 76, 75, 1660, 106, 105, 1657, 100,
	23, 13, 6, 52, 1644, 1643, 1642, 2, 3, 1638,
	1637, 1636, 1635, 1634, 1633, 62, 1632, 88, 1630, 17,
	1629, 1627, 47, 1620, 1616, 1614, 1610, 1608, 438, 1102,
	1607, 115, 114, 1606, 143,
}

var yyR1 = [...]uint8{
	0, 214, 215, 215, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 15, 15, 15, 15, 15, 15,
	15, 217, 217, 2, 2, 3, 4, 4, 5, 5,
	6, 6, 22, 22, 7, 8, 8, 8, 220, 220,
	41, 41, 85, 85, 9, 9, 9, 9, 10, 10,
	194, 194, 193, 195, 195, 11, 11, 11, 11, 11,
	188, 188, 188, 188, 188, 12, 12, 191, 191, 191,
	13, 13, 13, 13, 90, 90, 94, 94, 94, 95,
	95, 95, 95, 206, 206, 114, 114, 216, 216, 221,
	221, 221, 221, 221, 221, 221, 186, 186, 186, 186,
	187, 187, 187, 187, 189, 189, 190, 190, 190, 190,
	190, 190, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 100, 100, 167, 167, 167, 168, 168, 168,
	168, 168, 168, 170, 170, 171, 171, 106, 106, 172,
	172, 18, 152, 153, 153, 153, 153, 153, 153, 153,
	153, 139, 139, 139, 117, 117, 117, 117, 117, 117,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 178,
	178, 178, 178, 178, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 180, 181, 182, 174, 174, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 129, 129, 129, 129, 129, 129, 173, 173,
	169, 169, 169, 169, 121, 121, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 120, 120, 125, 125, 122, 122, 122, 122, 122,
	122, 122, 122, 118, 118, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 126, 126, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 138, 138,
	127, 127, 136, 136, 137, 137, 137, 128, 128, 128,
	135, 135, 135, 132, 132, 133, 133, 134, 134, 134,
	130, 130, 130, 131, 131, 131, 141, 163, 163, 163,
	165, 165, 166, 166, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 151, 151,
	183, 183, 184, 184, 185, 185, 162, 162, 162, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 150, 150, 160, 160, 161, 161, 158, 158, 158,
	159, 145, 145, 145, 145, 145, 146, 146, 147, 147,
	147, 147, 142, 142, 143, 143, 144, 144, 176, 176,
	176, 210, 210, 210, 210, 210, 210, 211, 211, 177,
	177, 148, 148, 149, 149, 156, 156, 156, 156, 222,
	222, 154, 154, 154, 155, 155, 155, 223, 19, 20,
	20, 21, 21, 21, 25, 25, 25, 23, 23, 24,
	24, 30, 30, 29, 29, 31, 31, 31, 31, 105,
	105, 105, 104, 104, 207, 207, 207, 207, 207, 33,
	33, 34, 34, 35, 35, 36, 36, 36, 197, 197,
	196, 196, 198, 198, 198, 198, 198, 198, 198, 198,
	48, 48, 83, 83, 83, 86, 86, 37, 37, 37,
	37, 38, 38, 39, 39, 40, 40, 112, 112, 111,
	111, 111, 110, 110, 42, 42, 42, 44, 43, 43,
	43, 43, 45, 45, 47, 47, 46, 46, 49, 49,
	49, 49, 50, 50, 84, 84, 32, 32, 32, 32,
	32, 32, 32, 97, 97, 52, 52, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 61, 61, 61, 61, 61, 61, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	28, 28, 62, 62, 62, 68, 63, 63, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 59, 59, 59, 59,
	59, 59, 59, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 224, 224, 60, 60,
	60, 60, 26, 26, 26, 26, 26, 113, 113, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 116, 116, 116, 116, 116, 116, 116, 116, 72,
	72, 27, 27, 70, 70, 71, 99, 99, 73, 73,
	69, 69, 69, 199, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 74, 74, 75, 75, 208, 208,
	209, 76, 76, 77, 77, 78, 79, 79, 79, 80,
	80, 80, 80, 81, 81, 81, 54, 54, 54, 54,
	54, 54, 82, 82, 82, 82, 87, 87, 64, 64,
	66, 66, 65, 67, 88, 88, 92, 89, 89, 93,
	93, 93, 93, 93, 16, 17, 91, 91, 91, 107,
	107, 107, 98, 98, 96, 96, 102, 103, 103, 103,
	103, 108, 108, 109, 109, 200, 200, 200, 201, 201,
	201, 202, 202, 203, 204, 204, 205, 213, 213, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 218, 219,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 11, 13, 13, 14, 14, 6,
	7, 1, 1, 4, 6, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 3, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 10, 5, 9, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 4, 2,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 0, 3, 0, 2, 2, 0, 2, 2,
	2, 2, 2, 0, 2, 0, 3, 0, 1, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 4, 2, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	6, 6, 8, 8, 5, 8, 7, 4, 0, 2,
	4, 6, 2, 4, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 2, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 2, 2, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 4, 4, 4,
	1, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 3, 3, 2, 2, 3,
	4, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 5, 5, 8, 8, 13, 11, 1, 1,
	2, 2, 10, 8, 9, 7, 7, 5, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 8, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 0, 4, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 4, 4,
	4, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	4, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 1, 4, 5, 5, 5,
	5, 6, 4, 4, 4, 6, 6, 8, 6, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 9, 7,
	5, 4, 4, 3, 3, 3, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -214, -1, -14, -15, -18, 125, 126, -215, 387,
	-152, 58, -210, -211, 272, -172, 134, 147, 165, 166,
	357, 132, 369, 370, 149, 372, 79, -96, 137, -153,
	-139, -102, 63, 36, 61, 133, 133, 133, 135, 209,
	135, -102, -102, -69, 138, 61, -108, 63, -46, -108,
	61, 132, -98, 138, 372, 369, 370, 337, 132, 60,
	59, -140, -117, -121, -118, -123, -122, -124, -102, -119,
	-120, 245, 349, 242, 246, 243, 248, 249, 250, 119,
	247, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 251, 263, 33, 154, 235, 236, 237, 240,
	239, 241, 238, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 227, 228, 230, 231, 232, 234, 233, -140,
	-140, -102, 56, 208, -102, -102, -98, 210, -98, 56,
	-186, 19, 189, 190, 202, 56, 81, 122, 25, 122,
	-98, -46, 81, -46, 301, -156, -222, 352, 37, -139,
	-141, -145, -142, -143, -144, -157, -146, 141, 139, 149,
	385, 143, 144, 272, -150, 145, 133, 150, 73, 81,
	-178, 141, -181, 56, 280, 286, 139, 150, 149, 385,
	71, 142, 25, 359, 361, 31, 32, -134, 388, 274,
	-132, 283, -127, 58, -127, -126, 244, -128, 58, -127,
	-128, -127, -128, -130, 246, -130, -130, -130, -130, 58,
	58, -127, -127, -127, -127, -127, 58, -136, 58, -125,
	229, -136, -137, 58, -137, 56, 57, -46, -102, 56,
	56, -46, -206, 382, 383, -46, -46, -189, -187, 8,
	9, 10, 203, -46, 26, -103, -109, -102, 294, 146,
	-101, -108, 130, 190, 360, 80, 25, 27, 280, 286,
	189, 83, 119, 16, 84, 196, 369, 370, 118, 76,
	338, 125, 52, 330, 331, 328, 194, 340, 341, 329,
	287, 201, 20, 31, 382, 10, 28, 152, 24, 112,
	127, 191, 87, 88, 155, 26, 153, 75, 197, 199,
	19, 55, 145, 11, 359, 13, 14, 374, 361, 138,
	137, 99, 373, 133, 50, 8, 121, 29, 383, 96,
	46, 150, 200, 48, 97, 17, 332, 333, 34, 347,
	159, 114, 53, 40, 375, 81, 376, 73, 56, 301,
	195, 79, 15, 51, 160, 377, 147, 198, 381, 98,
	128, 337, 49, 192, 378, 131, 193, 6, 343, 33,
	151, 47, 132, 288, 379, 86, 136, 74, 166, 5,
	149, 9, 380, 54, 57, 334, 335, 336, 38, 85,
	12, 148, 351, 77, -117, -109, -101, -46, 26, 130,
	-46, -154, 59, -103, 71, -101, 36, 58, -177, 56,
	81, -148, -102, 150, -150, 61, 133, -176, 369, 370,
	-218, 58, -150, -150, 61, 133, 150, 61, 150, 73,
	19, -102, 9, 150, 150, -177, 63, -46, 58, -174,
	360, 16, 58, -179, 58, -180, 63, 64, 65, 66,
	73, -129, 72, -52, 275, -59, 328, 331, 330, 276,
	74, 75, -102, 346, 345, -108, -182, 65, 389, -133,
	284, 65, -130, -127, -130, 65, 61, -130, -130, -131,
	119, 118, 33, -131, -131, -131, -131, -138, 63, -138,
	-135, 351, 352, -135, 65, 65, -136, 65, -46, -102,
	58, 56, -46, -46, 25, 135, 25, -167, 25, 56,
	59, 203, -186, -102, 122, 57, -106, 141, -145, 149,
	130, 89, -103, -222, -161, -158, -102, 150, 10, 9,
	19, 145, 139, 149, 385, -176, 61, 58, -32, -51,
	81, -56, 31, 26, 9, 76, -218, -55, -52, -69,
	-199, -67, -68, 119, 120, 108, 109, 116, 82, 121,
	-59, -57, -58, -60, -202, 176, 63, 64, -102, 62,
	72, 65, 66, 67, 68, 73, -108, 306, -65, 48,
	49, 338, 339, 340, 341, 347, 342, 84, 38, 40,
	251, 275, 276, 328, 336, 335, 334, 332, 333, 330,
	331, 384, 138, 329, 114, 337, 273, 61, 61, 61,
	61, -176, 149, -148, -102, 371, -178, 385, -129, -218,
	58, -32, 25, 31, 65, -179, 58, -180, -169, 384,
	-169, -218, -127, 58, -127, 58, 58, -218, -218, -218,
	122, 60, -131, -130, -131, 60, 60, -131, -131, 61,
	61, 119, 60, 59, 60, 235, 235, 60, 59, 60,
	59, 58, 57, 56, -160, -161, -59, -102, -46, 58,
	58, -2, -3, -4, 6, -218, -98, -2, -168, 19,
	173, 174, -46, -187, -83, -102, 150, -189, -186, -103,
	-102, -217, 133, 150, -102, 141, -145, -155, -103, 63,
	65, 60, 59, -127, -159, 278, -127, -147, 169, 170,
	33, 171, -147, 371, 150, 150, -176, -218, 58, -161,
	-219, 80, 79, 96, 60, -32, -53, 99, 81, 97,
	98, 83, 105, 104, 115, 108, 109, 110, 111, 112,
	113, 114, 106, 107, 384, 118, 89, 90, 91, 92,
	93, 94, 95, 100, 101, 102, 103, -97, -218, -68,
	-218, -218, -218, -51, -2, -63, -218, -32, 123, 124,
	-56, -218, -56, -56, -56, -56, -56, -56, -203, 274,
	-169, 63, 122, 122, -218, -218, -218, -218, -218, -218,
	-218, -218, -72, -32, -218, 41, -218, -218, -218, -218,
	-224, -218, -224, -224, -224, -224, -224, -224, -116, 119,
	246, 154, 237, -119, -118, 252, 251, -218, -218, -218,
	-218, -176, 58, -177, -32, -83, 60, 58, 361, 59,
	60, -179, 63, 60, 277, 121, -117, -219, 60, 60,
	60, -30, 24, -29, -63, -31, -32, 110, -108, -29,
	-32, -29, -103, -131, -130, 63, -130, 285, 285, 65,
	65, -160, -102, -46, 60, 58, 58, -83, -161, -76,
	15, -21, 5, -19, -223, -2, -46, 136, 21, 6,
	8, 9, 10, 19, -100, 59, 25, -189, -216, 58,
	-102, 149, -102, -163, -165, 351, -164, 57, 146, 71,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 61,
	-158, -79, 27, 28, -177, 56, 73, 172, -177, 56,
	-148, -176, 58, -32, -161, 60, -173, 171, -32, -32,
	-61, 73, 81, 74, 75, -56, 21, 22, 23, -62,
	-65, -68, 69, 99, 97, 98, 83, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -121, 236, -116, -119, -113, 61, 63, 61,
	-69, -102, -219, -219, -219, 59, -219, -2, -55, 63,
	-102, -55, -102, 388, -103, -103, -29, -29, -32, -115,
	119, 242, 154, 237, 231, 261, 262, 282, 235, 283,
	224, 216, 221, 234, 232, 218, 233, 217, 230, 227,
	240, 239, 241, 252, 243, 248, 250, 249, 247, -32,
	-31, -31, -29, -23, 24, -70, -71, 85, -69, 19,
	-219, -219, -219, -219, -219, 244, -29, -30, -29, -29,
	-29, -149, -102, -218, -219, 60, 357, 358, -32, 58,
	65, 60, -134, -219, -29, 59, -219, -219, -105, -104,
	25, -102, 63, 122, -219, -219, -218, -131, -131, 60,
	60, 60, 58, 58, -84, 373, -160, 60, 60, -80,
	17, 16, -5, -3, -218, 21, 24, -25, 44, 45,
	-20, -219, 25, -149, 191, -99, 85, -102, -190, -192,
	211, -6, -8, -7, -10, -9, -11, -12, -13, -16,
	-3, -22, 10, 9, 20, 33, 195, 196, 201, 197,
	148, 138, -17, 8, 337, 56, -221, -102, 108, 89,
	63, -139, 59, 58, 58, 369, 370, 139, -162, 56,
	-164, 351, 58, 353, 61, -151, 89, 63, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 9, 10,
	58, 58, -161, -219, 60, -163, 344, 73, 74, 75,
	-56, -56, -56, -62, -56, -56, -56, -28, 155, 80,
	351, -219, -219, -32, -219, -204, -205, 63, -219, -219,
	59, 57, 59, -127, -127, -127, -137, 222, -127, 222,
	-137, -127, -127, -127, -127, -127, -127, 25, 59, 11,
	59, 11, -219, -29, -73, -71, 87, -32, -219, -108,
	-219, -219, -219, -219, 60, 59, -32, -173, 56, 60,
	-175, 60, 60, -219, -31, -207, 386, -104, 110, -109,
	-207, -207, -30, -84, -160, -161, -50, 12, 58, 60,
	-50, -163, -81, 19, 34, -32, -77, -78, -32, -76,
	-2, -23, 70, -2, -170, 57, 192, 211, -32, 387,
	-192, 211, -190, -76, -19, -19, -19, -194, -102, -193,
	-19, -213, -212, 307, 308, 309, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 326, 327, -102, -102, -102, -188, 40, 198,
	199, 200, -51, -56, -32, -51, -46, 60, -221, -102,
	-221, -221, -221, -221, -221, -161, -161, 58, 58, 150,
	-102, -166, -164, -102, 65, -183, 56, 77, 65, -183,
	-183, -183, -183, -183, -184, 187, 188, 65, -185, -184,
	65, -147, -147, -149, -161, 60, -173, -163, -162, -28,
	80, -56, -56, 235, 389, 59, -169, -115, 119, -113,
	-32, -130, 61, -115, -56, -56, -56, -56, 348, -76,
	88, -32, 86, 142, -102, -219, 10, 9, 357, 358,
	60, 212, 363, 364, 159, 365, 171, 366, 367, -218,
	122, -219, -50, 60, 60, -163, -32, -83, -84, -163,
	9, 99, 59, 18, 59, -79, -80, -219, -24, 47,
	-171, 351, -32, -190, -191, -192, -192, -190, 387, 88,
	-80, -96, 11, -41, -46, -34, -35, -36, -37, -48,
	-68, -218, -46, 59, -195, -112, 193, 25, -89, -114,
	213, -93, 296, 295, -103, 306, -91, 294, 246, 293,
	-183, 59, -102, 11, 11, 11, 11, -192, 211, 86,
	211, -100, 19, 60, 60, -161, -161, 58, -218, 60,
	59, -177, -177, 60, 60, -163, -162, -56, 285, -205,
	-219, -219, -219, 59, -219, -219, 59, -219, 19, -219,
	59, -219, 19, -218, -27, 343, -32, -46, -173, -147,
	-147, 351, 65, 16, 65, 65, 65, 65, 364, 159,
	366, 16, -219, 160, -76, 110, -163, -50, -163, -162,
	60, -50, -162, 42, -32, -32, -78, -81, -29, 385,
	387, -192, 88, 88, -81, -47, 29, -46, -46, -41,
	-220, 59, 11, 57, 33, 59, -42, -44, -43, -45,
	46, 50, 52, 47, 48, 49, 53, -112, -34, -218,
	-111, 160, -110, 25, -108, 63, -193, -102, 194, -117,
	59, -89, 213, -90, -94, 297, 299, 89, 122, -107,
	-102, 63, 31, 33, -212, 29, -191, -190, -191, -99,
	191, -200, 204, 81, 60, 60, -161, -102, -164, 142,
	-163, -162, -56, -56, -56, -56, -56, -56, -219, 63,
	58, 65, 65, 368, -108, 16, -219, -162, -163, -163,
	43, -33, 11, -32, 88, -192, -85, 160, -46, -85,
	57, -34, -46, -88, -92, -69, -35, -36, -36, -35,
	-36, 46, 46, 46, 51, 46, 51, 46, -43, -108,
	-219, -49, 54, 137, 55, -218, -110, 19, -93, -90,
	59, 298, 300, 301, 56, 77, -32, -103, -131, -149,
	88, 387, 387, 88, 211, 192, -201, 205, 204, -163,
	-163, 60, -219, -46, -162, -219, -219, -219, -219, -219,
	-26, 99, 351, -149, 122, -208, -209, -32, -162, -50,
	-34, -54, 33, 38, -2, -218, -218, -50, -34, -50,
	-33, 59, 89, -39, -38, 56, 57, -40, 56, -38,
	46, 46, -197, 351, 133, 133, 133, -86, -102, -2,
	-94, -95, 302, 299, 305, 89, 88, 87, 87, -191,
	207, 206, -162, -162, 58, -219, 349, 53, 354, 60,
	-103, -219, -76, 59, -74, 13, -87, 56, -88, -64,
	-66, -65, -218, -2, -82, -102, -86, -76, -50, -50,
	-92, -32, -32, 58, -32, 58, -218, -218, -218, -219,
	59, 299, 303, 304, -32, 138, -190, 211, 387, -149,
	43, 350, 355, -219, -209, -75, 14, 16, 30, -87,
	59, -219, -219, -219, 59, 122, -219, -80, -76, -83,
	-196, -198, 374, 375, 376, 377, 378, 379, 380, 381,
	-83, -83, -83, -111, -102, 387, -191, 88, 60, 43,
	-32, -63, 150, -66, 38, -2, -218, -102, -102, -80,
	60, 60, 59, -219, -219, -219, -49, 88, 88, 351,
	9, -64, -2, 122, -198, -197, 138, 354, -88, -219,
	-102, 355,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 804, 1, 3,
	6, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 802, 412, 413, 414, 417, 0, 0, 805, 0,
	154, 198, 198, 198, 806, 0, 0, 0, 802, 0,
	802, 0, 730, 0, 0, -2, 0, 812, 0, 526,
	811, 802, 0, 0, 418, 415, 416, 150, 0, 425,
	0, 161, 327, 323, 165, 166, 167, 168, 169, 310,
	245, 273, 274, 310, 297, 317, 310, 317, 280, 310,
	317, 330, 330, 330, 330, 330, 288, 289, 290, 291,
	292, 293, 294, 0, 0, 265, 310, 310, 310, 310,
	310, 271, 272, 299, 300, 301, 302, 303, 304, 305,
	306, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 312, 263, 312, 314, 314, 261, 262, 162,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 152, 427, 0, 430, 155,
	156, 157, 158, 159, 160, 0, 419, 421, 0, 408,
	0, 0, 0, 0, 0, 0, 381, 382, 171, 0,
	173, 0, 175, 0, 177, 178, 0, 180, 182, 419,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 329,
	325, 324, 244, 0, 330, 310, 298, 330, 0, 330,
	330, 281, 282, 333, 0, 333, 333, 333, 333, 0,
	0, 320, 320, 268, 269, 270, 0, 256, 0, 312,
	264, 258, 259, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 94, 0, 134, 0, 114, 110,
	111, 112, 109, 0, 0, 731, 0, 807, 808, 809,
	-2, 813, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 22, 527, 814, 0, 803, 147,
	0, 0, 0, 431, 433, 810, 429, 0, 391, 0,
	0, 0, 422, 369, 0, 377, -2, 0, 409, 410,
	821, 982, 0, 0, 372, 374, 0, 408, 421, 172,
	0, 0, 0, 179, 181, 0, 185, 186, 821, 0,
	216, 0, 0, 199, 0, 202, -2, 205, 206, 207,
	240, 209, 210, 211, 0, 213, 310, 310, 236, 0,
	545, 546, 0, 0, 0, 0, 214, 215, 328, 164,
	326, 0, 333, 330, 333, 0, 0, 333, 333, 283,
	334, 0, 0, 284, 285, 286, 287, 0, 308, 0,
	266, 0, 0, 267, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 802, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 421, 29, 148,
	0, 0, 432, 428, 0, 385, 310, 310, 0, 0,
	0, 0, 0, 408, 0, 0, 376, 0, 0, 536,
	821, 541, 543, 0, 0, 0, 821, 588, 589, 590,
	591, 592, 593, 821, 821, 821, 821, 821, 821, 821,
	620, 621, 622, 623, 0, 625, -2, 735, 730, 737,
	738, 739, 740, 741, 742, 743, 0, 0, 783, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 656, 666, 666, 666, 666, 666, 666,
	666, 0, 0, 0, 0, 0, 822, 370, 371, 373,
	375, 379, 408, 0, 422, 197, 174, 419, 176, 821,
	0, 0, 0, 217, 0, 0, 0, 0, 204, 0,
	208, 0, 232, 0, 234, 0, 0, -2, 821, 821,
	0, 311, 275, 333, 277, 318, 319, 278, 279, 335,
	331, 332, 330, 0, 330, 0, 0, 307, 0, 315,
	0, 0, 0, 0, 0, 383, 384, 310, 0, 0,
	0, -2, 751, 0, 437, 0, 0, -2, 0, 0,
	135, 136, 132, 115, 113, 492, 493, 0, 0, 732,
	97, 0, 31, 32, 422, 421, 30, 426, 434, 435,
	436, 337, 0, 756, 389, 390, 388, 419, 398, 399,
	0, 0, 419, 420, 421, 408, 0, 821, 0, 0,
	238, 821, 821, 0, 983, 539, 821, 0, 0, 821,
	821, 821, 821, 821, 821, 821, 821, 821, 821, 821,
	821, 821, 821, 821, 0, 0, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 542, 0, 559,
	0, 0, 0, 536, 36, 0, 821, 586, 0, 0,
	611, 821, 612, 613, 614, 615, 616, 617, 624, 0,
	734, 736, 0, 0, 821, 821, 821, 821, 821, 821,
	821, 447, 0, 720, 0, 0, 0, 0, 0, 0,
	658, 0, 659, 660, 661, 662, 663, 664, 665, 711,
	0, 713, 714, 715, 716, 717, 718, 821, -2, 821,
	821, 380, 0, 0, 0, 0, 0, 821, 194, 0,
	200, 0, 240, 203, 241, 242, 327, 212, 233, 235,
	237, 0, 821, 0, 0, 453, 459, 455, 0, 0,
	459, 0, 0, 276, 333, 309, 333, 321, 322, 0,
	0, 0, 0, 0, 534, 982, 0, 0, 0, 759,
	0, 0, 441, 444, 439, 36, 0, 0, 138, 139,
	140, 141, 142, 0, 726, 0, 0, 0, 23, 99,
	0, 0, 422, 366, 338, 0, 340, 0, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 387, 757, 758, 392, 0, 400, 401, 393, 0,
	0, 0, 0, 0, 0, 337, 407, 0, 537, 538,
	540, 563, 0, 565, 567, 547, 821, 821, 821, 551,
	582, 583, 584, 0, 821, 821, 821, 580, 555, 0,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 608, 0, 619, 310, 609, 677, 678, 0,
	0, 730, 561, 562, 585, 821, 782, 36, 606, 240,
	0, 607, 618, 0, 731, 733, 0, 0, 0, 0,
	-2, 310, 682, 310, 314, 685, 686, 687, 310, 690,
	692, 693, 694, 695, 314, 697, 698, 699, 700, 701,
	310, 310, 704, 705, 310, 310, 708, 310, 310, 0,
	0, 0, 0, 821, 448, 728, 723, 821, 0, 0,
	653, 654, 655, 657, 667, 712, 0, 0, 452, 0,
	0, 0, 423, 821, 238, 187, 190, 191, 0, 218,
	0, 0, 243, 626, 0, 821, 464, 632, 456, 460,
	0, 462, 463, 0, 464, 464, -2, 295, 296, 313,
	316, 534, 0, 0, 532, 0, 0, 532, 337, 763,
	821, 821, 751, 38, 0, 442, 443, 447, 445, 446,
	438, 37, 0, 143, 0, 0, 821, 494, 19, 116,
	0, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	751, 437, 437, 437, 0, 437, 0, 0, 0, 70,
	821, 821, 794, 42, 43, 0, 0, -2, 99, 99,
	-2, 99, 99, 0, 0, 0, 0, 0, 336, 0,
	341, 0, 0, 0, 344, 0, 359, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 238, 337, 366, 239, 564, 566, 568,
	548, 549, 550, 552, 580, 556, 0, 553, 821, 821,
	0, 544, 560, 587, -2, 0, 824, 240, 633, 634,
	0, 0, 821, 679, 330, 683, 684, 688, 689, 691,
	696, 702, 703, 706, 707, 709, 710, 0, 821, 821,
	821, 821, 0, 751, 0, 724, 821, 0, 651, 652,
	668, 669, 670, 671, 0, 0, 0, 183, 0, 0,
	0, 196, 201, 627, 454, 628, 0, 461, 457, 0,
	629, 630, 0, 532, 0, 0, 337, 821, 0, 534,
	337, 13, 33, 0, 0, 760, 752, 753, 756, 759,
	36, 449, 440, -2, 145, 821, 133, 0, 727, 0,
	119, 0, 0, 759, 804, 0, 0, 58, -2, 60,
	0, 0, 827, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 65, 66, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 132, 98, 100, -2,
	101, 102, 103, 104, 105, 0, 0, 0, 0, 0,
	367, 0, 342, 347, 345, 348, 360, 361, 349, 350,
	351, 352, 353, 354, 355, 362, 363, 356, 357, 364,
	365, 419, 419, 0, 0, 337, 406, 366, 405, 554,
	821, 581, 557, 0, 823, 0, 826, 0, 310, 0,
	0, 680, 681, 0, 0, 0, 0, 0, 0, 721,
	650, 729, 821, 0, 424, 238, 0, 0, 192, 193,
	195, 0, 0, 0, 0, 0, 0, 229, 0, 0,
	0, 631, 337, 532, 337, 366, 533, 0, 532, 366,
	764, 0, 821, 821, 821, 755, 763, 39, 821, 450,
	17, 0, 144, 18, 0, 77, 117, 0, 0, 120,
	763, 0, 0, 0, 50, 0, 471, 473, 474, 475,
	507, 0, 509, 0, 0, 0, 64, 508, 54, 0,
	0, 787, 95, 96, 0, 0, 0, -2, 0, 798,
	795, 0, 68, 71, 72, 73, 74, 75, 0, 0,
	0, 726, 0, 24, 815, 0, 0, 0, 0, 339,
	0, 394, 395, 0, 337, 366, 403, 558, 610, 825,
	635, 639, 636, 821, 638, 640, 821, 642, 821, 644,
	821, 646, 821, 821, 0, 0, 725, 0, 184, 188,
	189, 0, 220, 0, 222, 223, 224, 225, 226, 227,
	228, 0, 465, 0, 0, 458, 366, 337, 10, 8,
	535, 337, 12, 0, 761, 762, 754, 34, 469, 821,
	0, 78, 121, 118, 131, 52, 0, 525, -2, 0,
	0, 0, 48, 49, 0, 0, 0, 0, 0, 0,
	514, 0, 0, 517, 0, 0, 0, 0, 0, 0,
	528, 0, 510, 0, 512, 513, 61, 507, 0, 62,
	0, 55, 0, 57, 84, 0, 0, 821, 0, 333,
	799, 800, 801, 797, 828, 0, 0, 0, 0, 0,
	0, 818, 816, 0, 337, 337, 0, 0, 343, 0,
	366, 404, 0, 0, 0, 0, 0, 672, 649, 722,
	0, 219, 221, 230, 0, 821, 467, 7, 11, 366,
	765, 532, 0, 146, 20, 79, 0, 0, 524, 532,
	0, 532, 51, 469, 784, 0, 472, 503, 505, 0,
	500, 515, 516, 518, 0, 520, 0, 522, 523, 476,
	477, 478, 0, 0, 0, 0, 511, 0, 788, 56,
	0, 0, 87, 88, 789, 790, 791, 0, 793, 69,
	76, 0, 0, 82, 0, 133, 26, 0, 817, 366,
	366, 25, 368, 0, 402, 637, 641, 643, 645, 647,
	0, 0, 0, 0, 0, 0, 748, 750, 9, 744,
	470, 776, 0, 0, -2, 0, 0, 751, 532, 47,
	532, 0, 821, 497, 504, 821, 0, 498, 821, 499,
	519, 521, 490, 0, 0, 0, 0, 0, 495, -2,
	85, 86, 0, 0, 92, 821, 0, 0, 0, 0,
	819, 820, 27, 28, 0, 648, 0, 0, 0, 397,
	231, 466, 0, 821, 746, 0, 40, 0, 776, 766,
	778, 780, 821, 36, 0, 772, 0, 759, 46, 751,
	785, 786, 501, 0, 506, 0, 0, 0, 0, 509,
	0, 89, 90, 91, 792, 80, 0, 0, 0, 0,
	673, 0, 676, 468, 749, 35, 821, 821, 0, 41,
	0, 781, -2, 0, 0, 0, 53, 45, 759, 0,
	0, 480, 482, 483, 484, 485, 486, 487, 488, 489,
	0, 0, 0, 528, 496, 0, 0, 21, 396, 674,
	747, 745, 0, 779, 0, -2, 0, 774, 773, 44,
	502, 479, 0, 529, 530, 531, 478, 0, 83, 0,
	0, 769, 36, 0, 481, 491, 81, 0, 777, -2,
	775, 675,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 113, 105, 3,
	58, 60, 110, 108, 59, 109, 122, 111, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 387,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 388, 3, 389, 115, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 116,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 106, 107, 112, 114, 117,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:409
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:414
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:415
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:423
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:428
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:448
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:468
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:489
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:505
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:522
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:542
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:557
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:568
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:580
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:591
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:621
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:635
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:662
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 24:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:679
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:693
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:707
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:727
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:745
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:763
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:772
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:787
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:795
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:802
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:808
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:812
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:818
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:822
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:829
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:841
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:853
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:857
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:863
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:869
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:873
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:877
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:882
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:883
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:896
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:906
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:910
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:914
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:918
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:924
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:928
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:945
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:951
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:966
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:973
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:980
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:987
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1005
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1009
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1013
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1027
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1044
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1048
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1052
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1077
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1085
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1120
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1132
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.str = SessionStr
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1152
		{
			yyVAL.str = GlobalStr
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1157
		{
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1158
		{
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1162
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1163
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1164
		{
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1165
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1166
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1167
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1168
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1219
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1223
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1261
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1273
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1282
		{
			yyVAL.empty = struct{}{}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.empty = struct{}{}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.bytes = nil
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1291
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1295
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1300
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1304
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1308
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1316
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1320
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1325
		{
			yyVAL.expr = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.expr = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1343
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1347
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1352
		{
			yyVAL.bytes = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1356
		{
			yyVAL.bytes = nil
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1375
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1379
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1384
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1388
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1392
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1396
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1400
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1404
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1410
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1415
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1420
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1426
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1437
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1443
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1456
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1461
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1466
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1471
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1477
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1482
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1487
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1492
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1497
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1502
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1507
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1512
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1517
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1526
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1536
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1541
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1546
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1553
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1560
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1568
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1573
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1578
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1583
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1589
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1595
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1601
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1608
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1614
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1620
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1624
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1628
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1632
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1636
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1642
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1646
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1650
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1654
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1658
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1662
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1666
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1670
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1674
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1686
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1698
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1702
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1707
		{
			yyVAL.sequence = &Sequence{}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1711
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1716
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1721
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1726
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1731
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1736
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1741
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1746
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1751
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1756
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1761
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1766
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1771
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1778
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1794
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1798
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1803
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1812
		{
			yyVAL.bytes = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2057
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2115
		{
			yyVAL.optVal = nil
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2154
		{
			yyVAL.optVal = nil
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2158
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2162
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2175
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2215
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2219
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2228
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2232
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2236
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2242
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2255
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2275
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2285
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2290
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2294
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2298
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2302
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2334
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2349
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2359
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2365
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2369
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2385
		{
			yyVAL.indexPartition = nil
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2389
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2407
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2423
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2427
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2459
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2499
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2504
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2511
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 394:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2518
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 395:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2525
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 396:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2534
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 397:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2556
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 402:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 403:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2584
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 404:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 405:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 406:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2617
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2653
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2657
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2661
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2665
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2675
		{
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2676
		{
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2684
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2689
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2726
		{
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2727
		{
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2731
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2758
		{
			setAllowComments(yylex, true)
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2768
		{
			yyVAL.bytes2 = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2772
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2778
		{
			yyVAL.str = UnionStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2782
		{
			yyVAL.str = UnionAllStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2786
		{
			yyVAL.str = UnionDistinctStr
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.str = SQLCacheStr
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.str = ""
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2808
		{
			yyVAL.str = DistinctStr
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.str = StraightJoinHint
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2822
		{
			yyVAL.selectExprs = nil
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2850
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2874
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.overExpr = nil
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2895
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2904
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2928
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2932
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2937
		{
			yyVAL.strs = []string{}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2973
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2991
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3016
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3037
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3041
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3045
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.empty = struct{}{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.empty = struct{}{}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3077
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3081
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.str = JoinStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.str = JoinStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.str = JoinStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.str = StraightJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3114
		{
			yyVAL.str = LeftJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.str = LeftJoinStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.str = RightJoinStr
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.str = RightJoinStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.str = NaturalJoinStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3136
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3146
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3156
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3165
		{
			yyVAL.indexHints = nil
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3169
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.expr = nil
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3191
		{
			yyVAL.columns = nil
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3195
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.str = ""
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3259
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3263
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3267
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3271
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3283
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3291
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3318
		{
			yyVAL.str = IsNullStr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.str = IsNotNullStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.str = IsTrueStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3330
		{
			yyVAL.str = IsNotTrueStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.str = IsFalseStr
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3338
		{
			yyVAL.str = IsNotFalseStr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.str = EqualStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.str = LessThanStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.str = GreaterThanStr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.str = LessEqualStr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.str = GreaterEqualStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.str = NotEqualStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.str = PosixRegexStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.expr = nil
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3509
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3513
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3529
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3537
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3555
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3559
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3567
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3575
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3605
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3609
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3613
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 631:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3617
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3621
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 636:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 637:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 641:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 643:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 645:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 648:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3717
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3721
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3768
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.str = BooleanModeStr
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 675:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.str = QueryExpansionStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3826
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3836
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3870
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3984
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3988
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.expr = nil
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4010
		{
			yyVAL.str = string("")
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4020
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4024
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4030
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.expr = nil
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4044
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4054
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4079
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4092
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4096
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.expr = &NullVal{}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.exprs = nil
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.expr = nil
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4132
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4136
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.orderBy = nil
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4151
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.str = AscScr
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4176
		{
			yyVAL.str = AscScr
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4180
		{
			yyVAL.str = DescScr
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.limit = nil
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.str = ""
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4206
		{
			yyVAL.str = ForUpdateStr
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4210
		{
			yyVAL.str = ShareModeStr
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4227
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4231
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 769:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 771:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4244
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 775:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.updateExprs = nil
		}
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4272
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4288
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4292
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4298
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4304
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4314
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4318
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4324
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4330
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4334
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4344
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4348
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4363
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4376
		{
			yyVAL.bytes = []byte("charset")
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4383
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4387
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.expr = &Default{}
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.str = ""
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4403
		{
			yyVAL.str = IgnoreStr
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4418
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4422
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4464
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4468
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4474
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4478
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4485
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4503
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4509
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4513
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4683
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4692
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
